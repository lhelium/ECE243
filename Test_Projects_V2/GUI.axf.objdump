
C:/Users/Timothy/Documents/GitHub/ECE243/Test_Projects_V2/GUI.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	d8 09 00 00 dc 09 00 00 e0 09 00 00 e4 09 00 00     ................
  30:	e8 09 00 00 f0 15 00 00 98 09 00 00 ec 09 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_region_zero_size_ram+0x80>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_region_zero_size_ram+0x7c>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_region_zero_size_ram+0x84>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_region_zero_size_ram+0x4c>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_region_zero_size_ram+0x4c>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_region_zero_size_ram+0x34>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_region_zero_size_ram+0x6c>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_region_zero_size_ram+0x5c>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_region_zero_size_ram+0xc>
      d4:	eb00052c 	bl	158c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	000016dc 	.word	0x000016dc

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001b18 	.word	0x00001b18

00000124 <__cs3_heap_start_ptr>:
     124:	00001b78 	.word	0x00001b78

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001b20 	.word	0x00001b20
     170:	00001b23 	.word	0x00001b23
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001b20 	.word	0x00001b20
     1bc:	00001b20 	.word	0x00001b20
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001b20 	.word	0x00001b20
     200:	00000000 	.word	0x00000000
     204:	0000167c 	.word	0x0000167c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000167c 	.word	0x0000167c
     250:	00001b24 	.word	0x00001b24
     254:	000016e0 	.word	0x000016e0
     258:	00000000 	.word	0x00000000

0000025c <initializeBoard>:
int currX;
int currY;



void initializeBoard (int board[][COLS]) {
     25c:	e1a03000 	mov	r3, r0
// 1 for red, 2 for green, 3 for blue, 4 for yellow, 5 for orange
    //initialize everything to 0 first
    int i = 0;
    int j = 0;
    for (i = 0; i < ROWS; i++) {
     260:	e3a01000 	mov	r1, #0
        for (j = 0; j < COLS; j++) {
            board [i][j] = 0;
     264:	e1a02001 	mov	r2, r1
     268:	e5832000 	str	r2, [r3]
     26c:	e5832004 	str	r2, [r3, #4]
     270:	e5832008 	str	r2, [r3, #8]
     274:	e583200c 	str	r2, [r3, #12]
     278:	e5832010 	str	r2, [r3, #16]
void initializeBoard (int board[][COLS]) {
// 1 for red, 2 for green, 3 for blue, 4 for yellow, 5 for orange
    //initialize everything to 0 first
    int i = 0;
    int j = 0;
    for (i = 0; i < ROWS; i++) {
     27c:	e2811001 	add	r1, r1, #1
     280:	e2833014 	add	r3, r3, #20
     284:	e3510005 	cmp	r1, #5
     288:	1afffff6 	bne	268 <initializeBoard+0xc>
        }
    }

    // hardcoding the positions
    // RED
    board [0][0] = 1;
     28c:	e3a03001 	mov	r3, #1
     290:	e5803000 	str	r3, [r0]
    board [1][4] = 1;
     294:	e5803024 	str	r3, [r0, #36]	; 0x24
    // GREEN
    board [2][0] = 2;
     298:	e3a03002 	mov	r3, #2
     29c:	e5803028 	str	r3, [r0, #40]	; 0x28
    board [1][3] = 2;
     2a0:	e5803020 	str	r3, [r0, #32]
    // BLUE
    board [2][1] = 3;
     2a4:	e3a03003 	mov	r3, #3
     2a8:	e580302c 	str	r3, [r0, #44]	; 0x2c
    board [2][4] = 3;
     2ac:	e5803038 	str	r3, [r0, #56]	; 0x38
    // YELLOW
    board [4][0] = 4;
     2b0:	e3a03004 	mov	r3, #4
     2b4:	e5803050 	str	r3, [r0, #80]	; 0x50
    board [3][3] = 4;
     2b8:	e5803048 	str	r3, [r0, #72]	; 0x48
    // ORANGE
    board [4][1] = 5;
     2bc:	e3a03005 	mov	r3, #5
     2c0:	e5803054 	str	r3, [r0, #84]	; 0x54
    board [3][4] = 5;
     2c4:	e580304c 	str	r3, [r0, #76]	; 0x4c
     2c8:	e12fff1e 	bx	lr

000002cc <plot_pixel>:
    return 0;
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     2cc:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     2d0:	e3403000 	movt	r3, #0
     2d4:	e5933000 	ldr	r3, [r3]
     2d8:	e1a00080 	lsl	r0, r0, #1
     2dc:	e0831501 	add	r1, r3, r1, lsl #10
     2e0:	e18120b0 	strh	r2, [r1, r0]
     2e4:	e12fff1e 	bx	lr

000002e8 <fill_color>:
        }
    }
}


void fill_color(int x, int y, short int color) {
     2e8:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     2ec:	e1a07002 	mov	r7, r2
//printf("position (x,y): " );
     int xpos =  x * 64;
     2f0:	e1a05300 	lsl	r5, r0, #6
     int ypos =  y * 48;
     2f4:	e0811081 	add	r1, r1, r1, lsl #1
     2f8:	e1a08201 	lsl	r8, r1, #4
    // //printf("\n");
    //
    int tempX = xpos;
    int tempY = ypos;
    //
    for (xpos = x * 64; xpos < (tempX + 64); xpos++) {
     2fc:	e285a040 	add	r10, r5, #64	; 0x40
     300:	e155000a 	cmp	r5, r10
     304:	a8bd85f8 	popge	{r3, r4, r5, r6, r7, r8, r10, pc}
     308:	ea00000a 	b	338 <fill_color+0x50>
        for (ypos = y * 48; ypos < (tempY + 48); ypos++) {
            plot_pixel(xpos, ypos, color);
     30c:	e1a00005 	mov	r0, r5
     310:	e1a01004 	mov	r1, r4
     314:	e1a02007 	mov	r2, r7
     318:	ebffffeb 	bl	2cc <plot_pixel>
    //
    int tempX = xpos;
    int tempY = ypos;
    //
    for (xpos = x * 64; xpos < (tempX + 64); xpos++) {
        for (ypos = y * 48; ypos < (tempY + 48); ypos++) {
     31c:	e2844001 	add	r4, r4, #1
     320:	e1540006 	cmp	r4, r6
     324:	1afffff8 	bne	30c <fill_color+0x24>
    // //printf("\n");
    //
    int tempX = xpos;
    int tempY = ypos;
    //
    for (xpos = x * 64; xpos < (tempX + 64); xpos++) {
     328:	e2855001 	add	r5, r5, #1
     32c:	e155000a 	cmp	r5, r10
     330:	1a000001 	bne	33c <fill_color+0x54>
     334:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
        for (ypos = y * 48; ypos < (tempY + 48); ypos++) {
     338:	e2886030 	add	r6, r8, #48	; 0x30
     33c:	e1580006 	cmp	r8, r6
     340:	b1a04008 	movlt	r4, r8
     344:	bafffff0 	blt	30c <fill_color+0x24>
     348:	eafffff6 	b	328 <fill_color+0x40>

0000034c <wait_for_vsync>:
void wait_for_vsync() {

    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;

    //step 1: write a 1 to the front buffer
    *pixel_ctrl_ptr = 1;
     34c:	e3033fff 	movw	r3, #16383	; 0x3fff
     350:	e34f3f20 	movt	r3, #65312	; 0xff20
     354:	e3a02001 	mov	r2, #1
     358:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    //setp 2: poll the status, + 3 means 3 bytes.
    register int status = *(pixel_ctrl_ptr + 3);
     35c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d

    //step  3: check conditions
    //while status is 1, status is equal to whatever the S bit is.
    // if status is 0, this means the swap happens and it breaks out of the loop
    while((status & 0x01) != 0) {
     360:	e3130001 	tst	r3, #1
     364:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr + 3);
     368:	e3032fff 	movw	r2, #16383	; 0x3fff
     36c:	e34f2f20 	movt	r2, #65312	; 0xff20
     370:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status = *(pixel_ctrl_ptr + 3);

    //step  3: check conditions
    //while status is 1, status is equal to whatever the S bit is.
    // if status is 0, this means the swap happens and it breaks out of the loop
    while((status & 0x01) != 0) {
     374:	e3130001 	tst	r3, #1
     378:	1afffffc 	bne	370 <wait_for_vsync+0x24>
     37c:	e12fff1e 	bx	lr

00000380 <clear_screen>:
		status = *(pixel_ctrl_ptr + 3);
	}
}

//ISS C
void clear_screen () {
     380:	e92d4070 	push	{r4, r5, r6, lr}
    int x, y;
    for (x = 0; x < 320; x++) {
     384:	e3a05000 	mov	r5, #0
		status = *(pixel_ctrl_ptr + 3);
	}
}

//ISS C
void clear_screen () {
     388:	e1a06005 	mov	r6, r5
     38c:	ea000009 	b	3b8 <clear_screen+0x38>
    int x, y;
    for (x = 0; x < 320; x++) {
        for (y = 0; y < 240; y++) {
            plot_pixel(x, y, 0x0000);
     390:	e1a00005 	mov	r0, r5
     394:	e1a01004 	mov	r1, r4
     398:	e1a02006 	mov	r2, r6
     39c:	ebffffca 	bl	2cc <plot_pixel>

//ISS C
void clear_screen () {
    int x, y;
    for (x = 0; x < 320; x++) {
        for (y = 0; y < 240; y++) {
     3a0:	e2844001 	add	r4, r4, #1
     3a4:	e35400f0 	cmp	r4, #240	; 0xf0
     3a8:	1afffff8 	bne	390 <clear_screen+0x10>
}

//ISS C
void clear_screen () {
    int x, y;
    for (x = 0; x < 320; x++) {
     3ac:	e2855001 	add	r5, r5, #1
     3b0:	e3550d05 	cmp	r5, #320	; 0x140
     3b4:	08bd8070 	popeq	{r4, r5, r6, pc}
		status = *(pixel_ctrl_ptr + 3);
	}
}

//ISS C
void clear_screen () {
     3b8:	e1a04006 	mov	r4, r6
     3bc:	eafffff3 	b	390 <clear_screen+0x10>

000003c0 <swap>:
    }
}

void swap (int* a, int* b) {
    int temp;
    temp = *b;
     3c0:	e5913000 	ldr	r3, [r1]
    *b = *a;
     3c4:	e5902000 	ldr	r2, [r0]
     3c8:	e5812000 	str	r2, [r1]
    *a = temp;
     3cc:	e5803000 	str	r3, [r0]
     3d0:	e12fff1e 	bx	lr

000003d4 <draw_line>:
}
//alogrithm
void draw_line(int x0, int x1, int y0, int y1, short int line_color)
{
     3d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     3d8:	e24dd014 	sub	sp, sp, #20
     3dc:	e58d000c 	str	r0, [sp, #12]
     3e0:	e58d1008 	str	r1, [sp, #8]
     3e4:	e58d2004 	str	r2, [sp, #4]
     3e8:	e58d3000 	str	r3, [sp]
     3ec:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool is_steep  = abs(y1 - y0) > abs(x1 - x0);
     3f0:	e0623003 	rsb	r3, r2, r3
     3f4:	e3530000 	cmp	r3, #0
     3f8:	b2633000 	rsblt	r3, r3, #0
     3fc:	e0601001 	rsb	r1, r0, r1
     400:	e0218fc1 	eor	r8, r1, r1, asr #31
     404:	e0488fc1 	sub	r8, r8, r1, asr #31
     408:	e1530008 	cmp	r3, r8
     40c:	d3a08000 	movle	r8, #0
     410:	c3a08001 	movgt	r8, #1

// might be here:
    if (is_steep) {
     414:	e3580000 	cmp	r8, #0
     418:	0a000005 	beq	434 <draw_line+0x60>
        swap(&x0, &y0);
     41c:	e28d000c 	add	r0, sp, #12
     420:	e28d1004 	add	r1, sp, #4
     424:	ebffffe5 	bl	3c0 <swap>
        swap(&x1, &y1);
     428:	e28d0008 	add	r0, sp, #8
     42c:	e1a0100d 	mov	r1, sp
     430:	ebffffe2 	bl	3c0 <swap>
    }

    if (x0 > x1) {
     434:	e59d3008 	ldr	r3, [sp, #8]
     438:	e59d200c 	ldr	r2, [sp, #12]
     43c:	e1520003 	cmp	r2, r3
     440:	da000005 	ble	45c <draw_line+0x88>
        swap(&x0, &x1);
     444:	e28d000c 	add	r0, sp, #12
     448:	e28d1008 	add	r1, sp, #8
     44c:	ebffffdb 	bl	3c0 <swap>
        swap(&y0, &y1);
     450:	e28d0004 	add	r0, sp, #4
     454:	e1a0100d 	mov	r1, sp
     458:	ebffffd8 	bl	3c0 <swap>
    }

    int deltax = x1 - x0;
     45c:	e59d3008 	ldr	r3, [sp, #8]
     460:	e59d500c 	ldr	r5, [sp, #12]
     464:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
     468:	e59d2000 	ldr	r2, [sp]
     46c:	e59d6004 	ldr	r6, [sp, #4]
     470:	e0667002 	rsb	r7, r6, r2
     474:	e3570000 	cmp	r7, #0
     478:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
     47c:	e0894fa9 	add	r4, r9, r9, lsr #31
     480:	e1a040c4 	asr	r4, r4, #1
     484:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step;

    if (y0 < y1) {
        y_step = 1;
     488:	e1520006 	cmp	r2, r6
     48c:	d3e0b000 	mvnle	r11, #0
     490:	c3a0b001 	movgt	r11, #1
    } else {
        y_step = -1;
    }

    int x = x0;
    for (x = x0; x < x1 + 1; x++) {
     494:	e2833001 	add	r3, r3, #1
     498:	e1550003 	cmp	r5, r3
     49c:	aa00000e 	bge	4dc <draw_line+0x108>
        if (is_steep) {
     4a0:	e3580000 	cmp	r8, #0
            plot_pixel(y, x, line_color);
     4a4:	11a00006 	movne	r0, r6
     4a8:	11a01005 	movne	r1, r5
        } else {
            plot_pixel(x, y, line_color);
     4ac:	01a00005 	moveq	r0, r5
     4b0:	01a01006 	moveq	r1, r6
     4b4:	e1a0200a 	mov	r2, r10
     4b8:	ebffff83 	bl	2cc <plot_pixel>
        }

        error = error + deltay;

        if (error >= 0) {
     4bc:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
     4c0:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
     4c4:	50694004 	rsbpl	r4, r9, r4
    } else {
        y_step = -1;
    }

    int x = x0;
    for (x = x0; x < x1 + 1; x++) {
     4c8:	e2855001 	add	r5, r5, #1
     4cc:	e59d3008 	ldr	r3, [sp, #8]
     4d0:	e2833001 	add	r3, r3, #1
     4d4:	e1530005 	cmp	r3, r5
     4d8:	cafffff0 	bgt	4a0 <draw_line+0xcc>
        if (error >= 0) {
            y = y + y_step;
            error = error - deltax;
        }
    }
}
     4dc:	e28dd014 	add	sp, sp, #20
     4e0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000004e4 <animate_line>:
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

// code not shown for clear_screen() and draw_line() subroutines
// takes in argument for the box position on the board, the WASD direction and the U16 color.
void animate_line(int boardX, int boardY, int direction, short int line_color, short int color, int board[][COLS]) {
     4e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     4e8:	e24dd014 	sub	sp, sp, #20
     4ec:	e1a09000 	mov	r9, r0
     4f0:	e1a0a001 	mov	r10, r1
     4f4:	e1a07003 	mov	r7, r3
     4f8:	e1dd33f8 	ldrsh	r3, [sp, #56]	; 0x38
     4fc:	e58d300c 	str	r3, [sp, #12]

    //convert board position onto x,y coordinates on the screen
    int startX = boardX * 64;
     500:	e1a04300 	lsl	r4, r0, #6
    int startY = boardY * 48;
     504:	e0815081 	add	r5, r1, r1, lsl #1
     508:	e1a05205 	lsl	r5, r5, #4
     50c:	e1a06005 	mov	r6, r5

    int endXRIGHT = startX + 64;
     510:	e284b040 	add	r11, r4, #64	; 0x40
    int endYUP = startY + 48;
     514:	e2858030 	add	r8, r5, #48	; 0x30
    int x1 = 0;  // ending x
    int y0 = 0;  // starting y
    int y1 = 0;  // ending y

    // W UPWARDS
    if (direction == 1) {
     518:	e3520001 	cmp	r2, #1
     51c:	1a000018 	bne	584 <animate_line+0xa0>
        x0 = startX;
        x1 = endXRIGHT;
        y0 = startY;
        y1 = startY;
        for (startY = boardY * 48; startY < endYUP; startY++) {
     520:	e1550008 	cmp	r5, r8
     524:	aa000009 	bge	550 <animate_line+0x6c>
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

// code not shown for clear_screen() and draw_line() subroutines
// takes in argument for the box position on the board, the WASD direction and the U16 color.
void animate_line(int boardX, int boardY, int direction, short int line_color, short int color, int board[][COLS]) {
     528:	e2456030 	sub	r6, r5, #48	; 0x30
        x1 = endXRIGHT;
        y0 = startY;
        y1 = startY;
        for (startY = boardY * 48; startY < endYUP; startY++) {
            // Horizontal Line
            y0 -= direction;
     52c:	e2455001 	sub	r5, r5, #1
            y1 -= direction;
            draw_line(x0, x1, y0, y1, line_color);
     530:	e58d7000 	str	r7, [sp]
     534:	e1a00004 	mov	r0, r4
     538:	e1a0100b 	mov	r1, r11
     53c:	e1a02005 	mov	r2, r5
     540:	e1a03005 	mov	r3, r5
     544:	ebffffa2 	bl	3d4 <draw_line>
    if (direction == 1) {
        x0 = startX;
        x1 = endXRIGHT;
        y0 = startY;
        y1 = startY;
        for (startY = boardY * 48; startY < endYUP; startY++) {
     548:	e1550006 	cmp	r5, r6
     54c:	1afffff6 	bne	52c <animate_line+0x48>
            draw_line(x0, x1, y0, y1, line_color);
            // wait_for_vsync();
            // draw_line(x0, x1, y0, y1, 0x0000);
        }
        //fill_color(boardX, boardY, line_color);
        if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
     550:	e35a0005 	cmp	r10, #5
     554:	d3590005 	cmple	r9, #5
     558:	ca00005c 	bgt	6d0 <animate_line+0x1ec>
     55c:	e35a0000 	cmp	r10, #0
     560:	a3590000 	cmpge	r9, #0
     564:	ba000059 	blt	6d0 <animate_line+0x1ec>
            board[boardX][boardY - 1] = color;
     568:	e0899109 	add	r9, r9, r9, lsl #2
     56c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
     570:	e0823109 	add	r3, r2, r9, lsl #2
     574:	e24aa001 	sub	r10, r10, #1
     578:	e59d200c 	ldr	r2, [sp, #12]
     57c:	e783210a 	str	r2, [r3, r10, lsl #2]
     580:	ea000052 	b	6d0 <animate_line+0x1ec>
        }
    }
    // A LEFT
    else if (direction == 2) {
     584:	e3520002 	cmp	r2, #2
     588:	1a00001a 	bne	5f8 <animate_line+0x114>
    int startX = boardX * 64;
    int startY = boardY * 48;

    int endXRIGHT = startX + 64;
    int endYUP = startY + 48;
    int endXLEFT = startX - 64;
     58c:	e244b040 	sub	r11, r4, #64	; 0x40
    else if (direction == 2) {
        x0 = startX;
        x1 = startX;
        y0 = startY;
        y1 = endYUP; // needsd checking
        for (startX = boardX * 64; startX > endXLEFT; startX--) {
     590:	e154000b 	cmp	r4, r11
     594:	da00000a 	ble	5c4 <animate_line+0xe0>
     598:	e1a05004 	mov	r5, r4
            x0 -= direction;
     59c:	e2455002 	sub	r5, r5, #2
            x1 -= direction;
            draw_line(x0, x1, y0, y1, line_color);
     5a0:	e58d7000 	str	r7, [sp]
     5a4:	e1a00005 	mov	r0, r5
     5a8:	e1a01005 	mov	r1, r5
     5ac:	e1a02006 	mov	r2, r6
     5b0:	e1a03008 	mov	r3, r8
     5b4:	ebffff86 	bl	3d4 <draw_line>
    else if (direction == 2) {
        x0 = startX;
        x1 = startX;
        y0 = startY;
        y1 = endYUP; // needsd checking
        for (startX = boardX * 64; startX > endXLEFT; startX--) {
     5b8:	e2444001 	sub	r4, r4, #1
     5bc:	e15b0004 	cmp	r11, r4
     5c0:	bafffff5 	blt	59c <animate_line+0xb8>
            x1 -= direction;
            draw_line(x0, x1, y0, y1, line_color);
            //wait_for_vsync();
            //draw_line(x0, x1, y0, y1, 0x0000);
        }
        if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
     5c4:	e35a0005 	cmp	r10, #5
     5c8:	d3590005 	cmple	r9, #5
     5cc:	ca00003f 	bgt	6d0 <animate_line+0x1ec>
     5d0:	e35a0000 	cmp	r10, #0
     5d4:	a3590000 	cmpge	r9, #0
     5d8:	ba00003c 	blt	6d0 <animate_line+0x1ec>
            board[boardX - 1][boardY] = color;
     5dc:	e2499001 	sub	r9, r9, #1
     5e0:	e0899109 	add	r9, r9, r9, lsl #2
     5e4:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
     5e8:	e0823109 	add	r3, r2, r9, lsl #2
     5ec:	e59d200c 	ldr	r2, [sp, #12]
     5f0:	e783210a 	str	r2, [r3, r10, lsl #2]
     5f4:	ea000035 	b	6d0 <animate_line+0x1ec>
        }
    }
    // S DOWNWARDS
    else if (direction == 3) {
     5f8:	e3520003 	cmp	r2, #3
     5fc:	1a000019 	bne	668 <animate_line+0x184>
    int startY = boardY * 48;

    int endXRIGHT = startX + 64;
    int endYUP = startY + 48;
    int endXLEFT = startX - 64;
    int endYDOWN = startY - 48;
     600:	e2458030 	sub	r8, r5, #48	; 0x30
    else if (direction == 3) {
        x0 = startX;
        x1 = endXRIGHT;
        y0 = startY;
        y1 = startY;
        for (startY = boardY * 48; startY > endYDOWN; startY--) {
     604:	e1550008 	cmp	r5, r8
     608:	da000009 	ble	634 <animate_line+0x150>
            y0 += direction;
     60c:	e2855003 	add	r5, r5, #3
            y1 += direction;
            draw_line(x0, x1, y0, y1, line_color);
     610:	e58d7000 	str	r7, [sp]
     614:	e1a00004 	mov	r0, r4
     618:	e1a0100b 	mov	r1, r11
     61c:	e1a02005 	mov	r2, r5
     620:	e1a03005 	mov	r3, r5
     624:	ebffff6a 	bl	3d4 <draw_line>
    else if (direction == 3) {
        x0 = startX;
        x1 = endXRIGHT;
        y0 = startY;
        y1 = startY;
        for (startY = boardY * 48; startY > endYDOWN; startY--) {
     628:	e2466001 	sub	r6, r6, #1
     62c:	e1580006 	cmp	r8, r6
     630:	bafffff5 	blt	60c <animate_line+0x128>
            y1 += direction;
            draw_line(x0, x1, y0, y1, line_color);
            //wait_for_vsync();
            //draw_line(x0, x1, y0, y1, 0x0000);
        }
        if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
     634:	e35a0005 	cmp	r10, #5
     638:	d3590005 	cmple	r9, #5
     63c:	ca000023 	bgt	6d0 <animate_line+0x1ec>
     640:	e35a0000 	cmp	r10, #0
     644:	a3590000 	cmpge	r9, #0
     648:	ba000020 	blt	6d0 <animate_line+0x1ec>
            board[boardX][boardY + 1] = color;
     64c:	e0899109 	add	r9, r9, r9, lsl #2
     650:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
     654:	e0823109 	add	r3, r2, r9, lsl #2
     658:	e28aa001 	add	r10, r10, #1
     65c:	e59d200c 	ldr	r2, [sp, #12]
     660:	e783210a 	str	r2, [r3, r10, lsl #2]
     664:	ea000019 	b	6d0 <animate_line+0x1ec>
        }
    }
    // D RIGHTWARDS
    else if (direction == 4) {
     668:	e3520004 	cmp	r2, #4
     66c:	1a000017 	bne	6d0 <animate_line+0x1ec>
        x0 = startX;
        x1 = x0;
        y0 = startY;
        y1 = endYUP; // needsd checking
        for (startX = boardX * 64; startX < endXRIGHT; startX++) {
     670:	e154000b 	cmp	r4, r11
     674:	aa000009 	bge	6a0 <animate_line+0x1bc>
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

// code not shown for clear_screen() and draw_line() subroutines
// takes in argument for the box position on the board, the WASD direction and the U16 color.
void animate_line(int boardX, int boardY, int direction, short int line_color, short int color, int board[][COLS]) {
     678:	e2845c01 	add	r5, r4, #256	; 0x100
        x0 = startX;
        x1 = x0;
        y0 = startY;
        y1 = endYUP; // needsd checking
        for (startX = boardX * 64; startX < endXRIGHT; startX++) {
            x0 += direction;
     67c:	e2844004 	add	r4, r4, #4
            x1 += direction;
            draw_line(x0, x1, y0, y1, line_color);
     680:	e58d7000 	str	r7, [sp]
     684:	e1a00004 	mov	r0, r4
     688:	e1a01004 	mov	r1, r4
     68c:	e1a02006 	mov	r2, r6
     690:	e1a03008 	mov	r3, r8
     694:	ebffff4e 	bl	3d4 <draw_line>
    else if (direction == 4) {
        x0 = startX;
        x1 = x0;
        y0 = startY;
        y1 = endYUP; // needsd checking
        for (startX = boardX * 64; startX < endXRIGHT; startX++) {
     698:	e1540005 	cmp	r4, r5
     69c:	1afffff6 	bne	67c <animate_line+0x198>
            x1 += direction;
            draw_line(x0, x1, y0, y1, line_color);
            //wait_for_vsync();
            //draw_line(x0, x1, y0, y1, 0x0000);
        }
        if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
     6a0:	e35a0005 	cmp	r10, #5
     6a4:	d3590005 	cmple	r9, #5
     6a8:	ca000008 	bgt	6d0 <animate_line+0x1ec>
     6ac:	e35a0000 	cmp	r10, #0
     6b0:	a3590000 	cmpge	r9, #0
     6b4:	ba000005 	blt	6d0 <animate_line+0x1ec>
            board[boardX + 1][boardY] = color;
     6b8:	e2899001 	add	r9, r9, #1
     6bc:	e0899109 	add	r9, r9, r9, lsl #2
     6c0:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
     6c4:	e0823109 	add	r3, r2, r9, lsl #2
     6c8:	e59d200c 	ldr	r2, [sp, #12]
     6cc:	e783210a 	str	r2, [r3, r10, lsl #2]
        }
    }
}
     6d0:	e28dd014 	add	sp, sp, #20
     6d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000006d8 <enable_A9_interrupts>:

// CODE BELOW ARE INTERUPT RELATED:
/*Turn on interrupts in the ARM processor*/
void enable_A9_interrupts() {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     6d8:	e3a03053 	mov	r3, #83	; 0x53
     6dc:	e129f003 	msr	CPSR_fc, r3
     6e0:	e12fff1e 	bx	lr

000006e4 <disable_A9_interrupts>:
}

/*Turn off interrupts in the ARM processor*/
void disable_A9_interrupts() {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     6e4:	e3a030d3 	mov	r3, #211	; 0xd3
     6e8:	e129f003 	msr	CPSR_fc, r3
     6ec:	e12fff1e 	bx	lr

000006f0 <config_interrupt>:
	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs
	*((int *) 0xFFFED000) = 1;
}

/* Configure Set Enable Registers (ICDISERn) and Interrupt Processor Target Registers (ICDIPTRn). The default (reset) values are used for other registers in the GIC.*/
void config_interrupt (int N, int CPU_target) {
     6f0:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;

	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     6f4:	e1a031c0 	asr	r3, r0, #3
     6f8:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
     6fc:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00

	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     700:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;

	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     704:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     708:	e3a04001 	mov	r4, #1
     70c:	e18c2214 	orr	r2, r12, r4, lsl r2
     710:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;

	/* Now that we know the register address and value, write to (only) the appropriate byte */
	*(char *)address = (char) CPU_target;
     714:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     718:	e5c01000 	strb	r1, [r0]
}
     71c:	e8bd0010 	ldmfd	sp!, {r4}
     720:	e12fff1e 	bx	lr

00000724 <config_GIC>:
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
}

/* Configure the Generic Interrupt Controller (GIC)*/
void config_GIC() {
     724:	e92d4008 	push	{r3, lr}
	config_interrupt(79, 1); //configure the PS2 keyboard parallel port
     728:	e3a0004f 	mov	r0, #79	; 0x4f
     72c:	e3a01001 	mov	r1, #1
     730:	ebffffee 	bl	6f0 <config_interrupt>
	config_interrupt(73, 1); //configure KEY interrupts
     734:	e3a00049 	mov	r0, #73	; 0x49
     738:	e3a01001 	mov	r1, #1
     73c:	ebffffeb 	bl	6f0 <config_interrupt>

	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities
	*((int *) 0xFFFEC104) = 0xFFFF;
     740:	e3e02a13 	mvn	r2, #77824	; 0x13000
     744:	e30f3fff 	movw	r3, #65535	; 0xffff
     748:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	*((int *) 0xFFFEC100) = 1;
     74c:	e3a03001 	mov	r3, #1
     750:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs
	*((int *) 0xFFFED000) = 1;
     754:	e3e02a12 	mvn	r2, #73728	; 0x12000
     758:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     75c:	e8bd8008 	pop	{r3, pc}

00000760 <config_KEYs>:
}

/* setup the KEY interrupts */
void config_KEYs() {
	volatile int * KEY_ptr = (int *) 0xFF200050; // KEY base address
	*(KEY_ptr + 2) = 0xF; // enable interrupts for all four KEYs
     760:	e3a03000 	mov	r3, #0
     764:	e34f3f20 	movt	r3, #65312	; 0xff20
     768:	e3a0200f 	mov	r2, #15
     76c:	e5832058 	str	r2, [r3, #88]	; 0x58
     770:	e12fff1e 	bx	lr

00000774 <KEY_ISR>:
	volatile int *KEY_ptr = (int *) 0xFF200050;
	/* HEX display base address */
	volatile int *HEX3_HEX0_ptr = (int *) 0xFF200020;
	volatile int* RLEDs = (int*) 0xFF200000;
	int press, HEX_bits, LEDs;
	press = *(KEY_ptr + 3); // read the pushbutton interrupt register
     774:	e3a03000 	mov	r3, #0
     778:	e34f3f20 	movt	r3, #65312	; 0xff20
     77c:	e593205c 	ldr	r2, [r3, #92]	; 0x5c

	if(press != 0) { //if KEY is pressed, reset the game
     780:	e3520000 	cmp	r2, #0
     784:	0a00001f 	beq	808 <KEY_ISR+0x94>
		pressedAgain = !pressedAgain;
     788:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     78c:	e3403000 	movt	r3, #0
     790:	e5d31004 	ldrb	r1, [r3, #4]
     794:	e2211001 	eor	r1, r1, #1
     798:	e5c31004 	strb	r1, [r3, #4]
		resetGame = pressedAgain;
     79c:	e5d31004 	ldrb	r1, [r3, #4]
     7a0:	e5c31005 	strb	r1, [r3, #5]

		if(resetGame) {
     7a4:	e5d33005 	ldrb	r3, [r3, #5]
     7a8:	e3530000 	cmp	r3, #0
			LEDs = 0xFFFF;
			*RLEDs = LEDs;
     7ac:	e3a03000 	mov	r3, #0
     7b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     7b4:	130f1fff 	movwne	r1, #65535	; 0xffff
		} else {
			LEDs = 0x0000;
			*RLEDs = LEDs;
     7b8:	03a01000 	moveq	r1, #0
     7bc:	e5831000 	str	r1, [r3]
		}

	}

	*(KEY_ptr + 3) = press; // Clear the interrupt
     7c0:	e3a03000 	mov	r3, #0
     7c4:	e34f3f20 	movt	r3, #65312	; 0xff20
     7c8:	e583205c 	str	r2, [r3, #92]	; 0x5c
	/* if(*(KEY_ptr + 3) == 0) {
		resetGame = false;

	} */

	if (press & 0x1) // KEY0
     7cc:	e3120001 	tst	r2, #1
		HEX_bits = 0b00111111;
     7d0:	13a0203f 	movne	r2, #63	; 0x3f
	/* if(*(KEY_ptr + 3) == 0) {
		resetGame = false;

	} */

	if (press & 0x1) // KEY0
     7d4:	1a000007 	bne	7f8 <KEY_ISR+0x84>
		HEX_bits = 0b00111111;
	else if (press & 0x2) // KEY1
     7d8:	e3120002 	tst	r2, #2
		HEX_bits = 0b00000110;
     7dc:	13a02006 	movne	r2, #6

	} */

	if (press & 0x1) // KEY0
		HEX_bits = 0b00111111;
	else if (press & 0x2) // KEY1
     7e0:	1a000004 	bne	7f8 <KEY_ISR+0x84>
		HEX_bits = 0b00000110;
	else if (press & 0x4) // KEY2
     7e4:	e2022004 	and	r2, r2, #4
		HEX_bits = 0b01011011;
     7e8:	e3520000 	cmp	r2, #0
     7ec:	03a0204f 	moveq	r2, #79	; 0x4f
     7f0:	13a0205b 	movne	r2, #91	; 0x5b
     7f4:	eaffffff 	b	7f8 <KEY_ISR+0x84>
	else // press & 0x8, which is KEY3
		HEX_bits = 0b01001111;

	*HEX3_HEX0_ptr = HEX_bits;
     7f8:	e3a03000 	mov	r3, #0
     7fc:	e34f3f20 	movt	r3, #65312	; 0xff20
     800:	e5832020 	str	r2, [r3, #32]
     804:	e12fff1e 	bx	lr
			*RLEDs = LEDs;
		}

	}

	*(KEY_ptr + 3) = press; // Clear the interrupt
     808:	e3a03000 	mov	r3, #0
     80c:	e34f3f20 	movt	r3, #65312	; 0xff20
     810:	e3a01000 	mov	r1, #0
     814:	e583105c 	str	r1, [r3, #92]	; 0x5c
     818:	eafffff1 	b	7e4 <KEY_ISR+0x70>

0000081c <config_PS2s>:

/* setup the PS2 interrupts in the FPGA */
void config_PS2s() {
	volatile int* PS2_ptr = (int*)0xFF200100; // PS2 base address
	volatile int* PS2_ptr_interrupt = (int*)0xFF200104;
	*(PS2_ptr_interrupt) = 0x1; // enable interrupts for PS/2 by writing 1 to RE field at address 0xFF200104
     81c:	e3a03000 	mov	r3, #0
     820:	e34f3f20 	movt	r3, #65312	; 0xff20
     824:	e3a02001 	mov	r2, #1
     828:	e5832104 	str	r2, [r3, #260]	; 0x104
     82c:	e12fff1e 	bx	lr

00000830 <PS2_ISR>:
// use global variables.

 void PS2_ISR() { //determine which button on the keyboard was pressed: W,A,S,D or other, and display on HEX
	//clear the interrupt
	volatile int* PS2_ptr_interrupt = (int*)0xFF200104;
	*(PS2_ptr_interrupt) = 0b100000001;
     830:	e3a03000 	mov	r3, #0
     834:	e34f3f20 	movt	r3, #65312	; 0xff20
     838:	e3002101 	movw	r2, #257	; 0x101
     83c:	e5832104 	str	r2, [r3, #260]	; 0x104
	volatile int *RLEDs = (int *) 0xFF200000;

	int PS2_data, RAVAIL, RVALID, data, LED;
	//const int W = 0x1D, A = 0x1C, S = 0x1B, D = 0x23;

	PS2_data = *(PS2_ptr);
     840:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;

	if(RAVAIL > 0) {
     844:	e1b03822 	lsrs	r3, r2, #16
     848:	0a00004e 	beq	988 <PS2_ISR+0x158>
		byte1 = byte2;
     84c:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     850:	e3403000 	movt	r3, #0
     854:	e5d30006 	ldrb	r0, [r3, #6]
     858:	e5c30007 	strb	r0, [r3, #7]
		byte2 = data;
     85c:	e3a00000 	mov	r0, #0
     860:	e5c30006 	strb	r0, [r3, #6]
		data = PS2_data & 0xFF;
     864:	e6ef3072 	uxtb	r3, r2

		//determine the direction of movement (W/A/S/D)

		//if(byte1 != data) {
			if(data == 0x1D) {
     868:	e353001d 	cmp	r3, #29
     86c:	1a000004 	bne	884 <PS2_ISR+0x54>
				//LED = 0x1D;
				keyPressed = 'W';
     870:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     874:	e3403000 	movt	r3, #0
     878:	e3a02057 	mov	r2, #87	; 0x57
     87c:	e5c32008 	strb	r2, [r3, #8]
     880:	ea000040 	b	988 <PS2_ISR+0x158>

				//printf("W pressed\n");
			} else if(data == 0x1C) {
     884:	e353001c 	cmp	r3, #28
     888:	1a000005 	bne	8a4 <PS2_ISR+0x74>
				LED = 0x1C;

                //Vertical Line

				keyPressed = 'A';
     88c:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     890:	e3403000 	movt	r3, #0
     894:	e3a02041 	mov	r2, #65	; 0x41
     898:	e5c32008 	strb	r2, [r3, #8]
				//LED = 0x1D;
				keyPressed = 'W';

				//printf("W pressed\n");
			} else if(data == 0x1C) {
				LED = 0x1C;
     89c:	e3a0101c 	mov	r1, #28
     8a0:	ea000038 	b	988 <PS2_ISR+0x158>

                //Vertical Line

				keyPressed = 'A';
				//printf("A pressed\n");
			} else if(data == 0x1B) {
     8a4:	e353001b 	cmp	r3, #27
     8a8:	1a000005 	bne	8c4 <PS2_ISR+0x94>
				LED = 0x1B;
				keyPressed = 'S';
     8ac:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     8b0:	e3403000 	movt	r3, #0
     8b4:	e3a02053 	mov	r2, #83	; 0x53
     8b8:	e5c32008 	strb	r2, [r3, #8]
                //Vertical Line

				keyPressed = 'A';
				//printf("A pressed\n");
			} else if(data == 0x1B) {
				LED = 0x1B;
     8bc:	e3a0101b 	mov	r1, #27
     8c0:	ea000030 	b	988 <PS2_ISR+0x158>
				keyPressed = 'S';
				//printf("S pressed\n");
			} else if(data == 0x23) {
     8c4:	e3530023 	cmp	r3, #35	; 0x23
     8c8:	1a000005 	bne	8e4 <PS2_ISR+0xb4>
				LED = 0x23;
				keyPressed = 'D';
     8cc:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     8d0:	e3403000 	movt	r3, #0
     8d4:	e3a02044 	mov	r2, #68	; 0x44
     8d8:	e5c32008 	strb	r2, [r3, #8]
			} else if(data == 0x1B) {
				LED = 0x1B;
				keyPressed = 'S';
				//printf("S pressed\n");
			} else if(data == 0x23) {
				LED = 0x23;
     8dc:	e3a01023 	mov	r1, #35	; 0x23
     8e0:	ea000028 	b	988 <PS2_ISR+0x158>
				keyPressed = 'D';
				//printf("D pressed\n");

			//determine the color to move (R/G/B/Y/O)
			} else if(data == 0x16) {
     8e4:	e3530016 	cmp	r3, #22
     8e8:	1a000005 	bne	904 <PS2_ISR+0xd4>
				LED = 0x16;
				keyPressed = '1';
     8ec:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     8f0:	e3403000 	movt	r3, #0
     8f4:	e3a02031 	mov	r2, #49	; 0x31
     8f8:	e5c32008 	strb	r2, [r3, #8]
				keyPressed = 'D';
				//printf("D pressed\n");

			//determine the color to move (R/G/B/Y/O)
			} else if(data == 0x16) {
				LED = 0x16;
     8fc:	e3a01016 	mov	r1, #22
     900:	ea000020 	b	988 <PS2_ISR+0x158>
				keyPressed = '1';
				//color = 'R';
				//printf("1 pressed\n");
			} else if(data == 0x1E) {
     904:	e353001e 	cmp	r3, #30
     908:	1a000005 	bne	924 <PS2_ISR+0xf4>
				LED = 0x1E;
				//color = 'G';
				keyPressed = '2';
     90c:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     910:	e3403000 	movt	r3, #0
     914:	e3a02032 	mov	r2, #50	; 0x32
     918:	e5c32008 	strb	r2, [r3, #8]
				LED = 0x16;
				keyPressed = '1';
				//color = 'R';
				//printf("1 pressed\n");
			} else if(data == 0x1E) {
				LED = 0x1E;
     91c:	e3a0101e 	mov	r1, #30
     920:	ea000018 	b	988 <PS2_ISR+0x158>
				//color = 'G';
				keyPressed = '2';
				//printf("2 pressed\n");
			} else if(data == 0x26) {
     924:	e3530026 	cmp	r3, #38	; 0x26
     928:	1a000005 	bne	944 <PS2_ISR+0x114>
				LED = 0x26;
				//color = 'B';
				keyPressed = '3';
     92c:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     930:	e3403000 	movt	r3, #0
     934:	e3a02033 	mov	r2, #51	; 0x33
     938:	e5c32008 	strb	r2, [r3, #8]
				LED = 0x1E;
				//color = 'G';
				keyPressed = '2';
				//printf("2 pressed\n");
			} else if(data == 0x26) {
				LED = 0x26;
     93c:	e3a01026 	mov	r1, #38	; 0x26
     940:	ea000010 	b	988 <PS2_ISR+0x158>
				//color = 'B';
				keyPressed = '3';
				//printf("3 pressed\n");
			} else if(data == 0x25) {
     944:	e3530025 	cmp	r3, #37	; 0x25
     948:	1a000005 	bne	964 <PS2_ISR+0x134>
				LED = 0x25;
				//color = 'Y';
				keyPressed = '4';
     94c:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     950:	e3403000 	movt	r3, #0
     954:	e3a02034 	mov	r2, #52	; 0x34
     958:	e5c32008 	strb	r2, [r3, #8]
				LED = 0x26;
				//color = 'B';
				keyPressed = '3';
				//printf("3 pressed\n");
			} else if(data == 0x25) {
				LED = 0x25;
     95c:	e3a01025 	mov	r1, #37	; 0x25
     960:	ea000008 	b	988 <PS2_ISR+0x158>
				//color = 'Y';
				keyPressed = '4';
				//printf("4 pressed\n");
			} else if(data == 0x2E) {
     964:	e353002e 	cmp	r3, #46	; 0x2e
				LED = 0x2E;
				//color = 'O';
				keyPressed = '5';
     968:	e3013b3c 	movw	r3, #6972	; 0x1b3c
     96c:	e3403000 	movt	r3, #0
     970:	03a02035 	moveq	r2, #53	; 0x35
     974:	05c32008 	strbeq	r2, [r3, #8]
				LED = 0x25;
				//color = 'Y';
				keyPressed = '4';
				//printf("4 pressed\n");
			} else if(data == 0x2E) {
				LED = 0x2E;
     978:	03a0102e 	moveq	r1, #46	; 0x2e

			//error handling
			} else {
				LED = 0xFFFF;
				//printf("unknown key pressed\n");
				keyPressed = '?';
     97c:	13a0203f 	movne	r2, #63	; 0x3f
     980:	15c32008 	strbne	r2, [r3, #8]
				keyPressed = '5';
				//printf("5 pressed\n");

			//error handling
			} else {
				LED = 0xFFFF;
     984:	130f1fff 	movwne	r1, #65535	; 0xffff

	}

	//printf("data: %c\n", data);
	//printf("%c key pressed\n", keyPressed);
	*RLEDs = LED; //display the hex code on the LEDs
     988:	e3a03000 	mov	r3, #0
     98c:	e34f3f20 	movt	r3, #65312	; 0xff20
     990:	e5831000 	str	r1, [r3]
     994:	e12fff1e 	bx	lr

00000998 <__cs3_isr_irq>:
	//printf("%c\n", keyPressed);
	return;
}

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq () {
     998:	e24ee004 	sub	lr, lr, #4
     99c:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	int interrupt_ID = *((int *) 0xFFFEC10C); //Read the ICCIAR from the CPU Interface in the GIC
     9a0:	e3e03a13 	mvn	r3, #77824	; 0x13000
     9a4:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	if (interrupt_ID == 79) { // check if interrupt is from the PS/2
     9a8:	e354004f 	cmp	r4, #79	; 0x4f
     9ac:	1a000001 	bne	9b8 <__cs3_isr_irq+0x20>
		PS2_ISR();
     9b0:	ebffff9e 	bl	830 <PS2_ISR>
     9b4:	ea000004 	b	9cc <__cs3_isr_irq+0x34>
	} else if(interrupt_ID == 73) {
     9b8:	e3540049 	cmp	r4, #73	; 0x49
     9bc:	1a000001 	bne	9c8 <__cs3_isr_irq+0x30>
		KEY_ISR();
     9c0:	ebffff6b 	bl	774 <KEY_ISR>
     9c4:	ea000000 	b	9cc <__cs3_isr_irq+0x34>
     9c8:	eafffffe 	b	9c8 <__cs3_isr_irq+0x30>
	} else
		while (1); // if unexpected, then stay here

	// Write to the End of Interrupt Register (ICCEOIR)
	*((int *) 0xFFFEC110) = interrupt_ID;
     9cc:	e3e03a13 	mvn	r3, #77824	; 0x13000
     9d0:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
     9d4:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

000009d8 <__cs3_reset>:
}

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset () {
     9d8:	eafffffe 	b	9d8 <__cs3_reset>

000009dc <__cs3_isr_undef>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef () {
     9dc:	eafffffe 	b	9dc <__cs3_isr_undef>

000009e0 <__cs3_isr_swi>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi () {
     9e0:	eafffffe 	b	9e0 <__cs3_isr_swi>

000009e4 <__cs3_isr_pabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort () {
     9e4:	eafffffe 	b	9e4 <__cs3_isr_pabort>

000009e8 <__cs3_isr_dabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort () {
     9e8:	eafffffe 	b	9e8 <__cs3_isr_dabort>

000009ec <__cs3_isr_fiq>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq () {
     9ec:	eafffffe 	b	9ec <__cs3_isr_fiq>

000009f0 <set_A9_IRQ_stack>:
	int stack, mode;
	stack = 0xFFFFFFFF - 7; // top of A9 onchip memory, aligned to 8 bytes

	/* change processor to IRQ mode with interrupts disabled */
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     9f0:	e3a030d2 	mov	r3, #210	; 0xd2
     9f4:	e129f003 	msr	CPSR_fc, r3

	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     9f8:	e3e03007 	mvn	r3, #7
     9fc:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     a00:	e3a030d3 	mov	r3, #211	; 0xd3
     a04:	e129f003 	msr	CPSR_fc, r3
     a08:	e12fff1e 	bx	lr

00000a0c <main>:
    board [4][1] = 5;
    board [3][4] = 5;

}

int main(void) {
     a0c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     a10:	e24dd07c 	sub	sp, sp, #124	; 0x7c

    byte1        = 0;
     a14:	e3014b3c 	movw	r4, #6972	; 0x1b3c
     a18:	e3404000 	movt	r4, #0
     a1c:	e3a03000 	mov	r3, #0
     a20:	e5c43007 	strb	r3, [r4, #7]
    byte2        = 0;
     a24:	e5c43006 	strb	r3, [r4, #6]
    data         = 0; // used to hold PS/2 data
     a28:	e5c43009 	strb	r3, [r4, #9]
    keyPressed   = "U";
     a2c:	e3013680 	movw	r3, #5760	; 0x1680
     a30:	e3403000 	movt	r3, #0
     a34:	e5c43008 	strb	r3, [r4, #8]

	//function calls to enable interrupts in ARM and PS/2 keyboard
	disable_A9_interrupts(); // disable interrupts in the A9 processor
     a38:	ebffff29 	bl	6e4 <disable_A9_interrupts>
	set_A9_IRQ_stack(); // initialize the stack pointer for IRQ mode
     a3c:	ebffffeb 	bl	9f0 <set_A9_IRQ_stack>
	config_GIC(); // configure the general interrupt controller
     a40:	ebffff37 	bl	724 <config_GIC>
	config_PS2s(); // configure PS/2 to generate interrupts
     a44:	ebffff74 	bl	81c <config_PS2s>
	config_KEYs(); // configure PS/2 to generate interrupts
     a48:	ebffff44 	bl	760 <config_KEYs>

	enable_A9_interrupts(); // enable interrupts in the A9 processor
     a4c:	ebffff21 	bl	6d8 <enable_A9_interrupts>
    /* Read location of the pixel buffer from the pixel buffer controller */
    //pixel_buffer_start = *pixel_ctrl_ptr;
    int N = 4; // have N declared objects
    // board of arrays:
    int board [5][5];
    initializeBoard(board);
     a50:	e28d0014 	add	r0, sp, #20
     a54:	ebfffe00 	bl	25c <initializeBoard>
    // }

    //

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the
     a58:	e3035fff 	movw	r5, #16383	; 0x3fff
     a5c:	e34f5f20 	movt	r5, #65312	; 0xff20
     a60:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     a64:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
     a68:	ebfffe37 	bl	34c <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
     a6c:	e5153fdf 	ldr	r3, [r5, #-4063]	; 0xfffff021
     a70:	e5843000 	str	r3, [r4]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
     a74:	ebfffe41 	bl	380 <clear_screen>

    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
     a78:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
     a7c:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
     a80:	e5153fdb 	ldr	r3, [r5, #-4059]	; 0xfffff025
     a84:	e5843000 	str	r3, [r4]
    int row = 0;
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
     a88:	e3a07000 	mov	r7, #0
    board [4][1] = 5;
    board [3][4] = 5;

}

int main(void) {
     a8c:	e28d9014 	add	r9, sp, #20
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, ORANGE_U16);
     a90:	e30f2be0 	movw	r2, #64480	; 0xfbe0
     a94:	e34f2fff 	movt	r2, #65535	; 0xffff
     a98:	e58d2008 	str	r2, [sp, #8]
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, RED_U16);
     a9c:	e3a0bb3e 	mov	r11, #63488	; 0xf800
     aa0:	e34fbfff 	movt	r11, #65535	; 0xffff
         //     // *RLEDs = LED;
         // }


        // first select the color
        if (keyPressed == '1') {
     aa4:	e1a08004 	mov	r8, r4
            }

        }

       wait_for_vsync(); // swap front and back buffers on VGA vertical sync
       pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
     aa8:	e3033fff 	movw	r3, #16383	; 0x3fff
     aac:	e34f3f20 	movt	r3, #65312	; 0xff20
     ab0:	e58d300c 	str	r3, [sp, #12]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    //clear_screen();
    //coloring a square (testing code for now)

    while (1) {
    clear_screen();
     ab4:	ebfffe31 	bl	380 <clear_screen>
    int row = 0;
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
     ab8:	e1a06007 	mov	r6, r7
     abc:	ea000028 	b	b64 <main+0x158>
        for (col = 0; col < COLS; col++) {
            if (board[row][col] == RED) {
     ac0:	e5b53004 	ldr	r3, [r5, #4]!
     ac4:	e3530001 	cmp	r3, #1
     ac8:	1a000004 	bne	ae0 <main+0xd4>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, RED_U16);
     acc:	e1a00006 	mov	r0, r6
     ad0:	e1a01004 	mov	r1, r4
     ad4:	e1a0200b 	mov	r2, r11
     ad8:	ebfffe02 	bl	2e8 <fill_color>
     adc:	ea00001a 	b	b4c <main+0x140>
            }

            else if (board[row][col] == GREEN) {
     ae0:	e3530002 	cmp	r3, #2
     ae4:	1a000004 	bne	afc <main+0xf0>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, GREEN_U16);
     ae8:	e1a00006 	mov	r0, r6
     aec:	e1a01004 	mov	r1, r4
     af0:	e1a0200a 	mov	r2, r10
     af4:	ebfffdfb 	bl	2e8 <fill_color>
     af8:	ea000013 	b	b4c <main+0x140>
            }

            else if (board[row][col] == BLUE) {
     afc:	e3530003 	cmp	r3, #3
     b00:	1a000004 	bne	b18 <main+0x10c>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, BLUE_U16);
     b04:	e1a00006 	mov	r0, r6
     b08:	e1a01004 	mov	r1, r4
     b0c:	e3a0201f 	mov	r2, #31
     b10:	ebfffdf4 	bl	2e8 <fill_color>
     b14:	ea00000c 	b	b4c <main+0x140>
            }

            else if (board[row][col] == YELLOW) {
     b18:	e3530004 	cmp	r3, #4
     b1c:	1a000004 	bne	b34 <main+0x128>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, YELLOW_U16);
     b20:	e1a00006 	mov	r0, r6
     b24:	e1a01004 	mov	r1, r4
     b28:	e3e0201f 	mvn	r2, #31
     b2c:	ebfffded 	bl	2e8 <fill_color>
     b30:	ea000005 	b	b4c <main+0x140>
            }

            else if (board[row][col] == ORANGE) {
     b34:	e3530005 	cmp	r3, #5
     b38:	1a000003 	bne	b4c <main+0x140>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, ORANGE_U16);
     b3c:	e1a00006 	mov	r0, r6
     b40:	e1a01004 	mov	r1, r4
     b44:	e59d2008 	ldr	r2, [sp, #8]
     b48:	ebfffde6 	bl	2e8 <fill_color>
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
        for (col = 0; col < COLS; col++) {
     b4c:	e2844001 	add	r4, r4, #1
     b50:	e3540005 	cmp	r4, #5
     b54:	1affffd9 	bne	ac0 <main+0xb4>
    int row = 0;
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
     b58:	e2866001 	add	r6, r6, #1
     b5c:	e3560005 	cmp	r6, #5
     b60:	0a000005 	beq	b7c <main+0x170>
    board [4][1] = 5;
    board [3][4] = 5;

}

int main(void) {
     b64:	e0865106 	add	r5, r6, r6, lsl #2
     b68:	e0895105 	add	r5, r9, r5, lsl #2
     b6c:	e2455004 	sub	r5, r5, #4
     b70:	e1a04007 	mov	r4, r7
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, GREEN_U16);
     b74:	e3a0ae7e 	mov	r10, #2016	; 0x7e0
     b78:	eaffffd0 	b	ac0 <main+0xb4>

        // Background
        // Horizontal Line

        // UNCOMMENT THE IF STATMENT TO TEST THIS
            draw_line(64, 64, 0, 239, WHITE_U16);
     b7c:	e3e04000 	mvn	r4, #0
     b80:	e58d4000 	str	r4, [sp]
     b84:	e3a00040 	mov	r0, #64	; 0x40
     b88:	e1a01000 	mov	r1, r0
     b8c:	e1a02007 	mov	r2, r7
     b90:	e3a030ef 	mov	r3, #239	; 0xef
     b94:	ebfffe0e 	bl	3d4 <draw_line>
            draw_line(128, 128, 0, 239, WHITE_U16);
     b98:	e58d4000 	str	r4, [sp]
     b9c:	e3a00080 	mov	r0, #128	; 0x80
     ba0:	e1a01000 	mov	r1, r0
     ba4:	e1a02007 	mov	r2, r7
     ba8:	e3a030ef 	mov	r3, #239	; 0xef
     bac:	ebfffe08 	bl	3d4 <draw_line>
            draw_line(192, 192, 0, 239, WHITE_U16);
     bb0:	e58d4000 	str	r4, [sp]
     bb4:	e3a000c0 	mov	r0, #192	; 0xc0
     bb8:	e1a01000 	mov	r1, r0
     bbc:	e1a02007 	mov	r2, r7
     bc0:	e3a030ef 	mov	r3, #239	; 0xef
     bc4:	ebfffe02 	bl	3d4 <draw_line>
            draw_line(256, 256, 0, 239, WHITE_U16);
     bc8:	e58d4000 	str	r4, [sp]
     bcc:	e3a00c01 	mov	r0, #256	; 0x100
     bd0:	e1a01000 	mov	r1, r0
     bd4:	e1a02007 	mov	r2, r7
     bd8:	e3a030ef 	mov	r3, #239	; 0xef
     bdc:	ebfffdfc 	bl	3d4 <draw_line>
            //Vertical Line
            draw_line(0, 319, 48, 48, WHITE_U16);
     be0:	e58d4000 	str	r4, [sp]
     be4:	e1a00007 	mov	r0, r7
     be8:	e300113f 	movw	r1, #319	; 0x13f
     bec:	e3a02030 	mov	r2, #48	; 0x30
     bf0:	e1a03002 	mov	r3, r2
     bf4:	ebfffdf6 	bl	3d4 <draw_line>
            draw_line(0, 319, 96, 96, WHITE_U16);
     bf8:	e58d4000 	str	r4, [sp]
     bfc:	e1a00007 	mov	r0, r7
     c00:	e300113f 	movw	r1, #319	; 0x13f
     c04:	e3a02060 	mov	r2, #96	; 0x60
     c08:	e1a03002 	mov	r3, r2
     c0c:	ebfffdf0 	bl	3d4 <draw_line>
            draw_line(0, 319, 144, 144, WHITE_U16);
     c10:	e58d4000 	str	r4, [sp]
     c14:	e1a00007 	mov	r0, r7
     c18:	e300113f 	movw	r1, #319	; 0x13f
     c1c:	e3a02090 	mov	r2, #144	; 0x90
     c20:	e1a03002 	mov	r3, r2
     c24:	ebfffdea 	bl	3d4 <draw_line>
            draw_line(0, 319, 192, 192, WHITE_U16);
     c28:	e58d4000 	str	r4, [sp]
     c2c:	e1a00007 	mov	r0, r7
     c30:	e300113f 	movw	r1, #319	; 0x13f
     c34:	e3a020c0 	mov	r2, #192	; 0xc0
     c38:	e1a03002 	mov	r3, r2
     c3c:	ebfffde4 	bl	3d4 <draw_line>
         //     // *RLEDs = LED;
         // }


        // first select the color
        if (keyPressed == '1') {
     c40:	e5d83008 	ldrb	r3, [r8, #8]
     c44:	e3530031 	cmp	r3, #49	; 0x31
            keyRed = true;
     c48:	03a03001 	moveq	r3, #1
     c4c:	05c8300a 	strbeq	r3, [r8, #10]
         //     // *RLEDs = LED;
         // }


        // first select the color
        if (keyPressed == '1') {
     c50:	0a000015 	beq	cac <main+0x2a0>
            keyRed = true;
        }

        else if (keyPressed == '2') {
     c54:	e5d83008 	ldrb	r3, [r8, #8]
     c58:	e3530032 	cmp	r3, #50	; 0x32
            keyGreen = true;
     c5c:	03a03001 	moveq	r3, #1
     c60:	05c8300b 	strbeq	r3, [r8, #11]
        // first select the color
        if (keyPressed == '1') {
            keyRed = true;
        }

        else if (keyPressed == '2') {
     c64:	0a00000d 	beq	ca0 <main+0x294>
            keyGreen = true;
        }

        else if (keyPressed == '3') {
     c68:	e5d83008 	ldrb	r3, [r8, #8]
     c6c:	e3530033 	cmp	r3, #51	; 0x33
            keyBlue = true;
     c70:	03a03001 	moveq	r3, #1
     c74:	05c8300c 	strbeq	r3, [r8, #12]

        else if (keyPressed == '2') {
            keyGreen = true;
        }

        else if (keyPressed == '3') {
     c78:	0a000008 	beq	ca0 <main+0x294>
            keyBlue = true;
        }

        else if (keyPressed == '4') {
     c7c:	e5d83008 	ldrb	r3, [r8, #8]
     c80:	e3530034 	cmp	r3, #52	; 0x34
            keyYellow = true;
     c84:	03a03001 	moveq	r3, #1
     c88:	05c8300d 	strbeq	r3, [r8, #13]

        else if (keyPressed == '3') {
            keyBlue = true;
        }

        else if (keyPressed == '4') {
     c8c:	0a000003 	beq	ca0 <main+0x294>
            keyYellow = true;
        }

        else if (keyPressed == '5') {
     c90:	e5d83008 	ldrb	r3, [r8, #8]
     c94:	e3530035 	cmp	r3, #53	; 0x35
            keyOrange = true;
     c98:	03a03001 	moveq	r3, #1
     c9c:	05c8300e 	strbeq	r3, [r8, #14]
        // actual key presses:

        int x = 0;
        int y = 0;

        if (keyRed && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
     ca0:	e5d8300a 	ldrb	r3, [r8, #10]
     ca4:	e3530000 	cmp	r3, #0
     ca8:	0a000044 	beq	dc0 <main+0x3b4>
     cac:	e5d83008 	ldrb	r3, [r8, #8]
     cb0:	e3530057 	cmp	r3, #87	; 0x57
     cb4:	0a000008 	beq	cdc <main+0x2d0>
     cb8:	e5d83008 	ldrb	r3, [r8, #8]
     cbc:	e3530041 	cmp	r3, #65	; 0x41
     cc0:	0a000005 	beq	cdc <main+0x2d0>
     cc4:	e5d83008 	ldrb	r3, [r8, #8]
     cc8:	e3530053 	cmp	r3, #83	; 0x53
     ccc:	0a000002 	beq	cdc <main+0x2d0>
     cd0:	e5d83008 	ldrb	r3, [r8, #8]
     cd4:	e3530044 	cmp	r3, #68	; 0x44
     cd8:	1a000038 	bne	dc0 <main+0x3b4>
            // turn off all other flags
            keyGreen = false;
     cdc:	e5c8700b 	strb	r7, [r8, #11]
            keyBlue = false;
     ce0:	e5c8700c 	strb	r7, [r8, #12]
            keyYellow = false;
     ce4:	e5c8700d 	strb	r7, [r8, #13]
            keyOrange = false;
     ce8:	e5c8700e 	strb	r7, [r8, #14]

            // HARDCODED FOR NOW:
            x = 0;
            y = 0;

            currX = x;
     cec:	e5887010 	str	r7, [r8, #16]
            currY = y;
     cf0:	e5887014 	str	r7, [r8, #20]

            // animate the line:
            if (keyPressed == 'W') {
     cf4:	e5d83008 	ldrb	r3, [r8, #8]
     cf8:	e3530057 	cmp	r3, #87	; 0x57
     cfc:	1a000008 	bne	d24 <main+0x318>
                direction  = 1;
                animate_line(x, y, direction, RED_U16, RED, board);
     d00:	e3a02001 	mov	r2, #1
     d04:	e58d2000 	str	r2, [sp]
     d08:	e58d9004 	str	r9, [sp, #4]
     d0c:	e1a00007 	mov	r0, r7
     d10:	e1a01007 	mov	r1, r7
     d14:	e1a0300b 	mov	r3, r11
     d18:	ebfffdf1 	bl	4e4 <animate_line>
                keyRed = false; // turn off the flag
     d1c:	e5c8700a 	strb	r7, [r8, #10]
     d20:	ea000149 	b	124c <main+0x840>
            } else if (keyPressed == 'A') {
     d24:	e5d83008 	ldrb	r3, [r8, #8]
     d28:	e3530041 	cmp	r3, #65	; 0x41
     d2c:	1a000009 	bne	d58 <main+0x34c>
                direction  = 2;
                animate_line(x, y, direction, RED_U16, RED, board);
     d30:	e3a03001 	mov	r3, #1
     d34:	e58d3000 	str	r3, [sp]
     d38:	e58d9004 	str	r9, [sp, #4]
     d3c:	e1a00007 	mov	r0, r7
     d40:	e1a01007 	mov	r1, r7
     d44:	e3a02002 	mov	r2, #2
     d48:	e1a0300b 	mov	r3, r11
     d4c:	ebfffde4 	bl	4e4 <animate_line>
                keyRed = false; // turn off the flag
     d50:	e5c8700a 	strb	r7, [r8, #10]
     d54:	ea00013c 	b	124c <main+0x840>
            } else if (keyPressed == 'S') {
     d58:	e5d83008 	ldrb	r3, [r8, #8]
     d5c:	e3530053 	cmp	r3, #83	; 0x53
     d60:	1a000009 	bne	d8c <main+0x380>
                direction  = 3;
                animate_line(x, y, direction, RED_U16, RED, board);
     d64:	e3a03001 	mov	r3, #1
     d68:	e58d3000 	str	r3, [sp]
     d6c:	e58d9004 	str	r9, [sp, #4]
     d70:	e1a00007 	mov	r0, r7
     d74:	e1a01007 	mov	r1, r7
     d78:	e3a02003 	mov	r2, #3
     d7c:	e1a0300b 	mov	r3, r11
     d80:	ebfffdd7 	bl	4e4 <animate_line>
                keyRed = false; // turn off the flag
     d84:	e5c8700a 	strb	r7, [r8, #10]
     d88:	ea00012f 	b	124c <main+0x840>
            } else if (keyPressed == 'D') {
     d8c:	e5d83008 	ldrb	r3, [r8, #8]
     d90:	e3530044 	cmp	r3, #68	; 0x44
     d94:	1a00012c 	bne	124c <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, RED_U16, RED, board);
     d98:	e3a03001 	mov	r3, #1
     d9c:	e58d3000 	str	r3, [sp]
     da0:	e58d9004 	str	r9, [sp, #4]
     da4:	e1a00007 	mov	r0, r7
     da8:	e1a01007 	mov	r1, r7
     dac:	e3a02004 	mov	r2, #4
     db0:	e1a0300b 	mov	r3, r11
     db4:	ebfffdca 	bl	4e4 <animate_line>
                keyRed = false; // turn off the flag
     db8:	e5c8700a 	strb	r7, [r8, #10]
     dbc:	ea000122 	b	124c <main+0x840>
            }

        } else if (keyGreen && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
     dc0:	e5d8300b 	ldrb	r3, [r8, #11]
     dc4:	e3530000 	cmp	r3, #0
     dc8:	0a000042 	beq	ed8 <main+0x4cc>
     dcc:	e5d83008 	ldrb	r3, [r8, #8]
     dd0:	e3530057 	cmp	r3, #87	; 0x57
     dd4:	0a000008 	beq	dfc <main+0x3f0>
     dd8:	e5d83008 	ldrb	r3, [r8, #8]
     ddc:	e3530041 	cmp	r3, #65	; 0x41
     de0:	0a000005 	beq	dfc <main+0x3f0>
     de4:	e5d83008 	ldrb	r3, [r8, #8]
     de8:	e3530053 	cmp	r3, #83	; 0x53
     dec:	0a000002 	beq	dfc <main+0x3f0>
     df0:	e5d83008 	ldrb	r3, [r8, #8]
     df4:	e3530044 	cmp	r3, #68	; 0x44
     df8:	1a000036 	bne	ed8 <main+0x4cc>

            keyRed = false;
     dfc:	e5c8700a 	strb	r7, [r8, #10]
            keyBlue = false;
     e00:	e5c8700c 	strb	r7, [r8, #12]
            keyYellow = false;
     e04:	e5c8700d 	strb	r7, [r8, #13]
            keyOrange = false;
     e08:	e5c8700e 	strb	r7, [r8, #14]

            x = 2;
            y = 0;

            currX = x;
     e0c:	e3a03002 	mov	r3, #2
     e10:	e5883010 	str	r3, [r8, #16]
            currY = y;
     e14:	e5887014 	str	r7, [r8, #20]

            //anime the lines
            // animate the line:
            if (keyPressed == 'W') {
     e18:	e5d83008 	ldrb	r3, [r8, #8]
     e1c:	e3530057 	cmp	r3, #87	; 0x57
     e20:	1a000008 	bne	e48 <main+0x43c>
                direction  = 1;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
     e24:	e3a00002 	mov	r0, #2
     e28:	e58d0000 	str	r0, [sp]
     e2c:	e58d9004 	str	r9, [sp, #4]
     e30:	e1a01007 	mov	r1, r7
     e34:	e3a02001 	mov	r2, #1
     e38:	e3a03e7e 	mov	r3, #2016	; 0x7e0
     e3c:	ebfffda8 	bl	4e4 <animate_line>
                keyGreen = false; // turn off the flag
     e40:	e5c8700b 	strb	r7, [r8, #11]
     e44:	ea000100 	b	124c <main+0x840>
            } else if (keyPressed == 'A') {
     e48:	e5d83008 	ldrb	r3, [r8, #8]
     e4c:	e3530041 	cmp	r3, #65	; 0x41
     e50:	1a000008 	bne	e78 <main+0x46c>
                direction  = 2;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
     e54:	e3a02002 	mov	r2, #2
     e58:	e58d2000 	str	r2, [sp]
     e5c:	e58d9004 	str	r9, [sp, #4]
     e60:	e1a00002 	mov	r0, r2
     e64:	e1a01007 	mov	r1, r7
     e68:	e3a03e7e 	mov	r3, #2016	; 0x7e0
     e6c:	ebfffd9c 	bl	4e4 <animate_line>
                keyGreen = false; // turn off the flag
     e70:	e5c8700b 	strb	r7, [r8, #11]
     e74:	ea0000f4 	b	124c <main+0x840>
            } else if (keyPressed == 'S') {
     e78:	e5d83008 	ldrb	r3, [r8, #8]
     e7c:	e3530053 	cmp	r3, #83	; 0x53
     e80:	1a000008 	bne	ea8 <main+0x49c>
                direction  = 3;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
     e84:	e3a00002 	mov	r0, #2
     e88:	e58d0000 	str	r0, [sp]
     e8c:	e58d9004 	str	r9, [sp, #4]
     e90:	e1a01007 	mov	r1, r7
     e94:	e3a02003 	mov	r2, #3
     e98:	e3a03e7e 	mov	r3, #2016	; 0x7e0
     e9c:	ebfffd90 	bl	4e4 <animate_line>
                keyGreen = false; // turn off the flag
     ea0:	e5c8700b 	strb	r7, [r8, #11]
     ea4:	ea0000e8 	b	124c <main+0x840>
            } else if (keyPressed == 'D') {
     ea8:	e5d83008 	ldrb	r3, [r8, #8]
     eac:	e3530044 	cmp	r3, #68	; 0x44
     eb0:	1a0000e5 	bne	124c <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
     eb4:	e3a00002 	mov	r0, #2
     eb8:	e58d0000 	str	r0, [sp]
     ebc:	e58d9004 	str	r9, [sp, #4]
     ec0:	e1a01007 	mov	r1, r7
     ec4:	e3a02004 	mov	r2, #4
     ec8:	e3a03e7e 	mov	r3, #2016	; 0x7e0
     ecc:	ebfffd84 	bl	4e4 <animate_line>
                keyGreen = false; // turn off the flag
     ed0:	e5c8700b 	strb	r7, [r8, #11]
     ed4:	ea0000dc 	b	124c <main+0x840>
            }

        } else if (keyBlue && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
     ed8:	e5d8300c 	ldrb	r3, [r8, #12]
     edc:	e3530000 	cmp	r3, #0
     ee0:	0a000046 	beq	1000 <main+0x5f4>
     ee4:	e5d83008 	ldrb	r3, [r8, #8]
     ee8:	e3530057 	cmp	r3, #87	; 0x57
     eec:	0a000008 	beq	f14 <main+0x508>
     ef0:	e5d83008 	ldrb	r3, [r8, #8]
     ef4:	e3530041 	cmp	r3, #65	; 0x41
     ef8:	0a000005 	beq	f14 <main+0x508>
     efc:	e5d83008 	ldrb	r3, [r8, #8]
     f00:	e3530053 	cmp	r3, #83	; 0x53
     f04:	0a000002 	beq	f14 <main+0x508>
     f08:	e5d83008 	ldrb	r3, [r8, #8]
     f0c:	e3530044 	cmp	r3, #68	; 0x44
     f10:	1a00003a 	bne	1000 <main+0x5f4>

            keyRed = false;
     f14:	e5c8700a 	strb	r7, [r8, #10]
            keyGreen = false;
     f18:	e5c8700b 	strb	r7, [r8, #11]
            keyYellow = false;
     f1c:	e5c8700d 	strb	r7, [r8, #13]
            keyOrange = false;
     f20:	e5c8700e 	strb	r7, [r8, #14]

            x = 2;
            y = 1;

            currX = x;
     f24:	e3a03002 	mov	r3, #2
     f28:	e5883010 	str	r3, [r8, #16]
            currY = y;
     f2c:	e3a03001 	mov	r3, #1
     f30:	e5883014 	str	r3, [r8, #20]

            // animate the line:
            if (keyPressed == 'W') {
     f34:	e5d83008 	ldrb	r3, [r8, #8]
     f38:	e3530057 	cmp	r3, #87	; 0x57
     f3c:	1a000009 	bne	f68 <main+0x55c>
                direction  = 1;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
     f40:	e3a03003 	mov	r3, #3
     f44:	e58d3000 	str	r3, [sp]
     f48:	e58d9004 	str	r9, [sp, #4]
     f4c:	e3a00002 	mov	r0, #2
     f50:	e3a01001 	mov	r1, #1
     f54:	e1a02001 	mov	r2, r1
     f58:	e3a0301f 	mov	r3, #31
     f5c:	ebfffd60 	bl	4e4 <animate_line>
                keyBlue = false; // turn off the flag
     f60:	e5c8700c 	strb	r7, [r8, #12]
     f64:	ea0000b8 	b	124c <main+0x840>
            } else if (keyPressed == 'A') {
     f68:	e5d83008 	ldrb	r3, [r8, #8]
     f6c:	e3530041 	cmp	r3, #65	; 0x41
     f70:	1a000009 	bne	f9c <main+0x590>
                direction  = 2;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
     f74:	e3a03003 	mov	r3, #3
     f78:	e58d3000 	str	r3, [sp]
     f7c:	e58d9004 	str	r9, [sp, #4]
     f80:	e3a00002 	mov	r0, #2
     f84:	e3a01001 	mov	r1, #1
     f88:	e1a02000 	mov	r2, r0
     f8c:	e3a0301f 	mov	r3, #31
     f90:	ebfffd53 	bl	4e4 <animate_line>
                keyBlue = false; // turn off the flag
     f94:	e5c8700c 	strb	r7, [r8, #12]
     f98:	ea0000ab 	b	124c <main+0x840>
            } else if (keyPressed == 'S') {
     f9c:	e5d83008 	ldrb	r3, [r8, #8]
     fa0:	e3530053 	cmp	r3, #83	; 0x53
     fa4:	1a000008 	bne	fcc <main+0x5c0>
                direction  = 3;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
     fa8:	e3a02003 	mov	r2, #3
     fac:	e58d2000 	str	r2, [sp]
     fb0:	e58d9004 	str	r9, [sp, #4]
     fb4:	e3a00002 	mov	r0, #2
     fb8:	e3a01001 	mov	r1, #1
     fbc:	e3a0301f 	mov	r3, #31
     fc0:	ebfffd47 	bl	4e4 <animate_line>
                keyBlue = false; // turn off the flag
     fc4:	e5c8700c 	strb	r7, [r8, #12]
     fc8:	ea00009f 	b	124c <main+0x840>
            } else if (keyPressed == 'D') {
     fcc:	e5d83008 	ldrb	r3, [r8, #8]
     fd0:	e3530044 	cmp	r3, #68	; 0x44
     fd4:	1a00009c 	bne	124c <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
     fd8:	e3a03003 	mov	r3, #3
     fdc:	e58d3000 	str	r3, [sp]
     fe0:	e58d9004 	str	r9, [sp, #4]
     fe4:	e3a00002 	mov	r0, #2
     fe8:	e3a01001 	mov	r1, #1
     fec:	e3a02004 	mov	r2, #4
     ff0:	e3a0301f 	mov	r3, #31
     ff4:	ebfffd3a 	bl	4e4 <animate_line>
                keyBlue = false; // turn off the flag
     ff8:	e5c8700c 	strb	r7, [r8, #12]
     ffc:	ea000092 	b	124c <main+0x840>
            }

        } else if (keyYellow && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
    1000:	e5d8300d 	ldrb	r3, [r8, #13]
    1004:	e3530000 	cmp	r3, #0
    1008:	0a000045 	beq	1124 <main+0x718>
    100c:	e5d83008 	ldrb	r3, [r8, #8]
    1010:	e3530057 	cmp	r3, #87	; 0x57
    1014:	0a000008 	beq	103c <main+0x630>
    1018:	e5d83008 	ldrb	r3, [r8, #8]
    101c:	e3530041 	cmp	r3, #65	; 0x41
    1020:	0a000005 	beq	103c <main+0x630>
    1024:	e5d83008 	ldrb	r3, [r8, #8]
    1028:	e3530053 	cmp	r3, #83	; 0x53
    102c:	0a000002 	beq	103c <main+0x630>
    1030:	e5d83008 	ldrb	r3, [r8, #8]
    1034:	e3530044 	cmp	r3, #68	; 0x44
    1038:	1a000039 	bne	1124 <main+0x718>

            keyRed = false;
    103c:	e5c8700a 	strb	r7, [r8, #10]
            keyGreen = false;
    1040:	e5c8700b 	strb	r7, [r8, #11]
            keyBlue = false;
    1044:	e5c8700c 	strb	r7, [r8, #12]
            keyOrange = false;
    1048:	e5c8700e 	strb	r7, [r8, #14]
            x = 3;
            y = 3;

            currX = x;
    104c:	e3a03003 	mov	r3, #3
    1050:	e5883010 	str	r3, [r8, #16]
            currY = y;
    1054:	e5883014 	str	r3, [r8, #20]
            // animate the line:
            if (keyPressed == 'W') {
    1058:	e5d83008 	ldrb	r3, [r8, #8]
    105c:	e3530057 	cmp	r3, #87	; 0x57
    1060:	1a000009 	bne	108c <main+0x680>
                direction  = 1;
                animate_line(x, y, direction, YELLOW_U16, YELLOW, board);
    1064:	e3a03004 	mov	r3, #4
    1068:	e58d3000 	str	r3, [sp]
    106c:	e58d9004 	str	r9, [sp, #4]
    1070:	e3a00003 	mov	r0, #3
    1074:	e1a01000 	mov	r1, r0
    1078:	e3a02001 	mov	r2, #1
    107c:	e3e0301f 	mvn	r3, #31
    1080:	ebfffd17 	bl	4e4 <animate_line>
                keyYellow = false;
    1084:	e5c8700d 	strb	r7, [r8, #13]
    1088:	ea00006f 	b	124c <main+0x840>
            } else if (keyPressed == 'A') {
    108c:	e5d83008 	ldrb	r3, [r8, #8]
    1090:	e3530041 	cmp	r3, #65	; 0x41
    1094:	1a000009 	bne	10c0 <main+0x6b4>
                direction  = 2;
                animate_line(x, y, direction,  YELLOW_U16, YELLOW, board);
    1098:	e3a03004 	mov	r3, #4
    109c:	e58d3000 	str	r3, [sp]
    10a0:	e58d9004 	str	r9, [sp, #4]
    10a4:	e3a00003 	mov	r0, #3
    10a8:	e1a01000 	mov	r1, r0
    10ac:	e3a02002 	mov	r2, #2
    10b0:	e3e0301f 	mvn	r3, #31
    10b4:	ebfffd0a 	bl	4e4 <animate_line>
                keyYellow = false;
    10b8:	e5c8700d 	strb	r7, [r8, #13]
    10bc:	ea000062 	b	124c <main+0x840>
            } else if (keyPressed == 'S') {
    10c0:	e5d83008 	ldrb	r3, [r8, #8]
    10c4:	e3530053 	cmp	r3, #83	; 0x53
    10c8:	1a000009 	bne	10f4 <main+0x6e8>
                direction  = 3;
                animate_line(x, y, direction,  YELLOW_U16, YELLOW,board);
    10cc:	e3a03004 	mov	r3, #4
    10d0:	e58d3000 	str	r3, [sp]
    10d4:	e58d9004 	str	r9, [sp, #4]
    10d8:	e3a00003 	mov	r0, #3
    10dc:	e1a01000 	mov	r1, r0
    10e0:	e1a02000 	mov	r2, r0
    10e4:	e3e0301f 	mvn	r3, #31
    10e8:	ebfffcfd 	bl	4e4 <animate_line>
                keyYellow = false;
    10ec:	e5c8700d 	strb	r7, [r8, #13]
    10f0:	ea000055 	b	124c <main+0x840>
            } else if (keyPressed == 'D') {
    10f4:	e5d83008 	ldrb	r3, [r8, #8]
    10f8:	e3530044 	cmp	r3, #68	; 0x44
    10fc:	1a000052 	bne	124c <main+0x840>
                direction  = 4;
                animate_line(x, y, direction,  YELLOW_U16,YELLOW, board);
    1100:	e3a02004 	mov	r2, #4
    1104:	e58d2000 	str	r2, [sp]
    1108:	e58d9004 	str	r9, [sp, #4]
    110c:	e3a00003 	mov	r0, #3
    1110:	e1a01000 	mov	r1, r0
    1114:	e3e0301f 	mvn	r3, #31
    1118:	ebfffcf1 	bl	4e4 <animate_line>
                keyYellow = false;
    111c:	e5c8700d 	strb	r7, [r8, #13]
    1120:	ea000049 	b	124c <main+0x840>
            }

        } else if (keyOrange && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
    1124:	e5d8300e 	ldrb	r3, [r8, #14]
    1128:	e3530000 	cmp	r3, #0
    112c:	0a000046 	beq	124c <main+0x840>
    1130:	e5d83008 	ldrb	r3, [r8, #8]
    1134:	e3530057 	cmp	r3, #87	; 0x57
    1138:	0a000008 	beq	1160 <main+0x754>
    113c:	e5d83008 	ldrb	r3, [r8, #8]
    1140:	e3530041 	cmp	r3, #65	; 0x41
    1144:	0a000005 	beq	1160 <main+0x754>
    1148:	e5d83008 	ldrb	r3, [r8, #8]
    114c:	e3530053 	cmp	r3, #83	; 0x53
    1150:	0a000002 	beq	1160 <main+0x754>
    1154:	e5d83008 	ldrb	r3, [r8, #8]
    1158:	e3530044 	cmp	r3, #68	; 0x44
    115c:	1a00003a 	bne	124c <main+0x840>

            keyRed = false;
    1160:	e5c8700a 	strb	r7, [r8, #10]
            keyGreen = false;
    1164:	e5c8700b 	strb	r7, [r8, #11]
            keyBlue = false;
    1168:	e5c8700c 	strb	r7, [r8, #12]
            keyYellow = false;
    116c:	e5c8700d 	strb	r7, [r8, #13]

            x = 3;
            y = 4;

            currX = x;
    1170:	e3a03003 	mov	r3, #3
    1174:	e5883010 	str	r3, [r8, #16]
            currY = y;
    1178:	e3a03004 	mov	r3, #4
    117c:	e5883014 	str	r3, [r8, #20]

            // animate the line:
            if (keyPressed == 'W') {
    1180:	e5d83008 	ldrb	r3, [r8, #8]
    1184:	e3530057 	cmp	r3, #87	; 0x57
    1188:	1a000009 	bne	11b4 <main+0x7a8>
                direction  = 1;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    118c:	e3a03005 	mov	r3, #5
    1190:	e58d3000 	str	r3, [sp]
    1194:	e58d9004 	str	r9, [sp, #4]
    1198:	e3a00003 	mov	r0, #3
    119c:	e3a01004 	mov	r1, #4
    11a0:	e3a02001 	mov	r2, #1
    11a4:	e59d3008 	ldr	r3, [sp, #8]
    11a8:	ebfffccd 	bl	4e4 <animate_line>
                keyOrange = false;
    11ac:	e5c8700e 	strb	r7, [r8, #14]
    11b0:	ea000025 	b	124c <main+0x840>
            } else if (keyPressed == 'A') {
    11b4:	e5d83008 	ldrb	r3, [r8, #8]
    11b8:	e3530041 	cmp	r3, #65	; 0x41
    11bc:	1a000009 	bne	11e8 <main+0x7dc>
                direction  = 2;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    11c0:	e3a03005 	mov	r3, #5
    11c4:	e58d3000 	str	r3, [sp]
    11c8:	e58d9004 	str	r9, [sp, #4]
    11cc:	e3a00003 	mov	r0, #3
    11d0:	e3a01004 	mov	r1, #4
    11d4:	e3a02002 	mov	r2, #2
    11d8:	e59d3008 	ldr	r3, [sp, #8]
    11dc:	ebfffcc0 	bl	4e4 <animate_line>
                keyOrange = false;
    11e0:	e5c8700e 	strb	r7, [r8, #14]
    11e4:	ea000018 	b	124c <main+0x840>
            } else if (keyPressed == 'S') {
    11e8:	e5d83008 	ldrb	r3, [r8, #8]
    11ec:	e3530053 	cmp	r3, #83	; 0x53
    11f0:	1a000009 	bne	121c <main+0x810>
                direction  = 3;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    11f4:	e3a03005 	mov	r3, #5
    11f8:	e58d3000 	str	r3, [sp]
    11fc:	e58d9004 	str	r9, [sp, #4]
    1200:	e3a00003 	mov	r0, #3
    1204:	e3a01004 	mov	r1, #4
    1208:	e1a02000 	mov	r2, r0
    120c:	e59d3008 	ldr	r3, [sp, #8]
    1210:	ebfffcb3 	bl	4e4 <animate_line>
                keyOrange = false;
    1214:	e5c8700e 	strb	r7, [r8, #14]
    1218:	ea00000b 	b	124c <main+0x840>
            } else if (keyPressed == 'D') {
    121c:	e5d83008 	ldrb	r3, [r8, #8]
    1220:	e3530044 	cmp	r3, #68	; 0x44
    1224:	1a000008 	bne	124c <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    1228:	e3a03005 	mov	r3, #5
    122c:	e58d3000 	str	r3, [sp]
    1230:	e58d9004 	str	r9, [sp, #4]
    1234:	e3a00003 	mov	r0, #3
    1238:	e3a01004 	mov	r1, #4
    123c:	e1a02001 	mov	r2, r1
    1240:	e59d3008 	ldr	r3, [sp, #8]
    1244:	ebfffca6 	bl	4e4 <animate_line>
                keyOrange = false;
    1248:	e5c8700e 	strb	r7, [r8, #14]
            }

        }

       wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    124c:	ebfffc3e 	bl	34c <wait_for_vsync>
       pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    1250:	e59d200c 	ldr	r2, [sp, #12]
    1254:	e5123fdb 	ldr	r3, [r2, #-4059]	; 0xfffff025
    1258:	e5883000 	str	r3, [r8]
    }
    125c:	eafffe14 	b	ab4 <main+0xa8>

00001260 <atexit>:
    1260:	e1a01000 	mov	r1, r0
    1264:	e3a00000 	mov	r0, #0
    1268:	e92d4008 	push	{r3, lr}
    126c:	e1a02000 	mov	r2, r0
    1270:	e1a03000 	mov	r3, r0
    1274:	eb00000e 	bl	12b4 <__register_exitproc>
    1278:	e8bd4008 	pop	{r3, lr}
    127c:	e12fff1e 	bx	lr

00001280 <exit>:
    1280:	e92d4008 	push	{r3, lr}
    1284:	e3a01000 	mov	r1, #0
    1288:	e1a04000 	mov	r4, r0
    128c:	eb000045 	bl	13a8 <__call_exitprocs>
    1290:	e59f3018 	ldr	r3, [pc, #24]	; 12b0 <exit+0x30>
    1294:	e5930000 	ldr	r0, [r3]
    1298:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    129c:	e3530000 	cmp	r3, #0
    12a0:	11a0e00f 	movne	lr, pc
    12a4:	112fff13 	bxne	r3
    12a8:	e1a00004 	mov	r0, r4
    12ac:	eb0000c9 	bl	15d8 <_exit>
    12b0:	00001684 	.word	0x00001684

000012b4 <__register_exitproc>:
    12b4:	e59fc0e4 	ldr	r12, [pc, #228]	; 13a0 <__register_exitproc+0xec>
    12b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    12bc:	e59c4000 	ldr	r4, [r12]
    12c0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    12c4:	e35c0000 	cmp	r12, #0
    12c8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    12cc:	e59c5004 	ldr	r5, [r12, #4]
    12d0:	0584c148 	streq	r12, [r4, #328]	; 0x148
    12d4:	e355001f 	cmp	r5, #31
    12d8:	e24dd010 	sub	sp, sp, #16
    12dc:	e1a06000 	mov	r6, r0
    12e0:	da000015 	ble	133c <__register_exitproc+0x88>
    12e4:	e59f00b8 	ldr	r0, [pc, #184]	; 13a4 <__register_exitproc+0xf0>
    12e8:	e3500000 	cmp	r0, #0
    12ec:	1a000001 	bne	12f8 <__register_exitproc+0x44>
    12f0:	e3e00000 	mvn	r0, #0
    12f4:	ea000018 	b	135c <__register_exitproc+0xa8>
    12f8:	e3a00e19 	mov	r0, #400	; 0x190
    12fc:	e58d100c 	str	r1, [sp, #12]
    1300:	e58d2008 	str	r2, [sp, #8]
    1304:	e58d3004 	str	r3, [sp, #4]
    1308:	e320f000 	nop	{0}
    130c:	e250c000 	subs	r12, r0, #0
    1310:	e59d100c 	ldr	r1, [sp, #12]
    1314:	e59d2008 	ldr	r2, [sp, #8]
    1318:	e59d3004 	ldr	r3, [sp, #4]
    131c:	0afffff3 	beq	12f0 <__register_exitproc+0x3c>
    1320:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    1324:	e3a00000 	mov	r0, #0
    1328:	e58c0004 	str	r0, [r12, #4]
    132c:	e58c5000 	str	r5, [r12]
    1330:	e584c148 	str	r12, [r4, #328]	; 0x148
    1334:	e58c0188 	str	r0, [r12, #392]	; 0x188
    1338:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    133c:	e3560000 	cmp	r6, #0
    1340:	e59c4004 	ldr	r4, [r12, #4]
    1344:	1a000007 	bne	1368 <__register_exitproc+0xb4>
    1348:	e2843002 	add	r3, r4, #2
    134c:	e2844001 	add	r4, r4, #1
    1350:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1354:	e58c4004 	str	r4, [r12, #4]
    1358:	e3a00000 	mov	r0, #0
    135c:	e28dd010 	add	sp, sp, #16
    1360:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1364:	e12fff1e 	bx	lr
    1368:	e3a00001 	mov	r0, #1
    136c:	e1a00410 	lsl	r0, r0, r4
    1370:	e08c8104 	add	r8, r12, r4, lsl #2
    1374:	e3560002 	cmp	r6, #2
    1378:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    137c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1380:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1384:	e1877000 	orr	r7, r7, r0
    1388:	01830000 	orreq	r0, r3, r0
    138c:	e1a05008 	mov	r5, r8
    1390:	e5882088 	str	r2, [r8, #136]	; 0x88
    1394:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1398:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    139c:	eaffffe9 	b	1348 <__register_exitproc+0x94>
    13a0:	00001684 	.word	0x00001684
    13a4:	00000000 	.word	0x00000000

000013a8 <__call_exitprocs>:
    13a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    13ac:	e59f3168 	ldr	r3, [pc, #360]	; 151c <__call_exitprocs+0x174>
    13b0:	e5933000 	ldr	r3, [r3]
    13b4:	e24dd014 	sub	sp, sp, #20
    13b8:	e58d3004 	str	r3, [sp, #4]
    13bc:	e2833f52 	add	r3, r3, #328	; 0x148
    13c0:	e58d0008 	str	r0, [sp, #8]
    13c4:	e58d300c 	str	r3, [sp, #12]
    13c8:	e1a07001 	mov	r7, r1
    13cc:	e3a08001 	mov	r8, #1
    13d0:	e59d3004 	ldr	r3, [sp, #4]
    13d4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    13d8:	e3560000 	cmp	r6, #0
    13dc:	e59db00c 	ldr	r11, [sp, #12]
    13e0:	0a000033 	beq	14b4 <__call_exitprocs+0x10c>
    13e4:	e5965004 	ldr	r5, [r6, #4]
    13e8:	e2554001 	subs	r4, r5, #1
    13ec:	5286a088 	addpl	r10, r6, #136	; 0x88
    13f0:	5285501f 	addpl	r5, r5, #31
    13f4:	508a5105 	addpl	r5, r10, r5, lsl #2
    13f8:	5a000007 	bpl	141c <__call_exitprocs+0x74>
    13fc:	ea000029 	b	14a8 <__call_exitprocs+0x100>
    1400:	e5953000 	ldr	r3, [r5]
    1404:	e1530007 	cmp	r3, r7
    1408:	0a000005 	beq	1424 <__call_exitprocs+0x7c>
    140c:	e2444001 	sub	r4, r4, #1
    1410:	e3740001 	cmn	r4, #1
    1414:	e2455004 	sub	r5, r5, #4
    1418:	0a000022 	beq	14a8 <__call_exitprocs+0x100>
    141c:	e3570000 	cmp	r7, #0
    1420:	1afffff6 	bne	1400 <__call_exitprocs+0x58>
    1424:	e5963004 	ldr	r3, [r6, #4]
    1428:	e06a2005 	rsb	r2, r10, r5
    142c:	e2433001 	sub	r3, r3, #1
    1430:	e0862002 	add	r2, r6, r2
    1434:	e1530004 	cmp	r3, r4
    1438:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    143c:	13a01000 	movne	r1, #0
    1440:	05864004 	streq	r4, [r6, #4]
    1444:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1448:	e3530000 	cmp	r3, #0
    144c:	0affffee 	beq	140c <__call_exitprocs+0x64>
    1450:	e1a02418 	lsl	r2, r8, r4
    1454:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1458:	e1120001 	tst	r2, r1
    145c:	e5969004 	ldr	r9, [r6, #4]
    1460:	0a000016 	beq	14c0 <__call_exitprocs+0x118>
    1464:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1468:	e1120001 	tst	r2, r1
    146c:	1a000016 	bne	14cc <__call_exitprocs+0x124>
    1470:	e59d0008 	ldr	r0, [sp, #8]
    1474:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1478:	e1a0e00f 	mov	lr, pc
    147c:	e12fff13 	bx	r3
    1480:	e5963004 	ldr	r3, [r6, #4]
    1484:	e1530009 	cmp	r3, r9
    1488:	1affffd0 	bne	13d0 <__call_exitprocs+0x28>
    148c:	e59b3000 	ldr	r3, [r11]
    1490:	e1530006 	cmp	r3, r6
    1494:	1affffcd 	bne	13d0 <__call_exitprocs+0x28>
    1498:	e2444001 	sub	r4, r4, #1
    149c:	e3740001 	cmn	r4, #1
    14a0:	e2455004 	sub	r5, r5, #4
    14a4:	1affffdc 	bne	141c <__call_exitprocs+0x74>
    14a8:	e59f1070 	ldr	r1, [pc, #112]	; 1520 <__call_exitprocs+0x178>
    14ac:	e3510000 	cmp	r1, #0
    14b0:	1a000009 	bne	14dc <__call_exitprocs+0x134>
    14b4:	e28dd014 	add	sp, sp, #20
    14b8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    14bc:	e12fff1e 	bx	lr
    14c0:	e1a0e00f 	mov	lr, pc
    14c4:	e12fff13 	bx	r3
    14c8:	eaffffec 	b	1480 <__call_exitprocs+0xd8>
    14cc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    14d0:	e1a0e00f 	mov	lr, pc
    14d4:	e12fff13 	bx	r3
    14d8:	eaffffe8 	b	1480 <__call_exitprocs+0xd8>
    14dc:	e5963004 	ldr	r3, [r6, #4]
    14e0:	e3530000 	cmp	r3, #0
    14e4:	e5963000 	ldr	r3, [r6]
    14e8:	1a000008 	bne	1510 <__call_exitprocs+0x168>
    14ec:	e3530000 	cmp	r3, #0
    14f0:	0a000006 	beq	1510 <__call_exitprocs+0x168>
    14f4:	e1a00006 	mov	r0, r6
    14f8:	e58b3000 	str	r3, [r11]
    14fc:	e320f000 	nop	{0}
    1500:	e59b6000 	ldr	r6, [r11]
    1504:	e3560000 	cmp	r6, #0
    1508:	1affffb5 	bne	13e4 <__call_exitprocs+0x3c>
    150c:	eaffffe8 	b	14b4 <__call_exitprocs+0x10c>
    1510:	e1a0b006 	mov	r11, r6
    1514:	e1a06003 	mov	r6, r3
    1518:	eafffff9 	b	1504 <__call_exitprocs+0x15c>
    151c:	00001684 	.word	0x00001684
    1520:	00000000 	.word	0x00000000

00001524 <register_fini>:
    1524:	e92d4008 	push	{r3, lr}
    1528:	e59f3010 	ldr	r3, [pc, #16]	; 1540 <register_fini+0x1c>
    152c:	e3530000 	cmp	r3, #0
    1530:	159f000c 	ldrne	r0, [pc, #12]	; 1544 <register_fini+0x20>
    1534:	1bffff49 	blne	1260 <atexit>
    1538:	e8bd4008 	pop	{r3, lr}
    153c:	e12fff1e 	bx	lr
    1540:	000016ac 	.word	0x000016ac
    1544:	00001548 	.word	0x00001548

00001548 <__libc_fini_array>:
    1548:	e92d4038 	push	{r3, r4, r5, lr}
    154c:	e59f5030 	ldr	r5, [pc, #48]	; 1584 <__libc_fini_array+0x3c>
    1550:	e59f4030 	ldr	r4, [pc, #48]	; 1588 <__libc_fini_array+0x40>
    1554:	e0654004 	rsb	r4, r5, r4
    1558:	e1b04144 	asrs	r4, r4, #2
    155c:	10855104 	addne	r5, r5, r4, lsl #2
    1560:	0a000004 	beq	1578 <__libc_fini_array+0x30>
    1564:	e5353004 	ldr	r3, [r5, #-4]!
    1568:	e1a0e00f 	mov	lr, pc
    156c:	e12fff13 	bx	r3
    1570:	e2544001 	subs	r4, r4, #1
    1574:	1afffffa 	bne	1564 <__libc_fini_array+0x1c>
    1578:	eb00004b 	bl	16ac <__libc_fini>
    157c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1580:	e12fff1e 	bx	lr
    1584:	000016c4 	.word	0x000016c4
    1588:	000016c8 	.word	0x000016c8

0000158c <__cs3_premain>:
    158c:	e92d4008 	push	{r3, lr}
    1590:	eb000017 	bl	15f4 <__libc_init_array>
    1594:	e59f3030 	ldr	r3, [pc, #48]	; 15cc <__cs3_premain+0x40>
    1598:	e3530000 	cmp	r3, #0
    159c:	15930000 	ldrne	r0, [r3]
    15a0:	01a00003 	moveq	r0, r3
    15a4:	e59f3024 	ldr	r3, [pc, #36]	; 15d0 <__cs3_premain+0x44>
    15a8:	e3530000 	cmp	r3, #0
    15ac:	15931000 	ldrne	r1, [r3]
    15b0:	01a01003 	moveq	r1, r3
    15b4:	e3a02000 	mov	r2, #0
    15b8:	ebfffd13 	bl	a0c <main>
    15bc:	e59f3010 	ldr	r3, [pc, #16]	; 15d4 <__cs3_premain+0x48>
    15c0:	e3530000 	cmp	r3, #0
    15c4:	1bffff2d 	blne	1280 <exit>
    15c8:	eafffffe 	b	15c8 <__cs3_premain+0x3c>
	...
    15d4:	00001280 	.word	0x00001280

000015d8 <_exit>:
    15d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    15dc:	e3a00018 	mov	r0, #24
    15e0:	e59f1004 	ldr	r1, [pc, #4]	; 15ec <_exit+0x14>
    15e4:	ef123456 	svc	0x00123456
    15e8:	eafffffe 	b	15e8 <_exit+0x10>
    15ec:	00020026 	.word	0x00020026

000015f0 <__cs3_isr_interrupt>:
    15f0:	eafffffe 	b	15f0 <__cs3_isr_interrupt>

000015f4 <__libc_init_array>:
    15f4:	e92d4070 	push	{r4, r5, r6, lr}
    15f8:	e59f506c 	ldr	r5, [pc, #108]	; 166c <__libc_init_array+0x78>
    15fc:	e59f606c 	ldr	r6, [pc, #108]	; 1670 <__libc_init_array+0x7c>
    1600:	e0656006 	rsb	r6, r5, r6
    1604:	e1b06146 	asrs	r6, r6, #2
    1608:	12455004 	subne	r5, r5, #4
    160c:	13a04000 	movne	r4, #0
    1610:	0a000005 	beq	162c <__libc_init_array+0x38>
    1614:	e5b53004 	ldr	r3, [r5, #4]!
    1618:	e2844001 	add	r4, r4, #1
    161c:	e1a0e00f 	mov	lr, pc
    1620:	e12fff13 	bx	r3
    1624:	e1560004 	cmp	r6, r4
    1628:	1afffff9 	bne	1614 <__libc_init_array+0x20>
    162c:	e59f5040 	ldr	r5, [pc, #64]	; 1674 <__libc_init_array+0x80>
    1630:	e59f6040 	ldr	r6, [pc, #64]	; 1678 <__libc_init_array+0x84>
    1634:	e0656006 	rsb	r6, r5, r6
    1638:	eb000013 	bl	168c <_init>
    163c:	e1b06146 	asrs	r6, r6, #2
    1640:	12455004 	subne	r5, r5, #4
    1644:	13a04000 	movne	r4, #0
    1648:	0a000005 	beq	1664 <__libc_init_array+0x70>
    164c:	e5b53004 	ldr	r3, [r5, #4]!
    1650:	e2844001 	add	r4, r4, #1
    1654:	e1a0e00f 	mov	lr, pc
    1658:	e12fff13 	bx	r3
    165c:	e1560004 	cmp	r6, r4
    1660:	1afffff9 	bne	164c <__libc_init_array+0x58>
    1664:	e8bd4070 	pop	{r4, r5, r6, lr}
    1668:	e12fff1e 	bx	lr
    166c:	000016a4 	.word	0x000016a4
    1670:	000016a4 	.word	0x000016a4
    1674:	000016a4 	.word	0x000016a4
    1678:	000016ac 	.word	0x000016ac

Disassembly of section .rodata:

00001680 <_global_impure_ptr-0x4>:
    1680:	00000055 	.word	0x00000055

00001684 <_global_impure_ptr>:
    1684:	000016f0 00000043                       ....C...

0000168c <_init>:
    168c:	e1a0c00d 	mov	r12, sp
    1690:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1694:	e24cb004 	sub	r11, r12, #4
    1698:	e24bd028 	sub	sp, r11, #40	; 0x28
    169c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    16a0:	e12fff1e 	bx	lr

000016a4 <__init_array_start>:
    16a4:	00001524 	.word	0x00001524

000016a8 <__frame_dummy_init_array_entry>:
    16a8:	00000208                                ....

000016ac <__libc_fini>:
    16ac:	e1a0c00d 	mov	r12, sp
    16b0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    16b4:	e24cb004 	sub	r11, r12, #4
    16b8:	e24bd028 	sub	sp, r11, #40	; 0x28
    16bc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    16c0:	e12fff1e 	bx	lr

000016c4 <__fini_array_start>:
    16c4:	000001c4 	.word	0x000001c4

000016c8 <__cs3_regions>:
    16c8:	00000000 	.word	0x00000000
    16cc:	00000040 	.word	0x00000040
    16d0:	00000040 	.word	0x00000040
    16d4:	00001ae0 	.word	0x00001ae0
    16d8:	00000058 	.word	0x00000058

000016dc <__cs3_regions_end>:
    16dc:	00000000 	.word	0x00000000
