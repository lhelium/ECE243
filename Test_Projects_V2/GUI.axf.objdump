
D:/Project/GitHub/Test_Projects_V2/GUI.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	6c 08 00 00 70 08 00 00 74 08 00 00 78 08 00 00     l...p...t...x...
  30:	7c 08 00 00 b0 28 00 00 e0 24 00 00 80 08 00 00     |....(...$......

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb0009dc 	bl	284c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000299c 	.word	0x0000299c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_region_zero_size_ram+0x20>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_region_zero_size_ram+0x24>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_region_zero_size_ram+0x28>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00002df0 	.word	0x00002df0

00000124 <__cs3_heap_start_ptr>:
     124:	00002ef0 	.word	0x00002ef0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00002df8 	.word	0x00002df8
     170:	00002dfb 	.word	0x00002dfb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00002df8 	.word	0x00002df8
     1bc:	00002df8 	.word	0x00002df8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00002df8 	.word	0x00002df8
     200:	00000000 	.word	0x00000000
     204:	0000293c 	.word	0x0000293c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	0000293c 	.word	0x0000293c
     250:	00002dfc 	.word	0x00002dfc
     254:	000029a0 	.word	0x000029a0
     258:	00000000 	.word	0x00000000

0000025c <initializeBoard>:

//reset functions
void resetGame(bool reset, int board[][COLS]);


void initializeBoard (int board[][COLS]) {
     25c:	e92d0ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11}
     260:	e1a03000 	mov	r3, r0
     264:	e3a01005 	mov	r1, #5
    //initialize everything to 0 first
    int i = 0;
    int j = 0;
    for (i = 0; i < ROWS; i++) {
        for (j = 0; j < COLS; j++) {
            board [i][j] = 0;
     268:	e3a02000 	mov	r2, #0
     26c:	e5832000 	str	r2, [r3]
     270:	e5832004 	str	r2, [r3, #4]
     274:	e5832008 	str	r2, [r3, #8]
     278:	e583200c 	str	r2, [r3, #12]
     27c:	e5832010 	str	r2, [r3, #16]
     280:	e2833014 	add	r3, r3, #20
void initializeBoard (int board[][COLS]) {
// 1 for red, 2 for green, 3 for blue, 4 for yellow, 5 for orange
    //initialize everything to 0 first
    int i = 0;
    int j = 0;
    for (i = 0; i < ROWS; i++) {
     284:	e2511001 	subs	r1, r1, #1
     288:	1afffff7 	bne	26c <initializeBoard+0x10>
        }
    }

    // hardcoding the positions
    // RED
    board [0][0] = 1;
     28c:	e3a03001 	mov	r3, #1
     290:	e5803000 	str	r3, [r0]
    board [1][4] = 1;
     294:	e5803024 	str	r3, [r0, #36]	; 0x24
    // GREEN
    board [2][0] = 2;
     298:	e3a03002 	mov	r3, #2
     29c:	e5803028 	str	r3, [r0, #40]	; 0x28
    board [1][3] = 2;
     2a0:	e5803020 	str	r3, [r0, #32]
    // BLUE
    board [2][1] = 3;
     2a4:	e3a03003 	mov	r3, #3
     2a8:	e580302c 	str	r3, [r0, #44]	; 0x2c
    board [2][4] = 3;
     2ac:	e5803038 	str	r3, [r0, #56]	; 0x38
    // YELLOW
    board [4][0] = 4;
     2b0:	e3a03004 	mov	r3, #4
     2b4:	e5803050 	str	r3, [r0, #80]	; 0x50
    board [3][3] = 4;
     2b8:	e5803048 	str	r3, [r0, #72]	; 0x48
    // ORANGE
    board [4][1] = 5;
     2bc:	e3a03005 	mov	r3, #5
     2c0:	e5803054 	str	r3, [r0, #84]	; 0x54
    board [3][4] = 5;
     2c4:	e580304c 	str	r3, [r0, #76]	; 0x4c
	
	//initializing the gameBoard variable
	int x = 0, y = 0;
	for(x = 0; x < 5; x++) {
     2c8:	e3a01000 	mov	r1, #0

//reset functions
void resetGame(bool reset, int board[][COLS]);


void initializeBoard (int board[][COLS]) {
     2cc:	e3027e14 	movw	r7, #11796	; 0x2e14
     2d0:	e3407000 	movt	r7, #0
     2d4:	e1a09001 	mov	r9, r1
			if(x == 0 && y == 0) { //red start
				gameBoard[x][y] = 'r';
			} else if(y == 1 && x == 4) { //red end
				gameBoard[x][y] = 'R';
			} else if(y == 2 && x == 0) { //green start
				gameBoard[x][y] = 'g';
     2d8:	e3a0b067 	mov	r11, #103	; 0x67
	for(x = 0; x < 5; x++) {
		for(y = 0; y < 5; y++) {
			if(x == 0 && y == 0) { //red start
				gameBoard[x][y] = 'r';
			} else if(y == 1 && x == 4) { //red end
				gameBoard[x][y] = 'R';
     2dc:	e3a08052 	mov	r8, #82	; 0x52
     2e0:	ea000042 	b	3f0 <initializeBoard+0x194>
	
	//initializing the gameBoard variable
	int x = 0, y = 0;
	for(x = 0; x < 5; x++) {
		for(y = 0; y < 5; y++) {
			if(x == 0 && y == 0) { //red start
     2e4:	e1930001 	orrs	r0, r3, r1
				gameBoard[x][y] = 'r';
     2e8:	05c24000 	strbeq	r4, [r2]
	
	//initializing the gameBoard variable
	int x = 0, y = 0;
	for(x = 0; x < 5; x++) {
		for(y = 0; y < 5; y++) {
			if(x == 0 && y == 0) { //red start
     2ec:	0a000038 	beq	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'r';
			} else if(y == 1 && x == 4) { //red end
     2f0:	e3530001 	cmp	r3, #1
     2f4:	13a00000 	movne	r0, #0
     2f8:	03a00001 	moveq	r0, #1
     2fc:	e3510004 	cmp	r1, #4
     300:	13a0c000 	movne	r12, #0
     304:	03a0c001 	moveq	r12, #1
     308:	e110000c 	tst	r0, r12
				gameBoard[x][y] = 'R';
     30c:	15c28000 	strbne	r8, [r2]
	int x = 0, y = 0;
	for(x = 0; x < 5; x++) {
		for(y = 0; y < 5; y++) {
			if(x == 0 && y == 0) { //red start
				gameBoard[x][y] = 'r';
			} else if(y == 1 && x == 4) { //red end
     310:	1a00002f 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'R';
			} else if(y == 2 && x == 0) { //green start
     314:	e3530002 	cmp	r3, #2
     318:	13a05000 	movne	r5, #0
     31c:	03a05001 	moveq	r5, #1
     320:	e2716001 	rsbs	r6, r1, #1
     324:	33a06000 	movcc	r6, #0
     328:	e1150006 	tst	r5, r6
				gameBoard[x][y] = 'g';
     32c:	15c2b000 	strbne	r11, [r2]
		for(y = 0; y < 5; y++) {
			if(x == 0 && y == 0) { //red start
				gameBoard[x][y] = 'r';
			} else if(y == 1 && x == 4) { //red end
				gameBoard[x][y] = 'R';
			} else if(y == 2 && x == 0) { //green start
     330:	1a000027 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'g';
			} else if(y == 1 && x == 3) { //green end
     334:	e3510003 	cmp	r1, #3
     338:	13a0a000 	movne	r10, #0
     33c:	03a0a001 	moveq	r10, #1
     340:	e110000a 	tst	r0, r10
				gameBoard[x][y] = 'G';
     344:	13a00047 	movne	r0, #71	; 0x47
     348:	15c20000 	strbne	r0, [r2]
				gameBoard[x][y] = 'r';
			} else if(y == 1 && x == 4) { //red end
				gameBoard[x][y] = 'R';
			} else if(y == 2 && x == 0) { //green start
				gameBoard[x][y] = 'g';
			} else if(y == 1 && x == 3) { //green end
     34c:	1a000020 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'G';
			} else if(y == 2 && x == 4) { //blue start
     350:	e115000c 	tst	r5, r12
				gameBoard[x][y] = 'b';
     354:	13a00062 	movne	r0, #98	; 0x62
     358:	15c20000 	strbne	r0, [r2]
				gameBoard[x][y] = 'R';
			} else if(y == 2 && x == 0) { //green start
				gameBoard[x][y] = 'g';
			} else if(y == 1 && x == 3) { //green end
				gameBoard[x][y] = 'G';
			} else if(y == 2 && x == 4) { //blue start
     35c:	1a00001c 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'b';
			} else if(y == 2 && x == 1) { //blue end
     360:	e3510001 	cmp	r1, #1
     364:	13a00000 	movne	r0, #0
     368:	03a00001 	moveq	r0, #1
     36c:	e1150000 	tst	r5, r0
				gameBoard[x][y] = 'B';
     370:	13a00042 	movne	r0, #66	; 0x42
     374:	15c20000 	strbne	r0, [r2]
				gameBoard[x][y] = 'g';
			} else if(y == 1 && x == 3) { //green end
				gameBoard[x][y] = 'G';
			} else if(y == 2 && x == 4) { //blue start
				gameBoard[x][y] = 'b';
			} else if(y == 2 && x == 1) { //blue end
     378:	1a000015 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'B';
			} else if(y == 4 && x == 0) { //yellow start
     37c:	e3530004 	cmp	r3, #4
     380:	13a05000 	movne	r5, #0
     384:	03a05001 	moveq	r5, #1
     388:	e1150006 	tst	r5, r6
				gameBoard[x][y] = 'y';
     38c:	13a00079 	movne	r0, #121	; 0x79
     390:	15c20000 	strbne	r0, [r2]
				gameBoard[x][y] = 'G';
			} else if(y == 2 && x == 4) { //blue start
				gameBoard[x][y] = 'b';
			} else if(y == 2 && x == 1) { //blue end
				gameBoard[x][y] = 'B';
			} else if(y == 4 && x == 0) { //yellow start
     394:	1a00000e 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'y';
			} else if(y == 3 && x == 3) { //yellow end
     398:	e3530003 	cmp	r3, #3
     39c:	13a06000 	movne	r6, #0
     3a0:	03a06001 	moveq	r6, #1
     3a4:	e116000a 	tst	r6, r10
				gameBoard[x][y] = 'Y';
     3a8:	13a00059 	movne	r0, #89	; 0x59
     3ac:	15c20000 	strbne	r0, [r2]
				gameBoard[x][y] = 'b';
			} else if(y == 2 && x == 1) { //blue end
				gameBoard[x][y] = 'B';
			} else if(y == 4 && x == 0) { //yellow start
				gameBoard[x][y] = 'y';
			} else if(y == 3 && x == 3) { //yellow end
     3b0:	1a000007 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'Y';
			} else if(y == 3 && x == 4) { //orange start
     3b4:	e116000c 	tst	r6, r12
				gameBoard[x][y] = 'o';
     3b8:	13a0006f 	movne	r0, #111	; 0x6f
     3bc:	15c20000 	strbne	r0, [r2]
				gameBoard[x][y] = 'B';
			} else if(y == 4 && x == 0) { //yellow start
				gameBoard[x][y] = 'y';
			} else if(y == 3 && x == 3) { //yellow end
				gameBoard[x][y] = 'Y';
			} else if(y == 3 && x == 4) { //orange start
     3c0:	1a000003 	bne	3d4 <initializeBoard+0x178>
				gameBoard[x][y] = 'o';
			} else if(y == 4 && x == 1) { //orange end
     3c4:	e1150000 	tst	r5, r0
				gameBoard[x][y] = 'O';
     3c8:	13a0004f 	movne	r0, #79	; 0x4f
			} else { //all other non-occupied places
				gameBoard[x][y] = '0';
     3cc:	03a00030 	moveq	r0, #48	; 0x30
     3d0:	e5c20000 	strb	r0, [r2]
    board [3][4] = 5;
	
	//initializing the gameBoard variable
	int x = 0, y = 0;
	for(x = 0; x < 5; x++) {
		for(y = 0; y < 5; y++) {
     3d4:	e2833001 	add	r3, r3, #1
     3d8:	e2822001 	add	r2, r2, #1
     3dc:	e3530005 	cmp	r3, #5
     3e0:	1affffbf 	bne	2e4 <initializeBoard+0x88>
    board [4][1] = 5;
    board [3][4] = 5;
	
	//initializing the gameBoard variable
	int x = 0, y = 0;
	for(x = 0; x < 5; x++) {
     3e4:	e2811001 	add	r1, r1, #1
     3e8:	e3510005 	cmp	r1, #5
     3ec:	0a000004 	beq	404 <initializeBoard+0x1a8>

//reset functions
void resetGame(bool reset, int board[][COLS]);


void initializeBoard (int board[][COLS]) {
     3f0:	e0812101 	add	r2, r1, r1, lsl #2
     3f4:	e0872002 	add	r2, r7, r2
     3f8:	e1a03009 	mov	r3, r9
	//initializing the gameBoard variable
	int x = 0, y = 0;
	for(x = 0; x < 5; x++) {
		for(y = 0; y < 5; y++) {
			if(x == 0 && y == 0) { //red start
				gameBoard[x][y] = 'r';
     3fc:	e3a04072 	mov	r4, #114	; 0x72
     400:	eaffffb7 	b	2e4 <initializeBoard+0x88>
				gameBoard[x][y] = '0';
			}
		}
	}

}
     404:	e8bd0ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11}
     408:	e12fff1e 	bx	lr

0000040c <plot_pixel>:
    return 0;
}

void plot_pixel(int x, int y, short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
     40c:	e3023e14 	movw	r3, #11796	; 0x2e14
     410:	e3403000 	movt	r3, #0
     414:	e593301c 	ldr	r3, [r3, #28]
     418:	e1a00080 	lsl	r0, r0, #1
     41c:	e0831501 	add	r1, r3, r1, lsl #10
     420:	e18120b0 	strh	r2, [r1, r0]
     424:	e12fff1e 	bx	lr

00000428 <fill_color>:
		}
    }
}


void fill_color(int x, int y, short int color) {
     428:	e92d45f8 	push	{r3, r4, r5, r6, r7, r8, r10, lr}
     42c:	e1a07002 	mov	r7, r2
//printf("position (x,y): " );
     int xpos =  x * 64;
     430:	e1a05300 	lsl	r5, r0, #6
     int ypos =  y * 48;
     434:	e0811081 	add	r1, r1, r1, lsl #1
     438:	e1a08201 	lsl	r8, r1, #4
    // //printf("\n");
    //
    int tempX = xpos;
    int tempY = ypos;
    //
    for (xpos = x * 64; xpos < (tempX + 64); xpos++) {
     43c:	e285a040 	add	r10, r5, #64	; 0x40
     440:	e155000a 	cmp	r5, r10
     444:	a8bd85f8 	popge	{r3, r4, r5, r6, r7, r8, r10, pc}
     448:	ea00000a 	b	478 <fill_color+0x50>
        for (ypos = y * 48; ypos < (tempY + 48); ypos++) {
            plot_pixel(xpos, ypos, color);
     44c:	e1a00005 	mov	r0, r5
     450:	e1a01004 	mov	r1, r4
     454:	e1a02007 	mov	r2, r7
     458:	ebffffeb 	bl	40c <plot_pixel>
    //
    int tempX = xpos;
    int tempY = ypos;
    //
    for (xpos = x * 64; xpos < (tempX + 64); xpos++) {
        for (ypos = y * 48; ypos < (tempY + 48); ypos++) {
     45c:	e2844001 	add	r4, r4, #1
     460:	e1540006 	cmp	r4, r6
     464:	1afffff8 	bne	44c <fill_color+0x24>
    // //printf("\n");
    //
    int tempX = xpos;
    int tempY = ypos;
    //
    for (xpos = x * 64; xpos < (tempX + 64); xpos++) {
     468:	e2855001 	add	r5, r5, #1
     46c:	e155000a 	cmp	r5, r10
     470:	1a000001 	bne	47c <fill_color+0x54>
     474:	e8bd85f8 	pop	{r3, r4, r5, r6, r7, r8, r10, pc}
        for (ypos = y * 48; ypos < (tempY + 48); ypos++) {
     478:	e2886030 	add	r6, r8, #48	; 0x30
     47c:	e1580006 	cmp	r8, r6
     480:	b1a04008 	movlt	r4, r8
     484:	bafffff0 	blt	44c <fill_color+0x24>
     488:	eafffff6 	b	468 <fill_color+0x40>

0000048c <wait_for_vsync>:
void wait_for_vsync() {

    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;

    //step 1: write a 1 to the front buffer
    *pixel_ctrl_ptr = 1;
     48c:	e3033fff 	movw	r3, #16383	; 0x3fff
     490:	e34f3f20 	movt	r3, #65312	; 0xff20
     494:	e3a02001 	mov	r2, #1
     498:	e5032fdf 	str	r2, [r3, #-4063]	; 0xfffff021

    //setp 2: poll the status, + 3 means 3 bytes.
    register int status = *(pixel_ctrl_ptr + 3);
     49c:	e5133fd3 	ldr	r3, [r3, #-4051]	; 0xfffff02d

    //step  3: check conditions
    //while status is 1, status is equal to whatever the S bit is.
    // if status is 0, this means the swap happens and it breaks out of the loop
    while((status & 0x01) != 0) {
     4a0:	e3130001 	tst	r3, #1
     4a4:	012fff1e 	bxeq	lr
		status = *(pixel_ctrl_ptr + 3);
     4a8:	e3032fff 	movw	r2, #16383	; 0x3fff
     4ac:	e34f2f20 	movt	r2, #65312	; 0xff20
     4b0:	e5123fd3 	ldr	r3, [r2, #-4051]	; 0xfffff02d
    register int status = *(pixel_ctrl_ptr + 3);

    //step  3: check conditions
    //while status is 1, status is equal to whatever the S bit is.
    // if status is 0, this means the swap happens and it breaks out of the loop
    while((status & 0x01) != 0) {
     4b4:	e3130001 	tst	r3, #1
     4b8:	1afffffc 	bne	4b0 <wait_for_vsync+0x24>
     4bc:	e12fff1e 	bx	lr

000004c0 <clear_screen>:
		status = *(pixel_ctrl_ptr + 3);
	}
}

//ISS C
void clear_screen () {
     4c0:	e92d4070 	push	{r4, r5, r6, lr}
    int x, y;
    for (x = 0; x < 320; x++) {
     4c4:	e3a05000 	mov	r5, #0
		status = *(pixel_ctrl_ptr + 3);
	}
}

//ISS C
void clear_screen () {
     4c8:	e1a06005 	mov	r6, r5
     4cc:	ea000009 	b	4f8 <clear_screen+0x38>
    int x, y;
    for (x = 0; x < 320; x++) {
        for (y = 0; y < 240; y++) {
            plot_pixel(x, y, 0x0000);
     4d0:	e1a00005 	mov	r0, r5
     4d4:	e1a01004 	mov	r1, r4
     4d8:	e1a02006 	mov	r2, r6
     4dc:	ebffffca 	bl	40c <plot_pixel>

//ISS C
void clear_screen () {
    int x, y;
    for (x = 0; x < 320; x++) {
        for (y = 0; y < 240; y++) {
     4e0:	e2844001 	add	r4, r4, #1
     4e4:	e35400f0 	cmp	r4, #240	; 0xf0
     4e8:	1afffff8 	bne	4d0 <clear_screen+0x10>
}

//ISS C
void clear_screen () {
    int x, y;
    for (x = 0; x < 320; x++) {
     4ec:	e2855001 	add	r5, r5, #1
     4f0:	e3550d05 	cmp	r5, #320	; 0x140
     4f4:	08bd8070 	popeq	{r4, r5, r6, pc}
		status = *(pixel_ctrl_ptr + 3);
	}
}

//ISS C
void clear_screen () {
     4f8:	e1a04006 	mov	r4, r6
     4fc:	eafffff3 	b	4d0 <clear_screen+0x10>

00000500 <swap>:
    }
}

void swap (int* a, int* b) {
    int temp;
    temp = *b;
     500:	e5913000 	ldr	r3, [r1]
    *b = *a;
     504:	e5902000 	ldr	r2, [r0]
     508:	e5812000 	str	r2, [r1]
    *a = temp;
     50c:	e5803000 	str	r3, [r0]
     510:	e12fff1e 	bx	lr

00000514 <draw_line>:
}
//alogrithm
void draw_line(int x0, int x1, int y0, int y1, short int line_color)
{
     514:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     518:	e24dd014 	sub	sp, sp, #20
     51c:	e58d000c 	str	r0, [sp, #12]
     520:	e58d1008 	str	r1, [sp, #8]
     524:	e58d2004 	str	r2, [sp, #4]
     528:	e58d3000 	str	r3, [sp]
     52c:	e1dda3f8 	ldrsh	r10, [sp, #56]	; 0x38
    bool is_steep  = abs(y1 - y0) > abs(x1 - x0);
     530:	e0623003 	rsb	r3, r2, r3
     534:	e3530000 	cmp	r3, #0
     538:	b2633000 	rsblt	r3, r3, #0
     53c:	e0601001 	rsb	r1, r0, r1
     540:	e0218fc1 	eor	r8, r1, r1, asr #31
     544:	e0488fc1 	sub	r8, r8, r1, asr #31
     548:	e1530008 	cmp	r3, r8
     54c:	d3a08000 	movle	r8, #0
     550:	c3a08001 	movgt	r8, #1

// might be here:
    if (is_steep) {
     554:	e3580000 	cmp	r8, #0
     558:	0a000005 	beq	574 <draw_line+0x60>
        swap(&x0, &y0);
     55c:	e28d000c 	add	r0, sp, #12
     560:	e28d1004 	add	r1, sp, #4
     564:	ebffffe5 	bl	500 <swap>
        swap(&x1, &y1);
     568:	e28d0008 	add	r0, sp, #8
     56c:	e1a0100d 	mov	r1, sp
     570:	ebffffe2 	bl	500 <swap>
    }

    if (x0 > x1) {
     574:	e59d3008 	ldr	r3, [sp, #8]
     578:	e59d200c 	ldr	r2, [sp, #12]
     57c:	e1520003 	cmp	r2, r3
     580:	da000005 	ble	59c <draw_line+0x88>
        swap(&x0, &x1);
     584:	e28d000c 	add	r0, sp, #12
     588:	e28d1008 	add	r1, sp, #8
     58c:	ebffffdb 	bl	500 <swap>
        swap(&y0, &y1);
     590:	e28d0004 	add	r0, sp, #4
     594:	e1a0100d 	mov	r1, sp
     598:	ebffffd8 	bl	500 <swap>
    }

    int deltax = x1 - x0;
     59c:	e59d3008 	ldr	r3, [sp, #8]
     5a0:	e59d500c 	ldr	r5, [sp, #12]
     5a4:	e0659003 	rsb	r9, r5, r3
    int deltay = abs(y1 - y0);
     5a8:	e59d2000 	ldr	r2, [sp]
     5ac:	e59d6004 	ldr	r6, [sp, #4]
     5b0:	e0667002 	rsb	r7, r6, r2
     5b4:	e3570000 	cmp	r7, #0
     5b8:	b2677000 	rsblt	r7, r7, #0
    int error = -(deltax / 2);
     5bc:	e0894fa9 	add	r4, r9, r9, lsr #31
     5c0:	e1a040c4 	asr	r4, r4, #1
     5c4:	e2644000 	rsb	r4, r4, #0
    int y = y0;
    int y_step;

    if (y0 < y1) {
        y_step = 1;
     5c8:	e1520006 	cmp	r2, r6
     5cc:	d3e0b000 	mvnle	r11, #0
     5d0:	c3a0b001 	movgt	r11, #1
    } else {
        y_step = -1;
    }

    int x = x0;
    for (x = x0; x < x1 + 1; x++) {
     5d4:	e2833001 	add	r3, r3, #1
     5d8:	e1550003 	cmp	r5, r3
     5dc:	aa00000e 	bge	61c <draw_line+0x108>
        if (is_steep) {
     5e0:	e3580000 	cmp	r8, #0
            plot_pixel(y, x, line_color);
     5e4:	11a00006 	movne	r0, r6
     5e8:	11a01005 	movne	r1, r5
        } else {
            plot_pixel(x, y, line_color);
     5ec:	01a00005 	moveq	r0, r5
     5f0:	01a01006 	moveq	r1, r6
     5f4:	e1a0200a 	mov	r2, r10
     5f8:	ebffff83 	bl	40c <plot_pixel>
        }

        error = error + deltay;

        if (error >= 0) {
     5fc:	e0944007 	adds	r4, r4, r7
            y = y + y_step;
     600:	5086600b 	addpl	r6, r6, r11
            error = error - deltax;
     604:	50694004 	rsbpl	r4, r9, r4
    } else {
        y_step = -1;
    }

    int x = x0;
    for (x = x0; x < x1 + 1; x++) {
     608:	e2855001 	add	r5, r5, #1
     60c:	e59d3008 	ldr	r3, [sp, #8]
     610:	e2833001 	add	r3, r3, #1
     614:	e1530005 	cmp	r3, r5
     618:	cafffff0 	bgt	5e0 <draw_line+0xcc>
        if (error >= 0) {
            y = y + y_step;
            error = error - deltax;
        }
    }
}
     61c:	e28dd014 	add	sp, sp, #20
     620:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

00000624 <enable_A9_interrupts>:

// CODE BELOW ARE INTERUPT RELATED:
/*Turn on interrupts in the ARM processor*/
void enable_A9_interrupts() {
	int status = 0b01010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     624:	e3a03053 	mov	r3, #83	; 0x53
     628:	e129f003 	msr	CPSR_fc, r3
     62c:	e12fff1e 	bx	lr

00000630 <disable_A9_interrupts>:
}

/*Turn off interrupts in the ARM processor*/
void disable_A9_interrupts() {
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     630:	e3a030d3 	mov	r3, #211	; 0xd3
     634:	e129f003 	msr	CPSR_fc, r3
     638:	e12fff1e 	bx	lr

0000063c <config_interrupt>:
	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs
	*((int *) 0xFFFED000) = 1;
}

/* Configure Set Enable Registers (ICDISERn) and Interrupt Processor Target Registers (ICDIPTRn). The default (reset) values are used for other registers in the GIC.*/
void config_interrupt (int N, int CPU_target) {
     63c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	int reg_offset, index, value, address;

	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
     640:	e1a031c0 	asr	r3, r0, #3
     644:	e3c33003 	bic	r3, r3, #3
	index = N & 0x1F;
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;
     648:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00

	/* Configure the Interrupt Set-Enable Registers (ICDISERn).
	* reg_offset = (integer_div(N / 32) * 4
	* value = 1 << (N mod 32) */
	reg_offset = (N >> 3) & 0xFFFFFFFC;
	index = N & 0x1F;
     64c:	e200201f 	and	r2, r0, #31
	value = 0x1 << index;
	address = 0xFFFED100 + reg_offset;

	/* Now that we know the register address and value, set the appropriate bit */
	*(int *)address |= value;
     650:	e513c300 	ldr	r12, [r3, #-768]	; 0xfffffd00
     654:	e3a04001 	mov	r4, #1
     658:	e18c2214 	orr	r2, r12, r4, lsl r2
     65c:	e5032300 	str	r2, [r3, #-768]	; 0xfffffd00
	reg_offset = (N & 0xFFFFFFFC);
	index = N & 0x3;
	address = 0xFFFED800 + reg_offset + index;

	/* Now that we know the register address and value, write to (only) the appropriate byte */
	*(char *)address = (char) CPU_target;
     660:	e2400b4a 	sub	r0, r0, #75776	; 0x12800
     664:	e5c01000 	strb	r1, [r0]
}
     668:	e8bd0010 	ldmfd	sp!, {r4}
     66c:	e12fff1e 	bx	lr

00000670 <config_GIC>:
	int status = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
}

/* Configure the Generic Interrupt Controller (GIC)*/
void config_GIC() {
     670:	e92d4008 	push	{r3, lr}
	config_interrupt(79, 1); //configure the PS2 keyboard parallel port
     674:	e3a0004f 	mov	r0, #79	; 0x4f
     678:	e3a01001 	mov	r1, #1
     67c:	ebffffee 	bl	63c <config_interrupt>
	config_interrupt(73, 1); //configure KEY interrupts
     680:	e3a00049 	mov	r0, #73	; 0x49
     684:	e3a01001 	mov	r1, #1
     688:	ebffffeb 	bl	63c <config_interrupt>

	// Set Interrupt Priority Mask Register (ICCPMR). Enable interrupts of all priorities
	*((int *) 0xFFFEC104) = 0xFFFF;
     68c:	e3e02a13 	mvn	r2, #77824	; 0x13000
     690:	e30f3fff 	movw	r3, #65535	; 0xffff
     694:	e5023efb 	str	r3, [r2, #-3835]	; 0xfffff105

	// Set CPU Interface Control Register (ICCICR). Enable signaling of interrupts
	*((int *) 0xFFFEC100) = 1;
     698:	e3a03001 	mov	r3, #1
     69c:	e5023eff 	str	r3, [r2, #-3839]	; 0xfffff101

	// Configure the Distributor Control Register (ICDDCR) to send pending interrupts to CPUs
	*((int *) 0xFFFED000) = 1;
     6a0:	e3e02a12 	mvn	r2, #73728	; 0x12000
     6a4:	e5023fff 	str	r3, [r2, #-4095]	; 0xfffff001
     6a8:	e8bd8008 	pop	{r3, pc}

000006ac <config_KEYs>:
}

/* setup the KEY interrupts */
void config_KEYs() {
	volatile int * KEY_ptr = (int *) 0xFF200050; // KEY base address
	*(KEY_ptr + 2) = 0xF; // enable interrupts for all four KEYs
     6ac:	e3a03000 	mov	r3, #0
     6b0:	e34f3f20 	movt	r3, #65312	; 0xff20
     6b4:	e3a0200f 	mov	r2, #15
     6b8:	e5832058 	str	r2, [r3, #88]	; 0x58
     6bc:	e12fff1e 	bx	lr

000006c0 <config_PS2s>:

/* setup the PS2 interrupts in the FPGA */
void config_PS2s() {
	volatile int* PS2_ptr = (int*)0xFF200100; // PS2 base address
	volatile int* PS2_ptr_interrupt = (int*)0xFF200104;
	*(PS2_ptr_interrupt) = 0x1; // enable interrupts for PS/2 by writing 1 to RE field at address 0xFF200104
     6c0:	e3a03000 	mov	r3, #0
     6c4:	e34f3f20 	movt	r3, #65312	; 0xff20
     6c8:	e3a02001 	mov	r2, #1
     6cc:	e5832104 	str	r2, [r3, #260]	; 0x104
     6d0:	e12fff1e 	bx	lr

000006d4 <PS2_ISR>:
// use global variables.

 void PS2_ISR() { //determine which button on the keyboard was pressed: W,A,S,D or other, and display on HEX
	//clear the interrupt
	volatile int* PS2_ptr_interrupt = (int*)0xFF200104;
	*(PS2_ptr_interrupt) = 0b100000001;
     6d4:	e3a03000 	mov	r3, #0
     6d8:	e34f3f20 	movt	r3, #65312	; 0xff20
     6dc:	e3002101 	movw	r2, #257	; 0x101
     6e0:	e5832104 	str	r2, [r3, #260]	; 0x104
	volatile int *RLEDs = (int *) 0xFF200000;

	int PS2_data, RAVAIL, RVALID, data, LED;
	//const int W = 0x1D, A = 0x1C, S = 0x1B, D = 0x23;

	PS2_data = *(PS2_ptr);
     6e4:	e5932100 	ldr	r2, [r3, #256]	; 0x100
	RAVAIL = (PS2_data & 0xFFFF0000) >> 16;

	if(RAVAIL > 0) {
     6e8:	e1b03822 	lsrs	r3, r2, #16
     6ec:	0a00005a 	beq	85c <PS2_ISR+0x188>
		byte1 = byte2;
     6f0:	e3023e14 	movw	r3, #11796	; 0x2e14
     6f4:	e3403000 	movt	r3, #0
     6f8:	e5d30020 	ldrb	r0, [r3, #32]
     6fc:	e5c30021 	strb	r0, [r3, #33]	; 0x21
		byte2 = data;
     700:	e3a00000 	mov	r0, #0
     704:	e5c30020 	strb	r0, [r3, #32]
		data = PS2_data & 0xFF;
     708:	e6ef3072 	uxtb	r3, r2

		//determine the direction of movement (W/A/S/D)

		//if(byte1 != data) {
			if(data == 0x1D) {
     70c:	e353001d 	cmp	r3, #29
     710:	1a000004 	bne	728 <PS2_ISR+0x54>
				//LED = 0x1D;
				keyPressed = 'W';
     714:	e3023e14 	movw	r3, #11796	; 0x2e14
     718:	e3403000 	movt	r3, #0
     71c:	e3a02057 	mov	r2, #87	; 0x57
     720:	e5c32022 	strb	r2, [r3, #34]	; 0x22
     724:	ea00004c 	b	85c <PS2_ISR+0x188>

				//printf("W pressed\n");
			} else if(data == 0x1C) {
     728:	e353001c 	cmp	r3, #28
     72c:	1a000005 	bne	748 <PS2_ISR+0x74>
				LED = 0x1C;

                //Vertical Line

				keyPressed = 'A';
     730:	e3023e14 	movw	r3, #11796	; 0x2e14
     734:	e3403000 	movt	r3, #0
     738:	e3a02041 	mov	r2, #65	; 0x41
     73c:	e5c32022 	strb	r2, [r3, #34]	; 0x22
				//LED = 0x1D;
				keyPressed = 'W';

				//printf("W pressed\n");
			} else if(data == 0x1C) {
				LED = 0x1C;
     740:	e3a0101c 	mov	r1, #28
     744:	ea000044 	b	85c <PS2_ISR+0x188>

                //Vertical Line

				keyPressed = 'A';
				//printf("A pressed\n");
			} else if(data == 0x1B) {
     748:	e353001b 	cmp	r3, #27
     74c:	1a000005 	bne	768 <PS2_ISR+0x94>
				LED = 0x1B;
				keyPressed = 'S';
     750:	e3023e14 	movw	r3, #11796	; 0x2e14
     754:	e3403000 	movt	r3, #0
     758:	e3a02053 	mov	r2, #83	; 0x53
     75c:	e5c32022 	strb	r2, [r3, #34]	; 0x22
                //Vertical Line

				keyPressed = 'A';
				//printf("A pressed\n");
			} else if(data == 0x1B) {
				LED = 0x1B;
     760:	e3a0101b 	mov	r1, #27
     764:	ea00003c 	b	85c <PS2_ISR+0x188>
				keyPressed = 'S';
				//printf("S pressed\n");
			} else if(data == 0x23) {
     768:	e3530023 	cmp	r3, #35	; 0x23
     76c:	1a000005 	bne	788 <PS2_ISR+0xb4>
				LED = 0x23;
				keyPressed = 'D';
     770:	e3023e14 	movw	r3, #11796	; 0x2e14
     774:	e3403000 	movt	r3, #0
     778:	e3a02044 	mov	r2, #68	; 0x44
     77c:	e5c32022 	strb	r2, [r3, #34]	; 0x22
			} else if(data == 0x1B) {
				LED = 0x1B;
				keyPressed = 'S';
				//printf("S pressed\n");
			} else if(data == 0x23) {
				LED = 0x23;
     780:	e3a01023 	mov	r1, #35	; 0x23
     784:	ea000034 	b	85c <PS2_ISR+0x188>
				keyPressed = 'D';
				//printf("D pressed\n");

			//determine the color to move (R/G/B/Y/O)
			} else if(data == 0x16) {
     788:	e3530016 	cmp	r3, #22
     78c:	1a000007 	bne	7b0 <PS2_ISR+0xdc>
				LED = 0x16;
				keyPressed = '1';
     790:	e3023e14 	movw	r3, #11796	; 0x2e14
     794:	e3403000 	movt	r3, #0
     798:	e3a02031 	mov	r2, #49	; 0x31
     79c:	e5c32022 	strb	r2, [r3, #34]	; 0x22
				color_select = RED;
     7a0:	e3a02001 	mov	r2, #1
     7a4:	e5832024 	str	r2, [r3, #36]	; 0x24
				keyPressed = 'D';
				//printf("D pressed\n");

			//determine the color to move (R/G/B/Y/O)
			} else if(data == 0x16) {
				LED = 0x16;
     7a8:	e3a01016 	mov	r1, #22
     7ac:	ea00002a 	b	85c <PS2_ISR+0x188>
				keyPressed = '1';
				color_select = RED;
				//color = 'R';
				//printf("1 pressed\n");
			} else if(data == 0x1E) {
     7b0:	e353001e 	cmp	r3, #30
     7b4:	1a000007 	bne	7d8 <PS2_ISR+0x104>
				LED = 0x1E;
				//color = 'G';
				keyPressed = '2';
     7b8:	e3023e14 	movw	r3, #11796	; 0x2e14
     7bc:	e3403000 	movt	r3, #0
     7c0:	e3a02032 	mov	r2, #50	; 0x32
     7c4:	e5c32022 	strb	r2, [r3, #34]	; 0x22
				color_select =  GREEN;
     7c8:	e3a02002 	mov	r2, #2
     7cc:	e5832024 	str	r2, [r3, #36]	; 0x24
				keyPressed = '1';
				color_select = RED;
				//color = 'R';
				//printf("1 pressed\n");
			} else if(data == 0x1E) {
				LED = 0x1E;
     7d0:	e3a0101e 	mov	r1, #30
     7d4:	ea000020 	b	85c <PS2_ISR+0x188>
				//color = 'G';
				keyPressed = '2';
				color_select =  GREEN;
				//printf("2 pressed\n");
			} else if(data == 0x26) {
     7d8:	e3530026 	cmp	r3, #38	; 0x26
     7dc:	1a000007 	bne	800 <PS2_ISR+0x12c>
				LED = 0x26;
				//color = 'B';
				keyPressed = '3';
     7e0:	e3023e14 	movw	r3, #11796	; 0x2e14
     7e4:	e3403000 	movt	r3, #0
     7e8:	e3a02033 	mov	r2, #51	; 0x33
     7ec:	e5c32022 	strb	r2, [r3, #34]	; 0x22
				color_select = BLUE;
     7f0:	e3a02003 	mov	r2, #3
     7f4:	e5832024 	str	r2, [r3, #36]	; 0x24
				//color = 'G';
				keyPressed = '2';
				color_select =  GREEN;
				//printf("2 pressed\n");
			} else if(data == 0x26) {
				LED = 0x26;
     7f8:	e3a01026 	mov	r1, #38	; 0x26
     7fc:	ea000016 	b	85c <PS2_ISR+0x188>
				//color = 'B';
				keyPressed = '3';
				color_select = BLUE;
				//printf("3 pressed\n");
			} else if(data == 0x25) {
     800:	e3530025 	cmp	r3, #37	; 0x25
     804:	1a000007 	bne	828 <PS2_ISR+0x154>
				LED = 0x25;
				//color = 'Y';
				keyPressed = '4';
     808:	e3023e14 	movw	r3, #11796	; 0x2e14
     80c:	e3403000 	movt	r3, #0
     810:	e3a02034 	mov	r2, #52	; 0x34
     814:	e5c32022 	strb	r2, [r3, #34]	; 0x22
				color_select = YELLOW;
     818:	e3a02004 	mov	r2, #4
     81c:	e5832024 	str	r2, [r3, #36]	; 0x24
				//color = 'B';
				keyPressed = '3';
				color_select = BLUE;
				//printf("3 pressed\n");
			} else if(data == 0x25) {
				LED = 0x25;
     820:	e3a01025 	mov	r1, #37	; 0x25
     824:	ea00000c 	b	85c <PS2_ISR+0x188>
				//color = 'Y';
				keyPressed = '4';
				color_select = YELLOW;
				//printf("4 pressed\n");
			} else if(data == 0x2E) {
     828:	e353002e 	cmp	r3, #46	; 0x2e
				LED = 0x2E;
				//color = 'O';
				keyPressed = '5';
     82c:	e3023e14 	movw	r3, #11796	; 0x2e14
     830:	e3403000 	movt	r3, #0
     834:	03a02035 	moveq	r2, #53	; 0x35
     838:	05c32022 	strbeq	r2, [r3, #34]	; 0x22
				color_select = ORANGE;
     83c:	03a02005 	moveq	r2, #5
     840:	05832024 	streq	r2, [r3, #36]	; 0x24
				//color = 'Y';
				keyPressed = '4';
				color_select = YELLOW;
				//printf("4 pressed\n");
			} else if(data == 0x2E) {
				LED = 0x2E;
     844:	03a0102e 	moveq	r1, #46	; 0x2e

			//error handling
			} else {
				LED = 0xFFFF;
				//printf("unknown key pressed\n");
				keyPressed = '?';
     848:	13a0203f 	movne	r2, #63	; 0x3f
     84c:	15c32022 	strbne	r2, [r3, #34]	; 0x22
				//color = 'B';
				color_select = 10;
     850:	13a0200a 	movne	r2, #10
     854:	15832024 	strne	r2, [r3, #36]	; 0x24
				color_select = ORANGE;
				//printf("5 pressed\n");

			//error handling
			} else {
				LED = 0xFFFF;
     858:	130f1fff 	movwne	r1, #65535	; 0xffff

	}

	//printf("data: %c\n", data);
	//printf("%c key pressed\n", keyPressed);
	*RLEDs = LED; //display the hex code on the LEDs
     85c:	e3a03000 	mov	r3, #0
     860:	e34f3f20 	movt	r3, #65312	; 0xff20
     864:	e5831000 	str	r1, [r3]
     868:	e12fff1e 	bx	lr

0000086c <__cs3_reset>:
	// Write to the End of Interrupt Register (ICCEOIR)
	*((int *) 0xFFFEC110) = interrupt_ID;
}

// Define the remaining exception handlers
void __attribute__ ((interrupt)) __cs3_reset () {
     86c:	eafffffe 	b	86c <__cs3_reset>

00000870 <__cs3_isr_undef>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_undef () {
     870:	eafffffe 	b	870 <__cs3_isr_undef>

00000874 <__cs3_isr_swi>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_swi () {
     874:	eafffffe 	b	874 <__cs3_isr_swi>

00000878 <__cs3_isr_pabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_pabort () {
     878:	eafffffe 	b	878 <__cs3_isr_pabort>

0000087c <__cs3_isr_dabort>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_dabort () {
     87c:	eafffffe 	b	87c <__cs3_isr_dabort>

00000880 <__cs3_isr_fiq>:
	while(1);
}

void __attribute__ ((interrupt)) __cs3_isr_fiq () {
     880:	eafffffe 	b	880 <__cs3_isr_fiq>

00000884 <set_A9_IRQ_stack>:
	int stack, mode;
	stack = 0xFFFFFFFF - 7; // top of A9 onchip memory, aligned to 8 bytes

	/* change processor to IRQ mode with interrupts disabled */
	mode = 0b11010010;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     884:	e3a030d2 	mov	r3, #210	; 0xd2
     888:	e129f003 	msr	CPSR_fc, r3

	/* set banked stack pointer */
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     88c:	e3e03007 	mvn	r3, #7
     890:	e1a0d003 	mov	sp, r3

	/* go back to SVC mode before executing subroutine return! */
	mode = 0b11010011;
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     894:	e3a030d3 	mov	r3, #211	; 0xd3
     898:	e129f003 	msr	CPSR_fc, r3
     89c:	e12fff1e 	bx	lr

000008a0 <isLegalMove>:
	}*/ 

	//bool gameOver = false;
	
	//while(!gameOver) {
		if(color_select == RED) {
     8a0:	e3500001 	cmp	r0, #1
     8a4:	1a00006f 	bne	a68 <isLegalMove+0x1c8>
			if(keyPressed == 'W') {
     8a8:	e3510057 	cmp	r1, #87	; 0x57
     8ac:	1a000019 	bne	918 <isLegalMove+0x78>
				int tempY = redCurrentY - 1;
     8b0:	e3023e14 	movw	r3, #11796	; 0x2e14
     8b4:	e3403000 	movt	r3, #0
     8b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
     8bc:	e2433001 	sub	r3, r3, #1
				
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][redCurrentX] != '0' || redPathFound) { 
     8c0:	e3530004 	cmp	r3, #4
     8c4:	8a0002d1 	bhi	1410 <isLegalMove+0xb70>
     8c8:	e3022e14 	movw	r2, #11796	; 0x2e14
     8cc:	e3402000 	movt	r2, #0
     8d0:	e592102c 	ldr	r1, [r2, #44]	; 0x2c
     8d4:	e0830103 	add	r0, r3, r3, lsl #2
     8d8:	e0800001 	add	r0, r0, r1
     8dc:	e7d22000 	ldrb	r2, [r2, r0]
     8e0:	e3520030 	cmp	r2, #48	; 0x30
     8e4:	1a0002cb 	bne	1418 <isLegalMove+0xb78>
     8e8:	e3022e14 	movw	r2, #11796	; 0x2e14
     8ec:	e3402000 	movt	r2, #0
     8f0:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
     8f4:	e3520000 	cmp	r2, #0
     8f8:	1a0002c8 	bne	1420 <isLegalMove+0xb80>
						redPathFound = true;
						redCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						redCurrentY = tempY; //change Y accordingly
     8fc:	e3022e14 	movw	r2, #11796	; 0x2e14
     900:	e3402000 	movt	r2, #0
     904:	e5823028 	str	r3, [r2, #40]	; 0x28
						gameBoard[redCurrentY][redCurrentX] = '1'; //mark position as occupied
     908:	e3a03031 	mov	r3, #49	; 0x31
     90c:	e7c23000 	strb	r3, [r2, r0]
					}
					
					return true;
     910:	e3a00001 	mov	r0, #1
     914:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'A') {
     918:	e3510041 	cmp	r1, #65	; 0x41
     91c:	1a000019 	bne	988 <isLegalMove+0xe8>
				int tempX = redCurrentX - 1;
     920:	e3023e14 	movw	r3, #11796	; 0x2e14
     924:	e3403000 	movt	r3, #0
     928:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
     92c:	e2422001 	sub	r2, r2, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[redCurrentY][tempX] != '0' || redPathFound) { 
     930:	e3520004 	cmp	r2, #4
     934:	8a0002bb 	bhi	1428 <isLegalMove+0xb88>
     938:	e3023e14 	movw	r3, #11796	; 0x2e14
     93c:	e3403000 	movt	r3, #0
     940:	e5931028 	ldr	r1, [r3, #40]	; 0x28
     944:	e0810101 	add	r0, r1, r1, lsl #2
     948:	e0800002 	add	r0, r0, r2
     94c:	e7d33000 	ldrb	r3, [r3, r0]
     950:	e3530030 	cmp	r3, #48	; 0x30
     954:	1a0002b5 	bne	1430 <isLegalMove+0xb90>
     958:	e3023e14 	movw	r3, #11796	; 0x2e14
     95c:	e3403000 	movt	r3, #0
     960:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
     964:	e3530000 	cmp	r3, #0
     968:	1a0002b2 	bne	1438 <isLegalMove+0xb98>
						redPathFound = true;
						redCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						redCurrentX = tempX; //change Y accordingly
     96c:	e3023e14 	movw	r3, #11796	; 0x2e14
     970:	e3403000 	movt	r3, #0
     974:	e583202c 	str	r2, [r3, #44]	; 0x2c
						gameBoard[redCurrentY][redCurrentX] = '1'; //mark position as occupied
     978:	e3a01031 	mov	r1, #49	; 0x31
     97c:	e7c31000 	strb	r1, [r3, r0]
					}
					return true;
     980:	e3a00001 	mov	r0, #1
     984:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'S') {
     988:	e3510053 	cmp	r1, #83	; 0x53
     98c:	1a000019 	bne	9f8 <isLegalMove+0x158>
				int tempY = redCurrentY + 1;
     990:	e3023e14 	movw	r3, #11796	; 0x2e14
     994:	e3403000 	movt	r3, #0
     998:	e5933028 	ldr	r3, [r3, #40]	; 0x28
     99c:	e2833001 	add	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][redCurrentX] != '0' || redPathFound) { 
     9a0:	e3530004 	cmp	r3, #4
     9a4:	8a0002a5 	bhi	1440 <isLegalMove+0xba0>
     9a8:	e3022e14 	movw	r2, #11796	; 0x2e14
     9ac:	e3402000 	movt	r2, #0
     9b0:	e592102c 	ldr	r1, [r2, #44]	; 0x2c
     9b4:	e0830103 	add	r0, r3, r3, lsl #2
     9b8:	e0800001 	add	r0, r0, r1
     9bc:	e7d22000 	ldrb	r2, [r2, r0]
     9c0:	e3520030 	cmp	r2, #48	; 0x30
     9c4:	1a00029f 	bne	1448 <isLegalMove+0xba8>
     9c8:	e3022e14 	movw	r2, #11796	; 0x2e14
     9cc:	e3402000 	movt	r2, #0
     9d0:	e5d22030 	ldrb	r2, [r2, #48]	; 0x30
     9d4:	e3520000 	cmp	r2, #0
     9d8:	1a00029c 	bne	1450 <isLegalMove+0xbb0>
						redPathFound = true;
						redCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						redCurrentY = tempY; //change Y accordingly
     9dc:	e3022e14 	movw	r2, #11796	; 0x2e14
     9e0:	e3402000 	movt	r2, #0
     9e4:	e5823028 	str	r3, [r2, #40]	; 0x28
						gameBoard[redCurrentY][redCurrentX] = '1'; //mark position as occupied
     9e8:	e3a03031 	mov	r3, #49	; 0x31
     9ec:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
     9f0:	e3a00001 	mov	r0, #1
     9f4:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'D') {
     9f8:	e3510044 	cmp	r1, #68	; 0x44
     9fc:	1a000295 	bne	1458 <isLegalMove+0xbb8>
				int tempX = redCurrentX + 1;
     a00:	e3023e14 	movw	r3, #11796	; 0x2e14
     a04:	e3403000 	movt	r3, #0
     a08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
     a0c:	e2822001 	add	r2, r2, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[redCurrentY][tempX] != '0' || redPathFound) { 
     a10:	e3520004 	cmp	r2, #4
     a14:	8a000291 	bhi	1460 <isLegalMove+0xbc0>
     a18:	e3023e14 	movw	r3, #11796	; 0x2e14
     a1c:	e3403000 	movt	r3, #0
     a20:	e5931028 	ldr	r1, [r3, #40]	; 0x28
     a24:	e0810101 	add	r0, r1, r1, lsl #2
     a28:	e0800002 	add	r0, r0, r2
     a2c:	e7d33000 	ldrb	r3, [r3, r0]
     a30:	e3530030 	cmp	r3, #48	; 0x30
     a34:	1a00028b 	bne	1468 <isLegalMove+0xbc8>
     a38:	e3023e14 	movw	r3, #11796	; 0x2e14
     a3c:	e3403000 	movt	r3, #0
     a40:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
     a44:	e3530000 	cmp	r3, #0
     a48:	1a000288 	bne	1470 <isLegalMove+0xbd0>
						redPathFound = true;
						redCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						redCurrentX = tempX; //change Y accordingly
     a4c:	e3023e14 	movw	r3, #11796	; 0x2e14
     a50:	e3403000 	movt	r3, #0
     a54:	e583202c 	str	r2, [r3, #44]	; 0x2c
						gameBoard[redCurrentY][redCurrentX] = '1'; //mark position as occupied
     a58:	e3a01031 	mov	r1, #49	; 0x31
     a5c:	e7c31000 	strb	r1, [r3, r0]
						
					}
					return true;
     a60:	e3a00001 	mov	r0, #1
     a64:	e12fff1e 	bx	lr
				redCurrentX = redCurrentX;
				redCurrentY = redCurrentY;
				return false;
			}
			
		} else if(color_select == GREEN) {
     a68:	e3500002 	cmp	r0, #2
     a6c:	1a000077 	bne	c50 <isLegalMove+0x3b0>
			if(keyPressed == 'W') {
     a70:	e3510057 	cmp	r1, #87	; 0x57
     a74:	1a00001b 	bne	ae8 <isLegalMove+0x248>
				int tempY = greenCurrentY - 1;
     a78:	e3023e14 	movw	r3, #11796	; 0x2e14
     a7c:	e3403000 	movt	r3, #0
     a80:	e5933034 	ldr	r3, [r3, #52]	; 0x34
     a84:	e2433001 	sub	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][greenCurrentX] != '0' || greenPathFound) { 
     a88:	e3530004 	cmp	r3, #4
     a8c:	8a000279 	bhi	1478 <isLegalMove+0xbd8>
     a90:	e30229a8 	movw	r2, #10664	; 0x29a8
     a94:	e3402000 	movt	r2, #0
     a98:	e5921000 	ldr	r1, [r2]
     a9c:	e3022e14 	movw	r2, #11796	; 0x2e14
     aa0:	e3402000 	movt	r2, #0
     aa4:	e0830103 	add	r0, r3, r3, lsl #2
     aa8:	e0800001 	add	r0, r0, r1
     aac:	e7d22000 	ldrb	r2, [r2, r0]
     ab0:	e3520030 	cmp	r2, #48	; 0x30
     ab4:	1a000271 	bne	1480 <isLegalMove+0xbe0>
     ab8:	e3022e14 	movw	r2, #11796	; 0x2e14
     abc:	e3402000 	movt	r2, #0
     ac0:	e5d22038 	ldrb	r2, [r2, #56]	; 0x38
     ac4:	e3520000 	cmp	r2, #0
     ac8:	1a00026e 	bne	1488 <isLegalMove+0xbe8>
						greenPathFound = true;
						greenCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						greenCurrentY = tempY; //change Y accordingly
     acc:	e3022e14 	movw	r2, #11796	; 0x2e14
     ad0:	e3402000 	movt	r2, #0
     ad4:	e5823034 	str	r3, [r2, #52]	; 0x34
						gameBoard[greenCurrentY][greenCurrentX] = '1'; //mark position as occupied
     ad8:	e3a03031 	mov	r3, #49	; 0x31
     adc:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
     ae0:	e3a00001 	mov	r0, #1
     ae4:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'A') {
     ae8:	e3510041 	cmp	r1, #65	; 0x41
     aec:	1a00001b 	bne	b60 <isLegalMove+0x2c0>
				int tempX = greenCurrentX - 1;
     af0:	e30239a8 	movw	r3, #10664	; 0x29a8
     af4:	e3403000 	movt	r3, #0
     af8:	e5932000 	ldr	r2, [r3]
     afc:	e2422001 	sub	r2, r2, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[greenCurrentY][tempX] != '0' || greenPathFound) { 
     b00:	e3520004 	cmp	r2, #4
     b04:	8a000261 	bhi	1490 <isLegalMove+0xbf0>
     b08:	e3023e14 	movw	r3, #11796	; 0x2e14
     b0c:	e3403000 	movt	r3, #0
     b10:	e5931034 	ldr	r1, [r3, #52]	; 0x34
     b14:	e0810101 	add	r0, r1, r1, lsl #2
     b18:	e0800002 	add	r0, r0, r2
     b1c:	e7d33000 	ldrb	r3, [r3, r0]
     b20:	e3530030 	cmp	r3, #48	; 0x30
     b24:	1a00025b 	bne	1498 <isLegalMove+0xbf8>
     b28:	e3023e14 	movw	r3, #11796	; 0x2e14
     b2c:	e3403000 	movt	r3, #0
     b30:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
     b34:	e3530000 	cmp	r3, #0
     b38:	1a000258 	bne	14a0 <isLegalMove+0xc00>
						greenPathFound = true;
						greenCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						greenCurrentX = tempX; //change Y accordingly
     b3c:	e30239a8 	movw	r3, #10664	; 0x29a8
     b40:	e3403000 	movt	r3, #0
     b44:	e5832000 	str	r2, [r3]
						gameBoard[greenCurrentY][greenCurrentX] = '1'; //mark position as occupied
     b48:	e3023e14 	movw	r3, #11796	; 0x2e14
     b4c:	e3403000 	movt	r3, #0
     b50:	e3a01031 	mov	r1, #49	; 0x31
     b54:	e7c31000 	strb	r1, [r3, r0]
						
					}
					return true;
     b58:	e3a00001 	mov	r0, #1
     b5c:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'S') {
     b60:	e3510053 	cmp	r1, #83	; 0x53
     b64:	1a00001b 	bne	bd8 <isLegalMove+0x338>
				int tempY = greenCurrentY + 1;
     b68:	e3023e14 	movw	r3, #11796	; 0x2e14
     b6c:	e3403000 	movt	r3, #0
     b70:	e5933034 	ldr	r3, [r3, #52]	; 0x34
     b74:	e2833001 	add	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][greenCurrentX] != '0' || greenPathFound) { 
     b78:	e3530004 	cmp	r3, #4
     b7c:	8a000249 	bhi	14a8 <isLegalMove+0xc08>
     b80:	e30229a8 	movw	r2, #10664	; 0x29a8
     b84:	e3402000 	movt	r2, #0
     b88:	e5921000 	ldr	r1, [r2]
     b8c:	e3022e14 	movw	r2, #11796	; 0x2e14
     b90:	e3402000 	movt	r2, #0
     b94:	e0830103 	add	r0, r3, r3, lsl #2
     b98:	e0800001 	add	r0, r0, r1
     b9c:	e7d22000 	ldrb	r2, [r2, r0]
     ba0:	e3520030 	cmp	r2, #48	; 0x30
     ba4:	1a000241 	bne	14b0 <isLegalMove+0xc10>
     ba8:	e3022e14 	movw	r2, #11796	; 0x2e14
     bac:	e3402000 	movt	r2, #0
     bb0:	e5d22038 	ldrb	r2, [r2, #56]	; 0x38
     bb4:	e3520000 	cmp	r2, #0
     bb8:	1a00023e 	bne	14b8 <isLegalMove+0xc18>
						greenPathFound = true;
						greenCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						greenCurrentY = tempY; //change Y accordingly
     bbc:	e3022e14 	movw	r2, #11796	; 0x2e14
     bc0:	e3402000 	movt	r2, #0
     bc4:	e5823034 	str	r3, [r2, #52]	; 0x34
						gameBoard[greenCurrentY][greenCurrentX] = '1'; //mark position as occupied
     bc8:	e3a03031 	mov	r3, #49	; 0x31
     bcc:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
     bd0:	e3a00001 	mov	r0, #1
     bd4:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'D') {
     bd8:	e3510044 	cmp	r1, #68	; 0x44
     bdc:	1a000237 	bne	14c0 <isLegalMove+0xc20>
				int tempX = greenCurrentX + 1;
     be0:	e30239a8 	movw	r3, #10664	; 0x29a8
     be4:	e3403000 	movt	r3, #0
     be8:	e5932000 	ldr	r2, [r3]
     bec:	e2822001 	add	r2, r2, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[greenCurrentY][tempX] != '0' || greenPathFound) { 
     bf0:	e3520004 	cmp	r2, #4
     bf4:	8a000233 	bhi	14c8 <isLegalMove+0xc28>
     bf8:	e3023e14 	movw	r3, #11796	; 0x2e14
     bfc:	e3403000 	movt	r3, #0
     c00:	e5931034 	ldr	r1, [r3, #52]	; 0x34
     c04:	e0810101 	add	r0, r1, r1, lsl #2
     c08:	e0800002 	add	r0, r0, r2
     c0c:	e7d33000 	ldrb	r3, [r3, r0]
     c10:	e3530030 	cmp	r3, #48	; 0x30
     c14:	1a00022d 	bne	14d0 <isLegalMove+0xc30>
     c18:	e3023e14 	movw	r3, #11796	; 0x2e14
     c1c:	e3403000 	movt	r3, #0
     c20:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
     c24:	e3530000 	cmp	r3, #0
     c28:	1a00022a 	bne	14d8 <isLegalMove+0xc38>
						greenPathFound = true;
						greenCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						greenCurrentX = tempX; //change Y accordingly
     c2c:	e30239a8 	movw	r3, #10664	; 0x29a8
     c30:	e3403000 	movt	r3, #0
     c34:	e5832000 	str	r2, [r3]
						gameBoard[greenCurrentY][greenCurrentX] = '1'; //mark position as occupied
     c38:	e3023e14 	movw	r3, #11796	; 0x2e14
     c3c:	e3403000 	movt	r3, #0
     c40:	e3a01031 	mov	r1, #49	; 0x31
     c44:	e7c31000 	strb	r1, [r3, r0]
						
					}
					return true;
     c48:	e3a00001 	mov	r0, #1
     c4c:	e12fff1e 	bx	lr
				greenCurrentX = greenCurrentX;
				greenCurrentY = greenCurrentY;
				return false;
			}
			
		} else if(color_select == BLUE) {
     c50:	e3500003 	cmp	r0, #3
     c54:	1a0000a4 	bne	eec <isLegalMove+0x64c>
			
			if(keyPressed == 'W') {
     c58:	e3510057 	cmp	r1, #87	; 0x57
     c5c:	1a00001d 	bne	cd8 <isLegalMove+0x438>
				int tempY = blueCurrentY - 1;
     c60:	e30239a8 	movw	r3, #10664	; 0x29a8
     c64:	e3403000 	movt	r3, #0
     c68:	e5933004 	ldr	r3, [r3, #4]
     c6c:	e2433001 	sub	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][blueCurrentX] != '0' || bluePathFound) { 
     c70:	e3530004 	cmp	r3, #4
     c74:	8a000219 	bhi	14e0 <isLegalMove+0xc40>
     c78:	e30229a8 	movw	r2, #10664	; 0x29a8
     c7c:	e3402000 	movt	r2, #0
     c80:	e5921008 	ldr	r1, [r2, #8]
     c84:	e3022e14 	movw	r2, #11796	; 0x2e14
     c88:	e3402000 	movt	r2, #0
     c8c:	e0830103 	add	r0, r3, r3, lsl #2
     c90:	e0800001 	add	r0, r0, r1
     c94:	e7d22000 	ldrb	r2, [r2, r0]
     c98:	e3520030 	cmp	r2, #48	; 0x30
     c9c:	1a000211 	bne	14e8 <isLegalMove+0xc48>
     ca0:	e3022e14 	movw	r2, #11796	; 0x2e14
     ca4:	e3402000 	movt	r2, #0
     ca8:	e5d22039 	ldrb	r2, [r2, #57]	; 0x39
     cac:	e3520000 	cmp	r2, #0
     cb0:	1a00020e 	bne	14f0 <isLegalMove+0xc50>
						bluePathFound = true;
						blueCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						blueCurrentY = tempY; //change Y accordingly
     cb4:	e30229a8 	movw	r2, #10664	; 0x29a8
     cb8:	e3402000 	movt	r2, #0
     cbc:	e5823004 	str	r3, [r2, #4]
						gameBoard[blueCurrentY][blueCurrentX] = '1'; //mark position as occupied
     cc0:	e3022e14 	movw	r2, #11796	; 0x2e14
     cc4:	e3402000 	movt	r2, #0
     cc8:	e3a03031 	mov	r3, #49	; 0x31
     ccc:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
     cd0:	e3a00001 	mov	r0, #1
     cd4:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'A') {
     cd8:	e3510041 	cmp	r1, #65	; 0x41
     cdc:	1a00001d 	bne	d58 <isLegalMove+0x4b8>
				int tempX = blueCurrentX - 1;
     ce0:	e30239a8 	movw	r3, #10664	; 0x29a8
     ce4:	e3403000 	movt	r3, #0
     ce8:	e5933008 	ldr	r3, [r3, #8]
     cec:	e2433001 	sub	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[blueCurrentY][tempX] != '0' || bluePathFound) { 
     cf0:	e3530004 	cmp	r3, #4
     cf4:	8a0001ff 	bhi	14f8 <isLegalMove+0xc58>
     cf8:	e30229a8 	movw	r2, #10664	; 0x29a8
     cfc:	e3402000 	movt	r2, #0
     d00:	e5921004 	ldr	r1, [r2, #4]
     d04:	e3022e14 	movw	r2, #11796	; 0x2e14
     d08:	e3402000 	movt	r2, #0
     d0c:	e0810101 	add	r0, r1, r1, lsl #2
     d10:	e0800003 	add	r0, r0, r3
     d14:	e7d22000 	ldrb	r2, [r2, r0]
     d18:	e3520030 	cmp	r2, #48	; 0x30
     d1c:	1a0001f7 	bne	1500 <isLegalMove+0xc60>
     d20:	e3022e14 	movw	r2, #11796	; 0x2e14
     d24:	e3402000 	movt	r2, #0
     d28:	e5d22039 	ldrb	r2, [r2, #57]	; 0x39
     d2c:	e3520000 	cmp	r2, #0
     d30:	1a0001f4 	bne	1508 <isLegalMove+0xc68>
						bluePathFound = true;
						blueCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						blueCurrentX = tempX; //change Y accordingly
     d34:	e30229a8 	movw	r2, #10664	; 0x29a8
     d38:	e3402000 	movt	r2, #0
     d3c:	e5823008 	str	r3, [r2, #8]
						gameBoard[blueCurrentY][blueCurrentX] = '1'; //mark position as occupied
     d40:	e3022e14 	movw	r2, #11796	; 0x2e14
     d44:	e3402000 	movt	r2, #0
     d48:	e3a01031 	mov	r1, #49	; 0x31
     d4c:	e7c21000 	strb	r1, [r2, r0]
						
					}
					return true;
     d50:	e3a00001 	mov	r0, #1
     d54:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'S') {
     d58:	e3510053 	cmp	r1, #83	; 0x53
     d5c:	1a00001d 	bne	dd8 <isLegalMove+0x538>
				int tempY = blueCurrentY + 1;
     d60:	e30239a8 	movw	r3, #10664	; 0x29a8
     d64:	e3403000 	movt	r3, #0
     d68:	e5933004 	ldr	r3, [r3, #4]
     d6c:	e2833001 	add	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][blueCurrentX] != '0' || bluePathFound) { 
     d70:	e3530004 	cmp	r3, #4
     d74:	8a0001e5 	bhi	1510 <isLegalMove+0xc70>
     d78:	e30229a8 	movw	r2, #10664	; 0x29a8
     d7c:	e3402000 	movt	r2, #0
     d80:	e5921008 	ldr	r1, [r2, #8]
     d84:	e3022e14 	movw	r2, #11796	; 0x2e14
     d88:	e3402000 	movt	r2, #0
     d8c:	e0830103 	add	r0, r3, r3, lsl #2
     d90:	e0800001 	add	r0, r0, r1
     d94:	e7d22000 	ldrb	r2, [r2, r0]
     d98:	e3520030 	cmp	r2, #48	; 0x30
     d9c:	1a0001dd 	bne	1518 <isLegalMove+0xc78>
     da0:	e3022e14 	movw	r2, #11796	; 0x2e14
     da4:	e3402000 	movt	r2, #0
     da8:	e5d22039 	ldrb	r2, [r2, #57]	; 0x39
     dac:	e3520000 	cmp	r2, #0
     db0:	1a0001da 	bne	1520 <isLegalMove+0xc80>
						bluePathFound = true;
						blueCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						blueCurrentY = tempY; //change Y accordingly
     db4:	e30229a8 	movw	r2, #10664	; 0x29a8
     db8:	e3402000 	movt	r2, #0
     dbc:	e5823004 	str	r3, [r2, #4]
						gameBoard[blueCurrentY][blueCurrentX] = '1'; //mark position as occupied
     dc0:	e3022e14 	movw	r2, #11796	; 0x2e14
     dc4:	e3402000 	movt	r2, #0
     dc8:	e3a03031 	mov	r3, #49	; 0x31
     dcc:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
     dd0:	e3a00001 	mov	r0, #1
     dd4:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'D') {
     dd8:	e3510044 	cmp	r1, #68	; 0x44
     ddc:	1a0001d1 	bne	1528 <isLegalMove+0xc88>
				int tempX = blueCurrentX + 1;
     de0:	e30239a8 	movw	r3, #10664	; 0x29a8
     de4:	e3403000 	movt	r3, #0
     de8:	e5931008 	ldr	r1, [r3, #8]
     dec:	e2813001 	add	r3, r1, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[blueCurrentY][tempX] != '0' || bluePathFound) { 
     df0:	e3530004 	cmp	r3, #4
     df4:	8a0001cd 	bhi	1530 <isLegalMove+0xc90>
     df8:	e30229a8 	movw	r2, #10664	; 0x29a8
     dfc:	e3402000 	movt	r2, #0
     e00:	e5920004 	ldr	r0, [r2, #4]
     e04:	e3022e14 	movw	r2, #11796	; 0x2e14
     e08:	e3402000 	movt	r2, #0
     e0c:	e080c100 	add	r12, r0, r0, lsl #2
     e10:	e08cc003 	add	r12, r12, r3
     e14:	e7d2200c 	ldrb	r2, [r2, r12]
     e18:	e3520030 	cmp	r2, #48	; 0x30
     e1c:	1a0001c5 	bne	1538 <isLegalMove+0xc98>
     e20:	e3022e14 	movw	r2, #11796	; 0x2e14
     e24:	e3402000 	movt	r2, #0
     e28:	e5d22039 	ldrb	r2, [r2, #57]	; 0x39
     e2c:	e3520000 	cmp	r2, #0
     e30:	1a0001c2 	bne	1540 <isLegalMove+0xca0>
					blueCurrentX = blueCurrentX;
					return false;
				} else {
					if(gameBoard[tempX][blueCurrentX] == 'B') { //reached the end
     e34:	e3022e14 	movw	r2, #11796	; 0x2e14
     e38:	e3402000 	movt	r2, #0
     e3c:	e083c103 	add	r12, r3, r3, lsl #2
     e40:	e08c1001 	add	r1, r12, r1
     e44:	e7d22001 	ldrb	r2, [r2, r1]
     e48:	e3520042 	cmp	r2, #66	; 0x42
     e4c:	1a00001b 	bne	ec0 <isLegalMove+0x620>
						bluePathFound = true;
     e50:	e3022e14 	movw	r2, #11796	; 0x2e14
     e54:	e3402000 	movt	r2, #0
     e58:	e3a01001 	mov	r1, #1
     e5c:	e5c21039 	strb	r1, [r2, #57]	; 0x39
						blueCurrentX = tempX;
     e60:	e30219a8 	movw	r1, #10664	; 0x29a8
     e64:	e3401000 	movt	r1, #0
     e68:	e5813008 	str	r3, [r1, #8]
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
     e6c:	e5d23030 	ldrb	r3, [r2, #48]	; 0x30
     e70:	e3530000 	cmp	r3, #0
     e74:	03a03000 	moveq	r3, #0
     e78:	0a00000a 	beq	ea8 <isLegalMove+0x608>
     e7c:	e5d23038 	ldrb	r3, [r2, #56]	; 0x38
     e80:	e3530000 	cmp	r3, #0
     e84:	03a03000 	moveq	r3, #0
     e88:	0a000006 	beq	ea8 <isLegalMove+0x608>
     e8c:	e5d2303a 	ldrb	r3, [r2, #58]	; 0x3a
     e90:	e3530000 	cmp	r3, #0
     e94:	11a03002 	movne	r3, r2
     e98:	15d3303b 	ldrbne	r3, [r3, #59]	; 0x3b
     e9c:	1a000001 	bne	ea8 <isLegalMove+0x608>
     ea0:	eaffffff 	b	ea4 <isLegalMove+0x604>
     ea4:	e3a03000 	mov	r3, #0
     ea8:	e3022e14 	movw	r2, #11796	; 0x2e14
     eac:	e3402000 	movt	r2, #0
     eb0:	e2033001 	and	r3, r3, #1
     eb4:	e5c2303c 	strb	r3, [r2, #60]	; 0x3c
					} else { //didn't reach the end, but is a valid move
						blueCurrentX = tempX; //change Y accordingly
						gameBoard[blueCurrentY][blueCurrentX] = '1'; //mark position as occupied
						
					}
					return true;
     eb8:	e3a00001 	mov	r0, #1
     ebc:	e12fff1e 	bx	lr
						bluePathFound = true;
						blueCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						blueCurrentX = tempX; //change Y accordingly
     ec0:	e30229a8 	movw	r2, #10664	; 0x29a8
     ec4:	e3402000 	movt	r2, #0
     ec8:	e5823008 	str	r3, [r2, #8]
						gameBoard[blueCurrentY][blueCurrentX] = '1'; //mark position as occupied
     ecc:	e3022e14 	movw	r2, #11796	; 0x2e14
     ed0:	e3402000 	movt	r2, #0
     ed4:	e0800100 	add	r0, r0, r0, lsl #2
     ed8:	e0803003 	add	r3, r0, r3
     edc:	e3a01031 	mov	r1, #49	; 0x31
     ee0:	e7c21003 	strb	r1, [r2, r3]
						
					}
					return true;
     ee4:	e3a00001 	mov	r0, #1
     ee8:	e12fff1e 	bx	lr
				blueCurrentX = blueCurrentX;
				blueCurrentY = blueCurrentY;
				return false;
			}
			
		} else if(color_select == YELLOW) {
     eec:	e3500004 	cmp	r0, #4
     ef0:	1a00009f 	bne	1174 <isLegalMove+0x8d4>
			
			if(keyPressed == 'W') {
     ef4:	e3510057 	cmp	r1, #87	; 0x57
     ef8:	1a00001b 	bne	f6c <isLegalMove+0x6cc>
				int tempY = yellowCurrentY - 1;
     efc:	e3023e14 	movw	r3, #11796	; 0x2e14
     f00:	e3403000 	movt	r3, #0
     f04:	e5933040 	ldr	r3, [r3, #64]	; 0x40
     f08:	e2433001 	sub	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][yellowCurrentX] != '0' || yellowPathFound) { 
     f0c:	e3530004 	cmp	r3, #4
     f10:	8a00018c 	bhi	1548 <isLegalMove+0xca8>
     f14:	e30229a8 	movw	r2, #10664	; 0x29a8
     f18:	e3402000 	movt	r2, #0
     f1c:	e592100c 	ldr	r1, [r2, #12]
     f20:	e3022e14 	movw	r2, #11796	; 0x2e14
     f24:	e3402000 	movt	r2, #0
     f28:	e0830103 	add	r0, r3, r3, lsl #2
     f2c:	e0800001 	add	r0, r0, r1
     f30:	e7d22000 	ldrb	r2, [r2, r0]
     f34:	e3520030 	cmp	r2, #48	; 0x30
     f38:	1a000184 	bne	1550 <isLegalMove+0xcb0>
     f3c:	e3022e14 	movw	r2, #11796	; 0x2e14
     f40:	e3402000 	movt	r2, #0
     f44:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
     f48:	e3520000 	cmp	r2, #0
     f4c:	1a000181 	bne	1558 <isLegalMove+0xcb8>
						yellowPathFound = true;
						yellowCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						yellowCurrentY = tempY; //change Y accordingly
     f50:	e3022e14 	movw	r2, #11796	; 0x2e14
     f54:	e3402000 	movt	r2, #0
     f58:	e5823040 	str	r3, [r2, #64]	; 0x40
						gameBoard[yellowCurrentY][yellowCurrentX] = '1'; //mark position as occupied
     f5c:	e3a03031 	mov	r3, #49	; 0x31
     f60:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
     f64:	e3a00001 	mov	r0, #1
     f68:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'A') {
     f6c:	e3510041 	cmp	r1, #65	; 0x41
     f70:	1a00001b 	bne	fe4 <isLegalMove+0x744>
				int tempX = yellowCurrentX - 1;
     f74:	e30239a8 	movw	r3, #10664	; 0x29a8
     f78:	e3403000 	movt	r3, #0
     f7c:	e593200c 	ldr	r2, [r3, #12]
     f80:	e2422001 	sub	r2, r2, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[yellowCurrentY][tempX] != '0' || yellowPathFound) { 
     f84:	e3520004 	cmp	r2, #4
     f88:	8a000174 	bhi	1560 <isLegalMove+0xcc0>
     f8c:	e3023e14 	movw	r3, #11796	; 0x2e14
     f90:	e3403000 	movt	r3, #0
     f94:	e5931040 	ldr	r1, [r3, #64]	; 0x40
     f98:	e0810101 	add	r0, r1, r1, lsl #2
     f9c:	e0800002 	add	r0, r0, r2
     fa0:	e7d33000 	ldrb	r3, [r3, r0]
     fa4:	e3530030 	cmp	r3, #48	; 0x30
     fa8:	1a00016e 	bne	1568 <isLegalMove+0xcc8>
     fac:	e3023e14 	movw	r3, #11796	; 0x2e14
     fb0:	e3403000 	movt	r3, #0
     fb4:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
     fb8:	e3530000 	cmp	r3, #0
     fbc:	1a00016b 	bne	1570 <isLegalMove+0xcd0>
						yellowPathFound = true;
						yellowCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						yellowCurrentX = tempX; //change Y accordingly
     fc0:	e30239a8 	movw	r3, #10664	; 0x29a8
     fc4:	e3403000 	movt	r3, #0
     fc8:	e583200c 	str	r2, [r3, #12]
						gameBoard[yellowCurrentY][yellowCurrentX] = '1'; //mark position as occupied
     fcc:	e3023e14 	movw	r3, #11796	; 0x2e14
     fd0:	e3403000 	movt	r3, #0
     fd4:	e3a01031 	mov	r1, #49	; 0x31
     fd8:	e7c31000 	strb	r1, [r3, r0]
						
					}
					return true;
     fdc:	e3a00001 	mov	r0, #1
     fe0:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'S') {
     fe4:	e3510053 	cmp	r1, #83	; 0x53
     fe8:	1a00001b 	bne	105c <isLegalMove+0x7bc>
				int tempY = yellowCurrentY + 1;
     fec:	e3023e14 	movw	r3, #11796	; 0x2e14
     ff0:	e3403000 	movt	r3, #0
     ff4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
     ff8:	e2833001 	add	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][yellowCurrentX] != '0' || yellowPathFound) { 
     ffc:	e3530004 	cmp	r3, #4
    1000:	8a00015c 	bhi	1578 <isLegalMove+0xcd8>
    1004:	e30229a8 	movw	r2, #10664	; 0x29a8
    1008:	e3402000 	movt	r2, #0
    100c:	e592100c 	ldr	r1, [r2, #12]
    1010:	e3022e14 	movw	r2, #11796	; 0x2e14
    1014:	e3402000 	movt	r2, #0
    1018:	e0830103 	add	r0, r3, r3, lsl #2
    101c:	e0800001 	add	r0, r0, r1
    1020:	e7d22000 	ldrb	r2, [r2, r0]
    1024:	e3520030 	cmp	r2, #48	; 0x30
    1028:	1a000154 	bne	1580 <isLegalMove+0xce0>
    102c:	e3022e14 	movw	r2, #11796	; 0x2e14
    1030:	e3402000 	movt	r2, #0
    1034:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
    1038:	e3520000 	cmp	r2, #0
    103c:	1a000151 	bne	1588 <isLegalMove+0xce8>
						yellowPathFound = true;
						yellowCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						yellowCurrentY = tempY; //change Y accordingly
    1040:	e3022e14 	movw	r2, #11796	; 0x2e14
    1044:	e3402000 	movt	r2, #0
    1048:	e5823040 	str	r3, [r2, #64]	; 0x40
						gameBoard[yellowCurrentY][yellowCurrentX] = '1'; //mark position as occupied
    104c:	e3a03031 	mov	r3, #49	; 0x31
    1050:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
    1054:	e3a00001 	mov	r0, #1
    1058:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'D') {
    105c:	e3510044 	cmp	r1, #68	; 0x44
    1060:	1a00014a 	bne	1590 <isLegalMove+0xcf0>
				int tempX = yellowCurrentX + 1;
    1064:	e30239a8 	movw	r3, #10664	; 0x29a8
    1068:	e3403000 	movt	r3, #0
    106c:	e593100c 	ldr	r1, [r3, #12]
    1070:	e2812001 	add	r2, r1, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[yellowCurrentY][tempX] != '0' || yellowPathFound) { 
    1074:	e3520004 	cmp	r2, #4
    1078:	8a000146 	bhi	1598 <isLegalMove+0xcf8>
    107c:	e3023e14 	movw	r3, #11796	; 0x2e14
    1080:	e3403000 	movt	r3, #0
    1084:	e5930040 	ldr	r0, [r3, #64]	; 0x40
    1088:	e080c100 	add	r12, r0, r0, lsl #2
    108c:	e08cc002 	add	r12, r12, r2
    1090:	e7d3300c 	ldrb	r3, [r3, r12]
    1094:	e3530030 	cmp	r3, #48	; 0x30
    1098:	1a000140 	bne	15a0 <isLegalMove+0xd00>
    109c:	e3023e14 	movw	r3, #11796	; 0x2e14
    10a0:	e3403000 	movt	r3, #0
    10a4:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
    10a8:	e3530000 	cmp	r3, #0
    10ac:	1a00013d 	bne	15a8 <isLegalMove+0xd08>
					yellowCurrentX = yellowCurrentX;
					return false;
				} else {
					if(gameBoard[tempX][yellowCurrentX] == 'Y') { //reached the end
    10b0:	e3023e14 	movw	r3, #11796	; 0x2e14
    10b4:	e3403000 	movt	r3, #0
    10b8:	e082c102 	add	r12, r2, r2, lsl #2
    10bc:	e08c1001 	add	r1, r12, r1
    10c0:	e7d33001 	ldrb	r3, [r3, r1]
    10c4:	e3530059 	cmp	r3, #89	; 0x59
    10c8:	1a00001e 	bne	1148 <isLegalMove+0x8a8>
						yellowPathFound = true;
    10cc:	e3023e14 	movw	r3, #11796	; 0x2e14
    10d0:	e3403000 	movt	r3, #0
    10d4:	e3a01001 	mov	r1, #1
    10d8:	e5c3103a 	strb	r1, [r3, #58]	; 0x3a
						yellowCurrentX = tempX;
    10dc:	e30219a8 	movw	r1, #10664	; 0x29a8
    10e0:	e3401000 	movt	r1, #0
    10e4:	e581200c 	str	r2, [r1, #12]
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
    10e8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
    10ec:	e3530000 	cmp	r3, #0
    10f0:	03a03000 	moveq	r3, #0
    10f4:	0a00000d 	beq	1130 <isLegalMove+0x890>
    10f8:	e3023e14 	movw	r3, #11796	; 0x2e14
    10fc:	e3403000 	movt	r3, #0
    1100:	e5d33038 	ldrb	r3, [r3, #56]	; 0x38
    1104:	e3530000 	cmp	r3, #0
    1108:	03a03000 	moveq	r3, #0
    110c:	0a000007 	beq	1130 <isLegalMove+0x890>
    1110:	e3023e14 	movw	r3, #11796	; 0x2e14
    1114:	e3403000 	movt	r3, #0
    1118:	e5d33039 	ldrb	r3, [r3, #57]	; 0x39
    111c:	e3530000 	cmp	r3, #0
    1120:	03a03000 	moveq	r3, #0
    1124:	13023e14 	movwne	r3, #11796	; 0x2e14
    1128:	13403000 	movtne	r3, #0
    112c:	15d3303b 	ldrbne	r3, [r3, #59]	; 0x3b
    1130:	e3022e14 	movw	r2, #11796	; 0x2e14
    1134:	e3402000 	movt	r2, #0
    1138:	e2033001 	and	r3, r3, #1
    113c:	e5c2303c 	strb	r3, [r2, #60]	; 0x3c
					} else { //didn't reach the end, but is a valid move
						yellowCurrentX = tempX; //change Y accordingly
						gameBoard[yellowCurrentY][yellowCurrentX] = '1'; //mark position as occupied
						
					}
					return true;
    1140:	e3a00001 	mov	r0, #1
    1144:	e12fff1e 	bx	lr
						yellowPathFound = true;
						yellowCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						yellowCurrentX = tempX; //change Y accordingly
    1148:	e30239a8 	movw	r3, #10664	; 0x29a8
    114c:	e3403000 	movt	r3, #0
    1150:	e583200c 	str	r2, [r3, #12]
						gameBoard[yellowCurrentY][yellowCurrentX] = '1'; //mark position as occupied
    1154:	e3023e14 	movw	r3, #11796	; 0x2e14
    1158:	e3403000 	movt	r3, #0
    115c:	e0800100 	add	r0, r0, r0, lsl #2
    1160:	e0802002 	add	r2, r0, r2
    1164:	e3a01031 	mov	r1, #49	; 0x31
    1168:	e7c31002 	strb	r1, [r3, r2]
						
					}
					return true;
    116c:	e3a00001 	mov	r0, #1
    1170:	e12fff1e 	bx	lr
				yellowCurrentX = yellowCurrentX;
				yellowCurrentY = yellowCurrentY;
				return false;
			}
			
		} else if(color_select == ORANGE) {
    1174:	e3500005 	cmp	r0, #5
    1178:	1a00010c 	bne	15b0 <isLegalMove+0xd10>
			
			if(keyPressed == 'W') {
    117c:	e3510057 	cmp	r1, #87	; 0x57
    1180:	1a00001d 	bne	11fc <isLegalMove+0x95c>
				int tempY = orangeCurrentY - 1;
    1184:	e30239a8 	movw	r3, #10664	; 0x29a8
    1188:	e3403000 	movt	r3, #0
    118c:	e5933010 	ldr	r3, [r3, #16]
    1190:	e2433001 	sub	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][orangeCurrentX] != '0' || orangePathFound) { 
    1194:	e3530004 	cmp	r3, #4
    1198:	8a000106 	bhi	15b8 <isLegalMove+0xd18>
    119c:	e30229a8 	movw	r2, #10664	; 0x29a8
    11a0:	e3402000 	movt	r2, #0
    11a4:	e5921014 	ldr	r1, [r2, #20]
    11a8:	e3022e14 	movw	r2, #11796	; 0x2e14
    11ac:	e3402000 	movt	r2, #0
    11b0:	e0830103 	add	r0, r3, r3, lsl #2
    11b4:	e0800001 	add	r0, r0, r1
    11b8:	e7d22000 	ldrb	r2, [r2, r0]
    11bc:	e3520030 	cmp	r2, #48	; 0x30
    11c0:	1a0000fe 	bne	15c0 <isLegalMove+0xd20>
    11c4:	e3022e14 	movw	r2, #11796	; 0x2e14
    11c8:	e3402000 	movt	r2, #0
    11cc:	e5d2203b 	ldrb	r2, [r2, #59]	; 0x3b
    11d0:	e3520000 	cmp	r2, #0
    11d4:	1a0000fb 	bne	15c8 <isLegalMove+0xd28>
						orangePathFound = true;
						orangeCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						orangeCurrentY = tempY; //change Y accordingly
    11d8:	e30229a8 	movw	r2, #10664	; 0x29a8
    11dc:	e3402000 	movt	r2, #0
    11e0:	e5823010 	str	r3, [r2, #16]
						gameBoard[orangeCurrentY][orangeCurrentX] = '1'; //mark position as occupied
    11e4:	e3022e14 	movw	r2, #11796	; 0x2e14
    11e8:	e3402000 	movt	r2, #0
    11ec:	e3a03031 	mov	r3, #49	; 0x31
    11f0:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
    11f4:	e3a00001 	mov	r0, #1
    11f8:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'A') {
    11fc:	e3510041 	cmp	r1, #65	; 0x41
    1200:	1a00001d 	bne	127c <isLegalMove+0x9dc>
				int tempX = orangeCurrentX - 1;
    1204:	e30239a8 	movw	r3, #10664	; 0x29a8
    1208:	e3403000 	movt	r3, #0
    120c:	e5933014 	ldr	r3, [r3, #20]
    1210:	e2433001 	sub	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[orangeCurrentY][tempX] != '0' || orangePathFound) { 
    1214:	e3530004 	cmp	r3, #4
    1218:	8a0000ec 	bhi	15d0 <isLegalMove+0xd30>
    121c:	e30229a8 	movw	r2, #10664	; 0x29a8
    1220:	e3402000 	movt	r2, #0
    1224:	e5921010 	ldr	r1, [r2, #16]
    1228:	e3022e14 	movw	r2, #11796	; 0x2e14
    122c:	e3402000 	movt	r2, #0
    1230:	e0810101 	add	r0, r1, r1, lsl #2
    1234:	e0800003 	add	r0, r0, r3
    1238:	e7d22000 	ldrb	r2, [r2, r0]
    123c:	e3520030 	cmp	r2, #48	; 0x30
    1240:	1a0000e4 	bne	15d8 <isLegalMove+0xd38>
    1244:	e3022e14 	movw	r2, #11796	; 0x2e14
    1248:	e3402000 	movt	r2, #0
    124c:	e5d2203b 	ldrb	r2, [r2, #59]	; 0x3b
    1250:	e3520000 	cmp	r2, #0
    1254:	1a0000e1 	bne	15e0 <isLegalMove+0xd40>
						orangePathFound = true;
						orangeCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						orangeCurrentX = tempX; //change Y accordingly
    1258:	e30229a8 	movw	r2, #10664	; 0x29a8
    125c:	e3402000 	movt	r2, #0
    1260:	e5823014 	str	r3, [r2, #20]
						gameBoard[orangeCurrentY][orangeCurrentX] = '1'; //mark position as occupied
    1264:	e3022e14 	movw	r2, #11796	; 0x2e14
    1268:	e3402000 	movt	r2, #0
    126c:	e3a01031 	mov	r1, #49	; 0x31
    1270:	e7c21000 	strb	r1, [r2, r0]
						
					}
					return true;
    1274:	e3a00001 	mov	r0, #1
    1278:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'S') {
    127c:	e3510053 	cmp	r1, #83	; 0x53
    1280:	1a00001d 	bne	12fc <isLegalMove+0xa5c>
				int tempY = orangeCurrentY + 1;
    1284:	e30239a8 	movw	r3, #10664	; 0x29a8
    1288:	e3403000 	movt	r3, #0
    128c:	e5933010 	ldr	r3, [r3, #16]
    1290:	e2833001 	add	r3, r3, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][orangeCurrentX] != '0' || orangePathFound) { 
    1294:	e3530004 	cmp	r3, #4
    1298:	8a0000d2 	bhi	15e8 <isLegalMove+0xd48>
    129c:	e30229a8 	movw	r2, #10664	; 0x29a8
    12a0:	e3402000 	movt	r2, #0
    12a4:	e5921014 	ldr	r1, [r2, #20]
    12a8:	e3022e14 	movw	r2, #11796	; 0x2e14
    12ac:	e3402000 	movt	r2, #0
    12b0:	e0830103 	add	r0, r3, r3, lsl #2
    12b4:	e0800001 	add	r0, r0, r1
    12b8:	e7d22000 	ldrb	r2, [r2, r0]
    12bc:	e3520030 	cmp	r2, #48	; 0x30
    12c0:	1a0000ca 	bne	15f0 <isLegalMove+0xd50>
    12c4:	e3022e14 	movw	r2, #11796	; 0x2e14
    12c8:	e3402000 	movt	r2, #0
    12cc:	e5d2203b 	ldrb	r2, [r2, #59]	; 0x3b
    12d0:	e3520000 	cmp	r2, #0
    12d4:	1a0000c7 	bne	15f8 <isLegalMove+0xd58>
						orangePathFound = true;
						orangeCurrentY = tempY;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						orangeCurrentY = tempY; //change Y accordingly
    12d8:	e30229a8 	movw	r2, #10664	; 0x29a8
    12dc:	e3402000 	movt	r2, #0
    12e0:	e5823010 	str	r3, [r2, #16]
						gameBoard[orangeCurrentY][orangeCurrentX] = '1'; //mark position as occupied
    12e4:	e3022e14 	movw	r2, #11796	; 0x2e14
    12e8:	e3402000 	movt	r2, #0
    12ec:	e3a03031 	mov	r3, #49	; 0x31
    12f0:	e7c23000 	strb	r3, [r2, r0]
						
					}
					return true;
    12f4:	e3a00001 	mov	r0, #1
    12f8:	e12fff1e 	bx	lr
				}
				
			} else if(keyPressed == 'D') {
    12fc:	e3510044 	cmp	r1, #68	; 0x44
    1300:	1a0000be 	bne	1600 <isLegalMove+0xd60>
				int tempX = orangeCurrentX + 1;
    1304:	e30239a8 	movw	r3, #10664	; 0x29a8
    1308:	e3403000 	movt	r3, #0
    130c:	e5931014 	ldr	r1, [r3, #20]
    1310:	e2813001 	add	r3, r1, #1
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[orangeCurrentY][tempX] != '0' || orangePathFound) { 
    1314:	e3530004 	cmp	r3, #4
    1318:	8a0000ba 	bhi	1608 <isLegalMove+0xd68>
    131c:	e30229a8 	movw	r2, #10664	; 0x29a8
    1320:	e3402000 	movt	r2, #0
    1324:	e5920010 	ldr	r0, [r2, #16]
    1328:	e3022e14 	movw	r2, #11796	; 0x2e14
    132c:	e3402000 	movt	r2, #0
    1330:	e080c100 	add	r12, r0, r0, lsl #2
    1334:	e08cc003 	add	r12, r12, r3
    1338:	e7d2200c 	ldrb	r2, [r2, r12]
    133c:	e3520030 	cmp	r2, #48	; 0x30
    1340:	1a0000b2 	bne	1610 <isLegalMove+0xd70>
    1344:	e3022e14 	movw	r2, #11796	; 0x2e14
    1348:	e3402000 	movt	r2, #0
    134c:	e5d2203b 	ldrb	r2, [r2, #59]	; 0x3b
    1350:	e3520000 	cmp	r2, #0
    1354:	1a0000af 	bne	1618 <isLegalMove+0xd78>
					orangeCurrentX = orangeCurrentX;
					return false;
				} else {
					if(gameBoard[tempX][orangeCurrentX] == 'O') { //reached the end
    1358:	e3022e14 	movw	r2, #11796	; 0x2e14
    135c:	e3402000 	movt	r2, #0
    1360:	e083c103 	add	r12, r3, r3, lsl #2
    1364:	e08c1001 	add	r1, r12, r1
    1368:	e7d22001 	ldrb	r2, [r2, r1]
    136c:	e352004f 	cmp	r2, #79	; 0x4f
    1370:	1a00001b 	bne	13e4 <isLegalMove+0xb44>
						orangePathFound = true;
    1374:	e3022e14 	movw	r2, #11796	; 0x2e14
    1378:	e3402000 	movt	r2, #0
    137c:	e3a01001 	mov	r1, #1
    1380:	e5c2103b 	strb	r1, [r2, #59]	; 0x3b
						orangeCurrentX = tempX;
    1384:	e30219a8 	movw	r1, #10664	; 0x29a8
    1388:	e3401000 	movt	r1, #0
    138c:	e5813014 	str	r3, [r1, #20]
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
    1390:	e5d23030 	ldrb	r3, [r2, #48]	; 0x30
    1394:	e3530000 	cmp	r3, #0
    1398:	03a03000 	moveq	r3, #0
    139c:	0a00000a 	beq	13cc <isLegalMove+0xb2c>
    13a0:	e5d23038 	ldrb	r3, [r2, #56]	; 0x38
    13a4:	e3530000 	cmp	r3, #0
    13a8:	03a03000 	moveq	r3, #0
    13ac:	0a000006 	beq	13cc <isLegalMove+0xb2c>
    13b0:	e5d23039 	ldrb	r3, [r2, #57]	; 0x39
    13b4:	e3530000 	cmp	r3, #0
    13b8:	11a03002 	movne	r3, r2
    13bc:	15d3303a 	ldrbne	r3, [r3, #58]	; 0x3a
    13c0:	1a000001 	bne	13cc <isLegalMove+0xb2c>
    13c4:	eaffffff 	b	13c8 <isLegalMove+0xb28>
    13c8:	e3a03000 	mov	r3, #0
    13cc:	e3022e14 	movw	r2, #11796	; 0x2e14
    13d0:	e3402000 	movt	r2, #0
    13d4:	e2033001 	and	r3, r3, #1
    13d8:	e5c2303c 	strb	r3, [r2, #60]	; 0x3c
					} else { //didn't reach the end, but is a valid move
						orangeCurrentX = tempX; //change Y accordingly
						gameBoard[orangeCurrentY][orangeCurrentX] = '1'; //mark position as occupied
						
					}
					return true;
    13dc:	e3a00001 	mov	r0, #1
    13e0:	e12fff1e 	bx	lr
						orangePathFound = true;
						orangeCurrentX = tempX;
						gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
						//don't want to change the array at [currentX][currentY]
					} else { //didn't reach the end, but is a valid move
						orangeCurrentX = tempX; //change Y accordingly
    13e4:	e30229a8 	movw	r2, #10664	; 0x29a8
    13e8:	e3402000 	movt	r2, #0
    13ec:	e5823014 	str	r3, [r2, #20]
						gameBoard[orangeCurrentY][orangeCurrentX] = '1'; //mark position as occupied
    13f0:	e3022e14 	movw	r2, #11796	; 0x2e14
    13f4:	e3402000 	movt	r2, #0
    13f8:	e0800100 	add	r0, r0, r0, lsl #2
    13fc:	e0803003 	add	r3, r0, r3
    1400:	e3a01031 	mov	r1, #49	; 0x31
    1404:	e7c21003 	strb	r1, [r2, r3]
						
					}
					return true;
    1408:	e3a00001 	mov	r0, #1
    140c:	e12fff1e 	bx	lr
			if(keyPressed == 'W') {
				int tempY = redCurrentY - 1;
				
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][redCurrentX] != '0' || redPathFound) { 
					redCurrentY = redCurrentY;
					return false;
    1410:	e3a00000 	mov	r0, #0
    1414:	e12fff1e 	bx	lr
    1418:	e3a00000 	mov	r0, #0
    141c:	e12fff1e 	bx	lr
    1420:	e3a00000 	mov	r0, #0
    1424:	e12fff1e 	bx	lr
				int tempX = redCurrentX - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[redCurrentY][tempX] != '0' || redPathFound) { 
					redCurrentX = redCurrentX;
					return false;
    1428:	e3a00000 	mov	r0, #0
    142c:	e12fff1e 	bx	lr
    1430:	e3a00000 	mov	r0, #0
    1434:	e12fff1e 	bx	lr
    1438:	e3a00000 	mov	r0, #0
    143c:	e12fff1e 	bx	lr
				int tempY = redCurrentY + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][redCurrentX] != '0' || redPathFound) { 
					redCurrentY = redCurrentY;
					return false;
    1440:	e3a00000 	mov	r0, #0
    1444:	e12fff1e 	bx	lr
    1448:	e3a00000 	mov	r0, #0
    144c:	e12fff1e 	bx	lr
    1450:	e3a00000 	mov	r0, #0
    1454:	e12fff1e 	bx	lr
				}
				
			} else {
				redCurrentX = redCurrentX;
				redCurrentY = redCurrentY;
				return false;
    1458:	e3a00000 	mov	r0, #0
    145c:	e12fff1e 	bx	lr
				int tempX = redCurrentX + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[redCurrentY][tempX] != '0' || redPathFound) { 
					redCurrentX = redCurrentX;
					return false;
    1460:	e3a00000 	mov	r0, #0
    1464:	e12fff1e 	bx	lr
    1468:	e3a00000 	mov	r0, #0
    146c:	e12fff1e 	bx	lr
    1470:	e3a00000 	mov	r0, #0
    1474:	e12fff1e 	bx	lr
				int tempY = greenCurrentY - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][greenCurrentX] != '0' || greenPathFound) { 
					greenCurrentY = greenCurrentY;
					return false;
    1478:	e3a00000 	mov	r0, #0
    147c:	e12fff1e 	bx	lr
    1480:	e3a00000 	mov	r0, #0
    1484:	e12fff1e 	bx	lr
    1488:	e3a00000 	mov	r0, #0
    148c:	e12fff1e 	bx	lr
				int tempX = greenCurrentX - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[greenCurrentY][tempX] != '0' || greenPathFound) { 
					greenCurrentX = greenCurrentX;
					return false;
    1490:	e3a00000 	mov	r0, #0
    1494:	e12fff1e 	bx	lr
    1498:	e3a00000 	mov	r0, #0
    149c:	e12fff1e 	bx	lr
    14a0:	e3a00000 	mov	r0, #0
    14a4:	e12fff1e 	bx	lr
				int tempY = greenCurrentY + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][greenCurrentX] != '0' || greenPathFound) { 
					greenCurrentY = greenCurrentY;
					return false;
    14a8:	e3a00000 	mov	r0, #0
    14ac:	e12fff1e 	bx	lr
    14b0:	e3a00000 	mov	r0, #0
    14b4:	e12fff1e 	bx	lr
    14b8:	e3a00000 	mov	r0, #0
    14bc:	e12fff1e 	bx	lr
				}
				
			} else {
				greenCurrentX = greenCurrentX;
				greenCurrentY = greenCurrentY;
				return false;
    14c0:	e3a00000 	mov	r0, #0
    14c4:	e12fff1e 	bx	lr
				int tempX = greenCurrentX + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[greenCurrentY][tempX] != '0' || greenPathFound) { 
					greenCurrentX = greenCurrentX;
					return false;
    14c8:	e3a00000 	mov	r0, #0
    14cc:	e12fff1e 	bx	lr
    14d0:	e3a00000 	mov	r0, #0
    14d4:	e12fff1e 	bx	lr
    14d8:	e3a00000 	mov	r0, #0
    14dc:	e12fff1e 	bx	lr
				int tempY = blueCurrentY - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][blueCurrentX] != '0' || bluePathFound) { 
					blueCurrentY = blueCurrentY;
					return false;
    14e0:	e3a00000 	mov	r0, #0
    14e4:	e12fff1e 	bx	lr
    14e8:	e3a00000 	mov	r0, #0
    14ec:	e12fff1e 	bx	lr
    14f0:	e3a00000 	mov	r0, #0
    14f4:	e12fff1e 	bx	lr
				int tempX = blueCurrentX - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[blueCurrentY][tempX] != '0' || bluePathFound) { 
					blueCurrentX = blueCurrentX;
					return false;
    14f8:	e3a00000 	mov	r0, #0
    14fc:	e12fff1e 	bx	lr
    1500:	e3a00000 	mov	r0, #0
    1504:	e12fff1e 	bx	lr
    1508:	e3a00000 	mov	r0, #0
    150c:	e12fff1e 	bx	lr
				int tempY = blueCurrentY + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][blueCurrentX] != '0' || bluePathFound) { 
					blueCurrentY = blueCurrentY;
					return false;
    1510:	e3a00000 	mov	r0, #0
    1514:	e12fff1e 	bx	lr
    1518:	e3a00000 	mov	r0, #0
    151c:	e12fff1e 	bx	lr
    1520:	e3a00000 	mov	r0, #0
    1524:	e12fff1e 	bx	lr
				}
				
			} else {
				blueCurrentX = blueCurrentX;
				blueCurrentY = blueCurrentY;
				return false;
    1528:	e3a00000 	mov	r0, #0
    152c:	e12fff1e 	bx	lr
				int tempX = blueCurrentX + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[blueCurrentY][tempX] != '0' || bluePathFound) { 
					blueCurrentX = blueCurrentX;
					return false;
    1530:	e3a00000 	mov	r0, #0
    1534:	e12fff1e 	bx	lr
    1538:	e3a00000 	mov	r0, #0
    153c:	e12fff1e 	bx	lr
    1540:	e3a00000 	mov	r0, #0
    1544:	e12fff1e 	bx	lr
				int tempY = yellowCurrentY - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][yellowCurrentX] != '0' || yellowPathFound) { 
					yellowCurrentY = yellowCurrentY;
					return false;
    1548:	e3a00000 	mov	r0, #0
    154c:	e12fff1e 	bx	lr
    1550:	e3a00000 	mov	r0, #0
    1554:	e12fff1e 	bx	lr
    1558:	e3a00000 	mov	r0, #0
    155c:	e12fff1e 	bx	lr
				int tempX = yellowCurrentX - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[yellowCurrentY][tempX] != '0' || yellowPathFound) { 
					yellowCurrentX = yellowCurrentX;
					return false;
    1560:	e3a00000 	mov	r0, #0
    1564:	e12fff1e 	bx	lr
    1568:	e3a00000 	mov	r0, #0
    156c:	e12fff1e 	bx	lr
    1570:	e3a00000 	mov	r0, #0
    1574:	e12fff1e 	bx	lr
				int tempY = yellowCurrentY + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][yellowCurrentX] != '0' || yellowPathFound) { 
					yellowCurrentY = yellowCurrentY;
					return false;
    1578:	e3a00000 	mov	r0, #0
    157c:	e12fff1e 	bx	lr
    1580:	e3a00000 	mov	r0, #0
    1584:	e12fff1e 	bx	lr
    1588:	e3a00000 	mov	r0, #0
    158c:	e12fff1e 	bx	lr
				}
				
			} else {
				yellowCurrentX = yellowCurrentX;
				yellowCurrentY = yellowCurrentY;
				return false;
    1590:	e3a00000 	mov	r0, #0
    1594:	e12fff1e 	bx	lr
				int tempX = yellowCurrentX + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[yellowCurrentY][tempX] != '0' || yellowPathFound) { 
					yellowCurrentX = yellowCurrentX;
					return false;
    1598:	e3a00000 	mov	r0, #0
    159c:	e12fff1e 	bx	lr
    15a0:	e3a00000 	mov	r0, #0
    15a4:	e12fff1e 	bx	lr
    15a8:	e3a00000 	mov	r0, #0
    15ac:	e12fff1e 	bx	lr
				orangeCurrentY = orangeCurrentY;
				return false;
			}
			
		} else {
			return false;
    15b0:	e3a00000 	mov	r0, #0
    15b4:	e12fff1e 	bx	lr
				int tempY = orangeCurrentY - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][orangeCurrentX] != '0' || orangePathFound) { 
					orangeCurrentY = orangeCurrentY;
					return false;
    15b8:	e3a00000 	mov	r0, #0
    15bc:	e12fff1e 	bx	lr
    15c0:	e3a00000 	mov	r0, #0
    15c4:	e12fff1e 	bx	lr
    15c8:	e3a00000 	mov	r0, #0
    15cc:	e12fff1e 	bx	lr
				int tempX = orangeCurrentX - 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[orangeCurrentY][tempX] != '0' || orangePathFound) { 
					orangeCurrentX = orangeCurrentX;
					return false;
    15d0:	e3a00000 	mov	r0, #0
    15d4:	e12fff1e 	bx	lr
    15d8:	e3a00000 	mov	r0, #0
    15dc:	e12fff1e 	bx	lr
    15e0:	e3a00000 	mov	r0, #0
    15e4:	e12fff1e 	bx	lr
				int tempY = orangeCurrentY + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempY < 0 || tempY > 4 || gameBoard[tempY][orangeCurrentX] != '0' || orangePathFound) { 
					orangeCurrentY = orangeCurrentY;
					return false;
    15e8:	e3a00000 	mov	r0, #0
    15ec:	e12fff1e 	bx	lr
    15f0:	e3a00000 	mov	r0, #0
    15f4:	e12fff1e 	bx	lr
    15f8:	e3a00000 	mov	r0, #0
    15fc:	e12fff1e 	bx	lr
				}
				
			} else {
				orangeCurrentX = orangeCurrentX;
				orangeCurrentY = orangeCurrentY;
				return false;
    1600:	e3a00000 	mov	r0, #0
    1604:	e12fff1e 	bx	lr
				int tempX = orangeCurrentX + 1;
				
				//out of bounds, trying to move to an already occupied spot, or game over: don't change position
				if(tempX < 0 || tempX > 4 || gameBoard[orangeCurrentY][tempX] != '0' || orangePathFound) { 
					orangeCurrentX = orangeCurrentX;
					return false;
    1608:	e3a00000 	mov	r0, #0
    160c:	e12fff1e 	bx	lr
    1610:	e3a00000 	mov	r0, #0
    1614:	e12fff1e 	bx	lr
    1618:	e3a00000 	mov	r0, #0
		}
		
		//game is over if all of these are true
		//gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
	//}
}
    161c:	e12fff1e 	bx	lr

00001620 <animate_line>:
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

// code not shown for clear_screen() and draw_line() subroutines
// takes in argument for the box position on the board, the WASD direction and the U16 color.
void animate_line(int boardX, int boardY, int direction, short int line_color, short int color, int board[][COLS]) {
    1620:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1624:	e24dd014 	sub	sp, sp, #20
    1628:	e1a09000 	mov	r9, r0
    162c:	e1a0a001 	mov	r10, r1
    1630:	e1a07003 	mov	r7, r3
    1634:	e1dd33f8 	ldrsh	r3, [sp, #56]	; 0x38
    1638:	e58d300c 	str	r3, [sp, #12]

    //convert board position onto x,y coordinates on the screen
    int startX = boardX * 64;
    163c:	e1a04300 	lsl	r4, r0, #6
    int startY = boardY * 48;
    1640:	e081b081 	add	r11, r1, r1, lsl #1
    1644:	e1a0b20b 	lsl	r11, r11, #4
    1648:	e1a0500b 	mov	r5, r11

    int endXRIGHT = startX + 64;
    164c:	e2846040 	add	r6, r4, #64	; 0x40
    int endYUP = startY + 48;
    1650:	e28b8030 	add	r8, r11, #48	; 0x30
    int y1 = 0;  // ending y
	
	bool isLegal;

    // W UPWARDS
    if (direction == 1) {
    1654:	e3520001 	cmp	r2, #1
    1658:	1a000024 	bne	16f0 <animate_line+0xd0>
		isLegal = isLegalMove(color_select, keyPressed);
    165c:	e3023e14 	movw	r3, #11796	; 0x2e14
    1660:	e3403000 	movt	r3, #0
    1664:	e5930024 	ldr	r0, [r3, #36]	; 0x24
    1668:	e5d31022 	ldrb	r1, [r3, #34]	; 0x22
    166c:	ebfffc8b 	bl	8a0 <isLegalMove>
		
		if(isLegal) {
    1670:	e3500000 	cmp	r0, #0
    1674:	0a000094 	beq	18cc <animate_line+0x2ac>
			volatile int* RLEDs = (int*) 0xFF200000;
			int LED = 0xFFFF;
			*RLEDs = LED;
    1678:	e3a03000 	mov	r3, #0
    167c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1680:	e30f2fff 	movw	r2, #65535	; 0xffff
    1684:	e5832000 	str	r2, [r3]
			//printf("legal move"); //testing
			x0 = startX;
			x1 = endXRIGHT;
			y0 = startY;
			y1 = startY;
			for (startY = boardY * 48; startY < endYUP; startY++) {
    1688:	e15b0008 	cmp	r11, r8
    168c:	aa00000a 	bge	16bc <animate_line+0x9c>
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

// code not shown for clear_screen() and draw_line() subroutines
// takes in argument for the box position on the board, the WASD direction and the U16 color.
void animate_line(int boardX, int boardY, int direction, short int line_color, short int color, int board[][COLS]) {
    1690:	e24b5030 	sub	r5, r11, #48	; 0x30
			x1 = endXRIGHT;
			y0 = startY;
			y1 = startY;
			for (startY = boardY * 48; startY < endYUP; startY++) {
				// Horizontal Line
				y0 -= direction;
    1694:	e24bb001 	sub	r11, r11, #1
				y1 -= direction;
				draw_line(x0, x1, y0, y1, line_color);
    1698:	e58d7000 	str	r7, [sp]
    169c:	e1a00004 	mov	r0, r4
    16a0:	e1a01006 	mov	r1, r6
    16a4:	e1a0200b 	mov	r2, r11
    16a8:	e1a0300b 	mov	r3, r11
    16ac:	ebfffb98 	bl	514 <draw_line>
				wait_for_vsync();
    16b0:	ebfffb75 	bl	48c <wait_for_vsync>
			//printf("legal move"); //testing
			x0 = startX;
			x1 = endXRIGHT;
			y0 = startY;
			y1 = startY;
			for (startY = boardY * 48; startY < endYUP; startY++) {
    16b4:	e15b0005 	cmp	r11, r5
    16b8:	1afffff5 	bne	1694 <animate_line+0x74>
				draw_line(x0, x1, y0, y1, line_color);
				wait_for_vsync();
				//draw_line(x0, x1, y0, y1, 0x0000);
			}
			//fill_color(boardX, boardY, line_color);
			if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
    16bc:	e35a0005 	cmp	r10, #5
    16c0:	d3590005 	cmple	r9, #5
    16c4:	ca000080 	bgt	18cc <animate_line+0x2ac>
    16c8:	e35a0000 	cmp	r10, #0
    16cc:	a3590000 	cmpge	r9, #0
    16d0:	ba00007d 	blt	18cc <animate_line+0x2ac>
				board[boardX][boardY - 1] = color;
    16d4:	e0899109 	add	r9, r9, r9, lsl #2
    16d8:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    16dc:	e0823109 	add	r3, r2, r9, lsl #2
    16e0:	e24aa001 	sub	r10, r10, #1
    16e4:	e59d200c 	ldr	r2, [sp, #12]
    16e8:	e783210a 	str	r2, [r3, r10, lsl #2]
    16ec:	ea000076 	b	18cc <animate_line+0x2ac>
			}
		}
        
    }
    // A LEFT
    else if (direction == 2) {
    16f0:	e3520002 	cmp	r2, #2
    16f4:	1a000026 	bne	1794 <animate_line+0x174>
		isLegal = isLegalMove(color_select, keyPressed);
    16f8:	e3023e14 	movw	r3, #11796	; 0x2e14
    16fc:	e3403000 	movt	r3, #0
    1700:	e5930024 	ldr	r0, [r3, #36]	; 0x24
    1704:	e5d31022 	ldrb	r1, [r3, #34]	; 0x22
    1708:	ebfffc64 	bl	8a0 <isLegalMove>
		
		if(isLegal) {
    170c:	e3500000 	cmp	r0, #0
    1710:	0a00006d 	beq	18cc <animate_line+0x2ac>
    int startX = boardX * 64;
    int startY = boardY * 48;

    int endXRIGHT = startX + 64;
    int endYUP = startY + 48;
    int endXLEFT = startX - 64;
    1714:	e244b040 	sub	r11, r4, #64	; 0x40
		isLegal = isLegalMove(color_select, keyPressed);
		
		if(isLegal) {
			volatile int* RLEDs = (int*) 0xFF200000;
			int LED = 0xFFFF;
			*RLEDs = LED;
    1718:	e3a03000 	mov	r3, #0
    171c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1720:	e30f2fff 	movw	r2, #65535	; 0xffff
    1724:	e5832000 	str	r2, [r3]
			//printf("legal move"); //testing
			x0 = startX;
			x1 = startX;
			y0 = startY;
			y1 = endYUP; // needsd checking
			for (startX = boardX * 64; startX > endXLEFT; startX--) {
    1728:	e154000b 	cmp	r4, r11
    172c:	da00000b 	ble	1760 <animate_line+0x140>
		if(isLegal) {
			volatile int* RLEDs = (int*) 0xFF200000;
			int LED = 0xFFFF;
			*RLEDs = LED;
			//printf("legal move"); //testing
			x0 = startX;
    1730:	e1a06004 	mov	r6, r4
			x1 = startX;
			y0 = startY;
			y1 = endYUP; // needsd checking
			for (startX = boardX * 64; startX > endXLEFT; startX--) {
				x0 -= direction;
    1734:	e2466002 	sub	r6, r6, #2
				x1 -= direction;
				draw_line(x0, x1, y0, y1, line_color);
    1738:	e58d7000 	str	r7, [sp]
    173c:	e1a00006 	mov	r0, r6
    1740:	e1a01006 	mov	r1, r6
    1744:	e1a02005 	mov	r2, r5
    1748:	e1a03008 	mov	r3, r8
    174c:	ebfffb70 	bl	514 <draw_line>
				wait_for_vsync();
    1750:	ebfffb4d 	bl	48c <wait_for_vsync>
			//printf("legal move"); //testing
			x0 = startX;
			x1 = startX;
			y0 = startY;
			y1 = endYUP; // needsd checking
			for (startX = boardX * 64; startX > endXLEFT; startX--) {
    1754:	e2444001 	sub	r4, r4, #1
    1758:	e15b0004 	cmp	r11, r4
    175c:	bafffff4 	blt	1734 <animate_line+0x114>
				x1 -= direction;
				draw_line(x0, x1, y0, y1, line_color);
				wait_for_vsync();
				//draw_line(x0, x1, y0, y1, 0x0000);
			}
			if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
    1760:	e35a0005 	cmp	r10, #5
    1764:	d3590005 	cmple	r9, #5
    1768:	ca000057 	bgt	18cc <animate_line+0x2ac>
    176c:	e35a0000 	cmp	r10, #0
    1770:	a3590000 	cmpge	r9, #0
    1774:	ba000054 	blt	18cc <animate_line+0x2ac>
				board[boardX - 1][boardY] = color;
    1778:	e2499001 	sub	r9, r9, #1
    177c:	e0899109 	add	r9, r9, r9, lsl #2
    1780:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    1784:	e0823109 	add	r3, r2, r9, lsl #2
    1788:	e59d200c 	ldr	r2, [sp, #12]
    178c:	e783210a 	str	r2, [r3, r10, lsl #2]
    1790:	ea00004d 	b	18cc <animate_line+0x2ac>
		}
		
        
    }
    // S DOWNWARDS
    else if (direction == 3) {
    1794:	e3520003 	cmp	r2, #3
    1798:	1a000025 	bne	1834 <animate_line+0x214>
		isLegal = isLegalMove(color_select, keyPressed);
    179c:	e3023e14 	movw	r3, #11796	; 0x2e14
    17a0:	e3403000 	movt	r3, #0
    17a4:	e5930024 	ldr	r0, [r3, #36]	; 0x24
    17a8:	e5d31022 	ldrb	r1, [r3, #34]	; 0x22
    17ac:	ebfffc3b 	bl	8a0 <isLegalMove>
		
		if(isLegal) {
    17b0:	e3500000 	cmp	r0, #0
    17b4:	0a000044 	beq	18cc <animate_line+0x2ac>
    int startY = boardY * 48;

    int endXRIGHT = startX + 64;
    int endYUP = startY + 48;
    int endXLEFT = startX - 64;
    int endYDOWN = startY - 48;
    17b8:	e24b8030 	sub	r8, r11, #48	; 0x30
		isLegal = isLegalMove(color_select, keyPressed);
		
		if(isLegal) {
			volatile int* RLEDs = (int*) 0xFF200000;
			int LED = 0xFFFF;
			*RLEDs = LED;
    17bc:	e3a03000 	mov	r3, #0
    17c0:	e34f3f20 	movt	r3, #65312	; 0xff20
    17c4:	e30f2fff 	movw	r2, #65535	; 0xffff
    17c8:	e5832000 	str	r2, [r3]
			//printf("legal move"); //testing
			x0 = startX;
			x1 = endXRIGHT;
			y0 = startY;
			y1 = startY;
			for (startY = boardY * 48; startY > endYDOWN; startY--) {
    17cc:	e15b0008 	cmp	r11, r8
    17d0:	da00000a 	ble	1800 <animate_line+0x1e0>
				y0 += direction;
    17d4:	e28bb003 	add	r11, r11, #3
				y1 += direction;
				draw_line(x0, x1, y0, y1, line_color);
    17d8:	e58d7000 	str	r7, [sp]
    17dc:	e1a00004 	mov	r0, r4
    17e0:	e1a01006 	mov	r1, r6
    17e4:	e1a0200b 	mov	r2, r11
    17e8:	e1a0300b 	mov	r3, r11
    17ec:	ebfffb48 	bl	514 <draw_line>
				wait_for_vsync();
    17f0:	ebfffb25 	bl	48c <wait_for_vsync>
			//printf("legal move"); //testing
			x0 = startX;
			x1 = endXRIGHT;
			y0 = startY;
			y1 = startY;
			for (startY = boardY * 48; startY > endYDOWN; startY--) {
    17f4:	e2455001 	sub	r5, r5, #1
    17f8:	e1580005 	cmp	r8, r5
    17fc:	bafffff4 	blt	17d4 <animate_line+0x1b4>
				y1 += direction;
				draw_line(x0, x1, y0, y1, line_color);
				wait_for_vsync();
				//draw_line(x0, x1, y0, y1, 0x0000);
			}
			if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
    1800:	e35a0005 	cmp	r10, #5
    1804:	d3590005 	cmple	r9, #5
    1808:	ca00002f 	bgt	18cc <animate_line+0x2ac>
    180c:	e35a0000 	cmp	r10, #0
    1810:	a3590000 	cmpge	r9, #0
    1814:	ba00002c 	blt	18cc <animate_line+0x2ac>
				board[boardX][boardY + 1] = color;
    1818:	e0899109 	add	r9, r9, r9, lsl #2
    181c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    1820:	e0823109 	add	r3, r2, r9, lsl #2
    1824:	e28aa001 	add	r10, r10, #1
    1828:	e59d200c 	ldr	r2, [sp, #12]
    182c:	e783210a 	str	r2, [r3, r10, lsl #2]
    1830:	ea000025 	b	18cc <animate_line+0x2ac>
			}
		}
    }
    // D RIGHTWARDS
    else if (direction == 4) {
    1834:	e3520004 	cmp	r2, #4
    1838:	1a000023 	bne	18cc <animate_line+0x2ac>
		isLegal = isLegalMove(color_select, keyPressed);
    183c:	e3023e14 	movw	r3, #11796	; 0x2e14
    1840:	e3403000 	movt	r3, #0
    1844:	e5930024 	ldr	r0, [r3, #36]	; 0x24
    1848:	e5d31022 	ldrb	r1, [r3, #34]	; 0x22
    184c:	ebfffc13 	bl	8a0 <isLegalMove>
		
		if(isLegal) {
    1850:	e3500000 	cmp	r0, #0
    1854:	0a00001c 	beq	18cc <animate_line+0x2ac>
			volatile int* RLEDs = (int*) 0xFF200000;
			int LED = 0xFFFF;
			*RLEDs = LED;
    1858:	e3a03000 	mov	r3, #0
    185c:	e34f3f20 	movt	r3, #65312	; 0xff20
    1860:	e30f2fff 	movw	r2, #65535	; 0xffff
    1864:	e5832000 	str	r2, [r3]
			//printf("legal move"); //testing
			x0 = startX;
			x1 = x0;
			y0 = startY;
			y1 = endYUP; // needsd checking
			for (startX = boardX * 64; startX < endXRIGHT; startX++) {
    1868:	e1540006 	cmp	r4, r6
    186c:	aa00000a 	bge	189c <animate_line+0x27c>
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

// code not shown for clear_screen() and draw_line() subroutines
// takes in argument for the box position on the board, the WASD direction and the U16 color.
void animate_line(int boardX, int boardY, int direction, short int line_color, short int color, int board[][COLS]) {
    1870:	e2846c01 	add	r6, r4, #256	; 0x100
			x0 = startX;
			x1 = x0;
			y0 = startY;
			y1 = endYUP; // needsd checking
			for (startX = boardX * 64; startX < endXRIGHT; startX++) {
				x0 += direction;
    1874:	e2844004 	add	r4, r4, #4
				x1 += direction;
				draw_line(x0, x1, y0, y1, line_color);
    1878:	e58d7000 	str	r7, [sp]
    187c:	e1a00004 	mov	r0, r4
    1880:	e1a01004 	mov	r1, r4
    1884:	e1a02005 	mov	r2, r5
    1888:	e1a03008 	mov	r3, r8
    188c:	ebfffb20 	bl	514 <draw_line>
				wait_for_vsync();
    1890:	ebfffafd 	bl	48c <wait_for_vsync>
			//printf("legal move"); //testing
			x0 = startX;
			x1 = x0;
			y0 = startY;
			y1 = endYUP; // needsd checking
			for (startX = boardX * 64; startX < endXRIGHT; startX++) {
    1894:	e1540006 	cmp	r4, r6
    1898:	1afffff5 	bne	1874 <animate_line+0x254>
				x1 += direction;
				draw_line(x0, x1, y0, y1, line_color);
				wait_for_vsync();
				//draw_line(x0, x1, y0, y1, 0x0000);
			}
			if (boardX <= 5 && boardY <= 5 && boardX >= 0 && boardY >= 0) {
    189c:	e35a0005 	cmp	r10, #5
    18a0:	d3590005 	cmple	r9, #5
    18a4:	ca000008 	bgt	18cc <animate_line+0x2ac>
    18a8:	e35a0000 	cmp	r10, #0
    18ac:	a3590000 	cmpge	r9, #0
    18b0:	ba000005 	blt	18cc <animate_line+0x2ac>
				board[boardX + 1][boardY] = color;
    18b4:	e2899001 	add	r9, r9, #1
    18b8:	e0899109 	add	r9, r9, r9, lsl #2
    18bc:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
    18c0:	e0823109 	add	r3, r2, r9, lsl #2
    18c4:	e59d200c 	ldr	r2, [sp, #12]
    18c8:	e783210a 	str	r2, [r3, r10, lsl #2]
			}
		}
    }
}
    18cc:	e28dd014 	add	sp, sp, #20
    18d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, pc}

000018d4 <main>:
		}
	}

}

int main(void) {
    18d4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    18d8:	e24dd014 	sub	sp, sp, #20

    byte1        = 0;
    18dc:	e3024e14 	movw	r4, #11796	; 0x2e14
    18e0:	e3404000 	movt	r4, #0
    18e4:	e3a03000 	mov	r3, #0
    18e8:	e5c43021 	strb	r3, [r4, #33]	; 0x21
    byte2        = 0;
    18ec:	e5c43020 	strb	r3, [r4, #32]
    data         = 0; // used to hold PS/2 data
    18f0:	e5c43044 	strb	r3, [r4, #68]	; 0x44
    keyPressed   = "U";
    18f4:	e3023940 	movw	r3, #10560	; 0x2940
    18f8:	e3403000 	movt	r3, #0
    18fc:	e5c43022 	strb	r3, [r4, #34]	; 0x22

	//function calls to enable interrupts in ARM and PS/2 keyboard
	disable_A9_interrupts(); // disable interrupts in the A9 processor
    1900:	ebfffb4a 	bl	630 <disable_A9_interrupts>
	set_A9_IRQ_stack(); // initialize the stack pointer for IRQ mode
    1904:	ebfffbde 	bl	884 <set_A9_IRQ_stack>
	config_GIC(); // configure the general interrupt controller
    1908:	ebfffb58 	bl	670 <config_GIC>
	config_PS2s(); // configure PS/2 to generate interrupts
    190c:	ebfffb6b 	bl	6c0 <config_PS2s>
	config_KEYs(); // configure PS/2 to generate interrupts
    1910:	ebfffb65 	bl	6ac <config_KEYs>

	enable_A9_interrupts(); // enable interrupts in the A9 processor
    1914:	ebfffb42 	bl	624 <enable_A9_interrupts>
    /* Read location of the pixel buffer from the pixel buffer controller */
    //pixel_buffer_start = *pixel_ctrl_ptr;
    int N = 4; // have N declared objects
    // board of arrays:
    
    initializeBoard(board);
    1918:	e2840048 	add	r0, r4, #72	; 0x48
    191c:	ebfffa4e 	bl	25c <initializeBoard>
    // }

    //

    /* set front pixel buffer to start of FPGA On-chip memory */
    *(pixel_ctrl_ptr + 1) = 0xC8000000; // first store the address in the
    1920:	e3035fff 	movw	r5, #16383	; 0x3fff
    1924:	e34f5f20 	movt	r5, #65312	; 0xff20
    1928:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
    192c:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
                                        // back buffer
    /* now, swap the front/back buffers, to set the front buffer location */
    wait_for_vsync();
    1930:	ebfffad5 	bl	48c <wait_for_vsync>
    /* initialize a pointer to the pixel buffer, used by drawing functions */
    pixel_buffer_start = *pixel_ctrl_ptr;
    1934:	e5153fdf 	ldr	r3, [r5, #-4063]	; 0xfffff021
    1938:	e584301c 	str	r3, [r4, #28]
    clear_screen(); // pixel_buffer_start points to the pixel buffer
    193c:	ebfffadf 	bl	4c0 <clear_screen>

    /* set back pixel buffer to start of SDRAM memory */
    *(pixel_ctrl_ptr + 1) = 0xC0000000;
    1940:	e3a03103 	mov	r3, #-1073741824	; 0xc0000000
    1944:	e5053fdb 	str	r3, [r5, #-4059]	; 0xfffff025
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    1948:	e5153fdb 	ldr	r3, [r5, #-4059]	; 0xfffff025
    194c:	e584301c 	str	r3, [r4, #28]
    int row = 0;
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
    1950:	e3a07000 	mov	r7, #0
		}
	}

}

int main(void) {
    1954:	e1a08004 	mov	r8, r4
    1958:	e2849048 	add	r9, r4, #72	; 0x48
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, ORANGE_U16);
    195c:	e30f2be0 	movw	r2, #64480	; 0xfbe0
    1960:	e34f2fff 	movt	r2, #65535	; 0xffff
    1964:	e58d2008 	str	r2, [sp, #8]
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, RED_U16);
    1968:	e3a0bb3e 	mov	r11, #63488	; 0xf800
    196c:	e34fbfff 	movt	r11, #65535	; 0xffff
            }

        }

       wait_for_vsync(); // swap front and back buffers on VGA vertical sync
       pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    1970:	e3033fff 	movw	r3, #16383	; 0x3fff
    1974:	e34f3f20 	movt	r3, #65312	; 0xff20
    1978:	e58d300c 	str	r3, [sp, #12]
    pixel_buffer_start = *(pixel_ctrl_ptr + 1); // we draw on the back buffer
    //clear_screen();
    //coloring a square (testing code for now)

    while (1) {
    clear_screen();
    197c:	ebfffacf 	bl	4c0 <clear_screen>
    int row = 0;
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
    1980:	e1a06007 	mov	r6, r7
    1984:	ea000028 	b	1a2c <main+0x158>
        for (col = 0; col < COLS; col++) {
            if (board[row][col] == RED) {
    1988:	e5b53004 	ldr	r3, [r5, #4]!
    198c:	e3530001 	cmp	r3, #1
    1990:	1a000004 	bne	19a8 <main+0xd4>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, RED_U16);
    1994:	e1a00006 	mov	r0, r6
    1998:	e1a01004 	mov	r1, r4
    199c:	e1a0200b 	mov	r2, r11
    19a0:	ebfffaa0 	bl	428 <fill_color>
    19a4:	ea00001a 	b	1a14 <main+0x140>
            }

            else if (board[row][col] == GREEN) {
    19a8:	e3530002 	cmp	r3, #2
    19ac:	1a000004 	bne	19c4 <main+0xf0>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, GREEN_U16);
    19b0:	e1a00006 	mov	r0, r6
    19b4:	e1a01004 	mov	r1, r4
    19b8:	e1a0200a 	mov	r2, r10
    19bc:	ebfffa99 	bl	428 <fill_color>
    19c0:	ea000013 	b	1a14 <main+0x140>
            }

            else if (board[row][col] == BLUE) {
    19c4:	e3530003 	cmp	r3, #3
    19c8:	1a000004 	bne	19e0 <main+0x10c>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, BLUE_U16);
    19cc:	e1a00006 	mov	r0, r6
    19d0:	e1a01004 	mov	r1, r4
    19d4:	e3a0201f 	mov	r2, #31
    19d8:	ebfffa92 	bl	428 <fill_color>
    19dc:	ea00000c 	b	1a14 <main+0x140>
            }

            else if (board[row][col] == YELLOW) {
    19e0:	e3530004 	cmp	r3, #4
    19e4:	1a000004 	bne	19fc <main+0x128>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, YELLOW_U16);
    19e8:	e1a00006 	mov	r0, r6
    19ec:	e1a01004 	mov	r1, r4
    19f0:	e3e0201f 	mvn	r2, #31
    19f4:	ebfffa8b 	bl	428 <fill_color>
    19f8:	ea000005 	b	1a14 <main+0x140>
            }

            else if (board[row][col] == ORANGE) {
    19fc:	e3530005 	cmp	r3, #5
    1a00:	1a000003 	bne	1a14 <main+0x140>
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, ORANGE_U16);
    1a04:	e1a00006 	mov	r0, r6
    1a08:	e1a01004 	mov	r1, r4
    1a0c:	e59d2008 	ldr	r2, [sp, #8]
    1a10:	ebfffa84 	bl	428 <fill_color>
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
        for (col = 0; col < COLS; col++) {
    1a14:	e2844001 	add	r4, r4, #1
    1a18:	e3540005 	cmp	r4, #5
    1a1c:	1affffd9 	bne	1988 <main+0xb4>
    int row = 0;
    int col = 0;
    int direction = 0; // 1: UP, 2: LEFT, 3: DOWN, 4: RIGHT

    //this doesn't want to work:
    for (row = 0; row < ROWS; row++) {
    1a20:	e2866001 	add	r6, r6, #1
    1a24:	e3560005 	cmp	r6, #5
    1a28:	0a000005 	beq	1a44 <main+0x170>
		}
	}

}

int main(void) {
    1a2c:	e0865106 	add	r5, r6, r6, lsl #2
    1a30:	e0895105 	add	r5, r9, r5, lsl #2
    1a34:	e2455004 	sub	r5, r5, #4
    1a38:	e1a04007 	mov	r4, r7
                // printf("%d", board[row][col]);
                // printf("\n");
                // printf("board position: \n");
                // printf("%d ", row);
                // printf("%d \n", col);
                fill_color(row, col, GREEN_U16);
    1a3c:	e3a0ae7e 	mov	r10, #2016	; 0x7e0
    1a40:	eaffffd0 	b	1988 <main+0xb4>

        // Background
        // Horizontal Line

        // UNCOMMENT THE IF STATMENT TO TEST THIS
            draw_line(64, 64, 0, 239, WHITE_U16);
    1a44:	e3e04000 	mvn	r4, #0
    1a48:	e58d4000 	str	r4, [sp]
    1a4c:	e3a00040 	mov	r0, #64	; 0x40
    1a50:	e1a01000 	mov	r1, r0
    1a54:	e1a02007 	mov	r2, r7
    1a58:	e3a030ef 	mov	r3, #239	; 0xef
    1a5c:	ebfffaac 	bl	514 <draw_line>
            draw_line(128, 128, 0, 239, WHITE_U16);
    1a60:	e58d4000 	str	r4, [sp]
    1a64:	e3a00080 	mov	r0, #128	; 0x80
    1a68:	e1a01000 	mov	r1, r0
    1a6c:	e1a02007 	mov	r2, r7
    1a70:	e3a030ef 	mov	r3, #239	; 0xef
    1a74:	ebfffaa6 	bl	514 <draw_line>
            draw_line(192, 192, 0, 239, WHITE_U16);
    1a78:	e58d4000 	str	r4, [sp]
    1a7c:	e3a000c0 	mov	r0, #192	; 0xc0
    1a80:	e1a01000 	mov	r1, r0
    1a84:	e1a02007 	mov	r2, r7
    1a88:	e3a030ef 	mov	r3, #239	; 0xef
    1a8c:	ebfffaa0 	bl	514 <draw_line>
            draw_line(256, 256, 0, 239, WHITE_U16);
    1a90:	e58d4000 	str	r4, [sp]
    1a94:	e3a00c01 	mov	r0, #256	; 0x100
    1a98:	e1a01000 	mov	r1, r0
    1a9c:	e1a02007 	mov	r2, r7
    1aa0:	e3a030ef 	mov	r3, #239	; 0xef
    1aa4:	ebfffa9a 	bl	514 <draw_line>
            //Vertical Line
            draw_line(0, 319, 48, 48, WHITE_U16);
    1aa8:	e58d4000 	str	r4, [sp]
    1aac:	e1a00007 	mov	r0, r7
    1ab0:	e300113f 	movw	r1, #319	; 0x13f
    1ab4:	e3a02030 	mov	r2, #48	; 0x30
    1ab8:	e1a03002 	mov	r3, r2
    1abc:	ebfffa94 	bl	514 <draw_line>
            draw_line(0, 319, 96, 96, WHITE_U16);
    1ac0:	e58d4000 	str	r4, [sp]
    1ac4:	e1a00007 	mov	r0, r7
    1ac8:	e300113f 	movw	r1, #319	; 0x13f
    1acc:	e3a02060 	mov	r2, #96	; 0x60
    1ad0:	e1a03002 	mov	r3, r2
    1ad4:	ebfffa8e 	bl	514 <draw_line>
            draw_line(0, 319, 144, 144, WHITE_U16);
    1ad8:	e58d4000 	str	r4, [sp]
    1adc:	e1a00007 	mov	r0, r7
    1ae0:	e300113f 	movw	r1, #319	; 0x13f
    1ae4:	e3a02090 	mov	r2, #144	; 0x90
    1ae8:	e1a03002 	mov	r3, r2
    1aec:	ebfffa88 	bl	514 <draw_line>
            draw_line(0, 319, 192, 192, WHITE_U16);
    1af0:	e58d4000 	str	r4, [sp]
    1af4:	e1a00007 	mov	r0, r7
    1af8:	e300113f 	movw	r1, #319	; 0x13f
    1afc:	e3a020c0 	mov	r2, #192	; 0xc0
    1b00:	e1a03002 	mov	r3, r2
    1b04:	ebfffa82 	bl	514 <draw_line>
         //     // *RLEDs = LED;
         // }


        // first select the color
        if (keyPressed == '1') {
    1b08:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b0c:	e3530031 	cmp	r3, #49	; 0x31
            keyRed = true;
    1b10:	03a03001 	moveq	r3, #1
    1b14:	05c830ac 	strbeq	r3, [r8, #172]	; 0xac
         //     // *RLEDs = LED;
         // }


        // first select the color
        if (keyPressed == '1') {
    1b18:	0a000015 	beq	1b74 <main+0x2a0>
            keyRed = true;
        }

        else if (keyPressed == '2') {
    1b1c:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b20:	e3530032 	cmp	r3, #50	; 0x32
            keyGreen = true;
    1b24:	03a03001 	moveq	r3, #1
    1b28:	05c830ad 	strbeq	r3, [r8, #173]	; 0xad
        // first select the color
        if (keyPressed == '1') {
            keyRed = true;
        }

        else if (keyPressed == '2') {
    1b2c:	0a00000d 	beq	1b68 <main+0x294>
            keyGreen = true;
        }

        else if (keyPressed == '3') {
    1b30:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b34:	e3530033 	cmp	r3, #51	; 0x33
            keyBlue = true;
    1b38:	03a03001 	moveq	r3, #1
    1b3c:	05c830ae 	strbeq	r3, [r8, #174]	; 0xae

        else if (keyPressed == '2') {
            keyGreen = true;
        }

        else if (keyPressed == '3') {
    1b40:	0a000008 	beq	1b68 <main+0x294>
            keyBlue = true;
        }

        else if (keyPressed == '4') {
    1b44:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b48:	e3530034 	cmp	r3, #52	; 0x34
            keyYellow = true;
    1b4c:	03a03001 	moveq	r3, #1
    1b50:	05c830af 	strbeq	r3, [r8, #175]	; 0xaf

        else if (keyPressed == '3') {
            keyBlue = true;
        }

        else if (keyPressed == '4') {
    1b54:	0a000003 	beq	1b68 <main+0x294>
            keyYellow = true;
        }

        else if (keyPressed == '5') {
    1b58:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b5c:	e3530035 	cmp	r3, #53	; 0x35
            keyOrange = true;
    1b60:	03a03001 	moveq	r3, #1
    1b64:	05c830b0 	strbeq	r3, [r8, #176]	; 0xb0
        // actual key presses:

        int x = 0;
        int y = 0;

        if (keyRed && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
    1b68:	e5d830ac 	ldrb	r3, [r8, #172]	; 0xac
    1b6c:	e3530000 	cmp	r3, #0
    1b70:	0a000044 	beq	1c88 <main+0x3b4>
    1b74:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b78:	e3530057 	cmp	r3, #87	; 0x57
    1b7c:	0a000008 	beq	1ba4 <main+0x2d0>
    1b80:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b84:	e3530041 	cmp	r3, #65	; 0x41
    1b88:	0a000005 	beq	1ba4 <main+0x2d0>
    1b8c:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b90:	e3530053 	cmp	r3, #83	; 0x53
    1b94:	0a000002 	beq	1ba4 <main+0x2d0>
    1b98:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1b9c:	e3530044 	cmp	r3, #68	; 0x44
    1ba0:	1a000038 	bne	1c88 <main+0x3b4>
            // turn off all other flags
            keyGreen = false;
    1ba4:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
            keyBlue = false;
    1ba8:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
            keyYellow = false;
    1bac:	e5c870af 	strb	r7, [r8, #175]	; 0xaf
            keyOrange = false;
    1bb0:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0

            // HARDCODED FOR NOW:
            x = 0;
            y = 0;

            currX = x;
    1bb4:	e58870b4 	str	r7, [r8, #180]	; 0xb4
            currY = y;
    1bb8:	e58870b8 	str	r7, [r8, #184]	; 0xb8

            // animate the line:
            if (keyPressed == 'W') {
    1bbc:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1bc0:	e3530057 	cmp	r3, #87	; 0x57
    1bc4:	1a000008 	bne	1bec <main+0x318>
                direction  = 1;
                animate_line(x, y, direction, RED_U16, RED, board);
    1bc8:	e3a02001 	mov	r2, #1
    1bcc:	e58d2000 	str	r2, [sp]
    1bd0:	e58d9004 	str	r9, [sp, #4]
    1bd4:	e1a00007 	mov	r0, r7
    1bd8:	e1a01007 	mov	r1, r7
    1bdc:	e1a0300b 	mov	r3, r11
    1be0:	ebfffe8e 	bl	1620 <animate_line>
                keyRed = false; // turn off the flag
    1be4:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
    1be8:	ea000149 	b	2114 <main+0x840>
            } else if (keyPressed == 'A') {
    1bec:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1bf0:	e3530041 	cmp	r3, #65	; 0x41
    1bf4:	1a000009 	bne	1c20 <main+0x34c>
                direction  = 2;
                animate_line(x, y, direction, RED_U16, RED, board);
    1bf8:	e3a03001 	mov	r3, #1
    1bfc:	e58d3000 	str	r3, [sp]
    1c00:	e58d9004 	str	r9, [sp, #4]
    1c04:	e1a00007 	mov	r0, r7
    1c08:	e1a01007 	mov	r1, r7
    1c0c:	e3a02002 	mov	r2, #2
    1c10:	e1a0300b 	mov	r3, r11
    1c14:	ebfffe81 	bl	1620 <animate_line>
                keyRed = false; // turn off the flag
    1c18:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
    1c1c:	ea00013c 	b	2114 <main+0x840>
            } else if (keyPressed == 'S') {
    1c20:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1c24:	e3530053 	cmp	r3, #83	; 0x53
    1c28:	1a000009 	bne	1c54 <main+0x380>
                direction  = 3;
                animate_line(x, y, direction, RED_U16, RED, board);
    1c2c:	e3a03001 	mov	r3, #1
    1c30:	e58d3000 	str	r3, [sp]
    1c34:	e58d9004 	str	r9, [sp, #4]
    1c38:	e1a00007 	mov	r0, r7
    1c3c:	e1a01007 	mov	r1, r7
    1c40:	e3a02003 	mov	r2, #3
    1c44:	e1a0300b 	mov	r3, r11
    1c48:	ebfffe74 	bl	1620 <animate_line>
                keyRed = false; // turn off the flag
    1c4c:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
    1c50:	ea00012f 	b	2114 <main+0x840>
            } else if (keyPressed == 'D') {
    1c54:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1c58:	e3530044 	cmp	r3, #68	; 0x44
    1c5c:	1a00012c 	bne	2114 <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, RED_U16, RED, board);
    1c60:	e3a03001 	mov	r3, #1
    1c64:	e58d3000 	str	r3, [sp]
    1c68:	e58d9004 	str	r9, [sp, #4]
    1c6c:	e1a00007 	mov	r0, r7
    1c70:	e1a01007 	mov	r1, r7
    1c74:	e3a02004 	mov	r2, #4
    1c78:	e1a0300b 	mov	r3, r11
    1c7c:	ebfffe67 	bl	1620 <animate_line>
                keyRed = false; // turn off the flag
    1c80:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
    1c84:	ea000122 	b	2114 <main+0x840>
            }

        } else if (keyGreen && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
    1c88:	e5d830ad 	ldrb	r3, [r8, #173]	; 0xad
    1c8c:	e3530000 	cmp	r3, #0
    1c90:	0a000042 	beq	1da0 <main+0x4cc>
    1c94:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1c98:	e3530057 	cmp	r3, #87	; 0x57
    1c9c:	0a000008 	beq	1cc4 <main+0x3f0>
    1ca0:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1ca4:	e3530041 	cmp	r3, #65	; 0x41
    1ca8:	0a000005 	beq	1cc4 <main+0x3f0>
    1cac:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1cb0:	e3530053 	cmp	r3, #83	; 0x53
    1cb4:	0a000002 	beq	1cc4 <main+0x3f0>
    1cb8:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1cbc:	e3530044 	cmp	r3, #68	; 0x44
    1cc0:	1a000036 	bne	1da0 <main+0x4cc>

            keyRed = false;
    1cc4:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
            keyBlue = false;
    1cc8:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
            keyYellow = false;
    1ccc:	e5c870af 	strb	r7, [r8, #175]	; 0xaf
            keyOrange = false;
    1cd0:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0

            x = 2;
            y = 0;

            currX = x;
    1cd4:	e3a03002 	mov	r3, #2
    1cd8:	e58830b4 	str	r3, [r8, #180]	; 0xb4
            currY = y;
    1cdc:	e58870b8 	str	r7, [r8, #184]	; 0xb8

            //anime the lines
            // animate the line:
            if (keyPressed == 'W') {
    1ce0:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1ce4:	e3530057 	cmp	r3, #87	; 0x57
    1ce8:	1a000008 	bne	1d10 <main+0x43c>
                direction  = 1;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
    1cec:	e3a00002 	mov	r0, #2
    1cf0:	e58d0000 	str	r0, [sp]
    1cf4:	e58d9004 	str	r9, [sp, #4]
    1cf8:	e1a01007 	mov	r1, r7
    1cfc:	e3a02001 	mov	r2, #1
    1d00:	e3a03e7e 	mov	r3, #2016	; 0x7e0
    1d04:	ebfffe45 	bl	1620 <animate_line>
                keyGreen = false; // turn off the flag
    1d08:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
    1d0c:	ea000100 	b	2114 <main+0x840>
            } else if (keyPressed == 'A') {
    1d10:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1d14:	e3530041 	cmp	r3, #65	; 0x41
    1d18:	1a000008 	bne	1d40 <main+0x46c>
                direction  = 2;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
    1d1c:	e3a02002 	mov	r2, #2
    1d20:	e58d2000 	str	r2, [sp]
    1d24:	e58d9004 	str	r9, [sp, #4]
    1d28:	e1a00002 	mov	r0, r2
    1d2c:	e1a01007 	mov	r1, r7
    1d30:	e3a03e7e 	mov	r3, #2016	; 0x7e0
    1d34:	ebfffe39 	bl	1620 <animate_line>
                keyGreen = false; // turn off the flag
    1d38:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
    1d3c:	ea0000f4 	b	2114 <main+0x840>
            } else if (keyPressed == 'S') {
    1d40:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1d44:	e3530053 	cmp	r3, #83	; 0x53
    1d48:	1a000008 	bne	1d70 <main+0x49c>
                direction  = 3;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
    1d4c:	e3a00002 	mov	r0, #2
    1d50:	e58d0000 	str	r0, [sp]
    1d54:	e58d9004 	str	r9, [sp, #4]
    1d58:	e1a01007 	mov	r1, r7
    1d5c:	e3a02003 	mov	r2, #3
    1d60:	e3a03e7e 	mov	r3, #2016	; 0x7e0
    1d64:	ebfffe2d 	bl	1620 <animate_line>
                keyGreen = false; // turn off the flag
    1d68:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
    1d6c:	ea0000e8 	b	2114 <main+0x840>
            } else if (keyPressed == 'D') {
    1d70:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1d74:	e3530044 	cmp	r3, #68	; 0x44
    1d78:	1a0000e5 	bne	2114 <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, GREEN_U16, GREEN, board);
    1d7c:	e3a00002 	mov	r0, #2
    1d80:	e58d0000 	str	r0, [sp]
    1d84:	e58d9004 	str	r9, [sp, #4]
    1d88:	e1a01007 	mov	r1, r7
    1d8c:	e3a02004 	mov	r2, #4
    1d90:	e3a03e7e 	mov	r3, #2016	; 0x7e0
    1d94:	ebfffe21 	bl	1620 <animate_line>
                keyGreen = false; // turn off the flag
    1d98:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
    1d9c:	ea0000dc 	b	2114 <main+0x840>
            }

        } else if (keyBlue && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
    1da0:	e5d830ae 	ldrb	r3, [r8, #174]	; 0xae
    1da4:	e3530000 	cmp	r3, #0
    1da8:	0a000046 	beq	1ec8 <main+0x5f4>
    1dac:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1db0:	e3530057 	cmp	r3, #87	; 0x57
    1db4:	0a000008 	beq	1ddc <main+0x508>
    1db8:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1dbc:	e3530041 	cmp	r3, #65	; 0x41
    1dc0:	0a000005 	beq	1ddc <main+0x508>
    1dc4:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1dc8:	e3530053 	cmp	r3, #83	; 0x53
    1dcc:	0a000002 	beq	1ddc <main+0x508>
    1dd0:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1dd4:	e3530044 	cmp	r3, #68	; 0x44
    1dd8:	1a00003a 	bne	1ec8 <main+0x5f4>

            keyRed = false;
    1ddc:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
            keyGreen = false;
    1de0:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
            keyYellow = false;
    1de4:	e5c870af 	strb	r7, [r8, #175]	; 0xaf
            keyOrange = false;
    1de8:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0

            x = 2;
            y = 1;

            currX = x;
    1dec:	e3a03002 	mov	r3, #2
    1df0:	e58830b4 	str	r3, [r8, #180]	; 0xb4
            currY = y;
    1df4:	e3a03001 	mov	r3, #1
    1df8:	e58830b8 	str	r3, [r8, #184]	; 0xb8

            // animate the line:
            if (keyPressed == 'W') {
    1dfc:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1e00:	e3530057 	cmp	r3, #87	; 0x57
    1e04:	1a000009 	bne	1e30 <main+0x55c>
                direction  = 1;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
    1e08:	e3a03003 	mov	r3, #3
    1e0c:	e58d3000 	str	r3, [sp]
    1e10:	e58d9004 	str	r9, [sp, #4]
    1e14:	e3a00002 	mov	r0, #2
    1e18:	e3a01001 	mov	r1, #1
    1e1c:	e1a02001 	mov	r2, r1
    1e20:	e3a0301f 	mov	r3, #31
    1e24:	ebfffdfd 	bl	1620 <animate_line>
                keyBlue = false; // turn off the flag
    1e28:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
    1e2c:	ea0000b8 	b	2114 <main+0x840>
            } else if (keyPressed == 'A') {
    1e30:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1e34:	e3530041 	cmp	r3, #65	; 0x41
    1e38:	1a000009 	bne	1e64 <main+0x590>
                direction  = 2;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
    1e3c:	e3a03003 	mov	r3, #3
    1e40:	e58d3000 	str	r3, [sp]
    1e44:	e58d9004 	str	r9, [sp, #4]
    1e48:	e3a00002 	mov	r0, #2
    1e4c:	e3a01001 	mov	r1, #1
    1e50:	e1a02000 	mov	r2, r0
    1e54:	e3a0301f 	mov	r3, #31
    1e58:	ebfffdf0 	bl	1620 <animate_line>
                keyBlue = false; // turn off the flag
    1e5c:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
    1e60:	ea0000ab 	b	2114 <main+0x840>
            } else if (keyPressed == 'S') {
    1e64:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1e68:	e3530053 	cmp	r3, #83	; 0x53
    1e6c:	1a000008 	bne	1e94 <main+0x5c0>
                direction  = 3;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
    1e70:	e3a02003 	mov	r2, #3
    1e74:	e58d2000 	str	r2, [sp]
    1e78:	e58d9004 	str	r9, [sp, #4]
    1e7c:	e3a00002 	mov	r0, #2
    1e80:	e3a01001 	mov	r1, #1
    1e84:	e3a0301f 	mov	r3, #31
    1e88:	ebfffde4 	bl	1620 <animate_line>
                keyBlue = false; // turn off the flag
    1e8c:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
    1e90:	ea00009f 	b	2114 <main+0x840>
            } else if (keyPressed == 'D') {
    1e94:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1e98:	e3530044 	cmp	r3, #68	; 0x44
    1e9c:	1a00009c 	bne	2114 <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, BLUE_U16, BLUE, board);
    1ea0:	e3a03003 	mov	r3, #3
    1ea4:	e58d3000 	str	r3, [sp]
    1ea8:	e58d9004 	str	r9, [sp, #4]
    1eac:	e3a00002 	mov	r0, #2
    1eb0:	e3a01001 	mov	r1, #1
    1eb4:	e3a02004 	mov	r2, #4
    1eb8:	e3a0301f 	mov	r3, #31
    1ebc:	ebfffdd7 	bl	1620 <animate_line>
                keyBlue = false; // turn off the flag
    1ec0:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
    1ec4:	ea000092 	b	2114 <main+0x840>
            }

        } else if (keyYellow && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
    1ec8:	e5d830af 	ldrb	r3, [r8, #175]	; 0xaf
    1ecc:	e3530000 	cmp	r3, #0
    1ed0:	0a000045 	beq	1fec <main+0x718>
    1ed4:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1ed8:	e3530057 	cmp	r3, #87	; 0x57
    1edc:	0a000008 	beq	1f04 <main+0x630>
    1ee0:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1ee4:	e3530041 	cmp	r3, #65	; 0x41
    1ee8:	0a000005 	beq	1f04 <main+0x630>
    1eec:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1ef0:	e3530053 	cmp	r3, #83	; 0x53
    1ef4:	0a000002 	beq	1f04 <main+0x630>
    1ef8:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1efc:	e3530044 	cmp	r3, #68	; 0x44
    1f00:	1a000039 	bne	1fec <main+0x718>

            keyRed = false;
    1f04:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
            keyGreen = false;
    1f08:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
            keyBlue = false;
    1f0c:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
            keyOrange = false;
    1f10:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0
            x = 3;
            y = 3;

            currX = x;
    1f14:	e3a03003 	mov	r3, #3
    1f18:	e58830b4 	str	r3, [r8, #180]	; 0xb4
            currY = y;
    1f1c:	e58830b8 	str	r3, [r8, #184]	; 0xb8
            // animate the line:
            if (keyPressed == 'W') {
    1f20:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1f24:	e3530057 	cmp	r3, #87	; 0x57
    1f28:	1a000009 	bne	1f54 <main+0x680>
                direction  = 1;
                animate_line(x, y, direction, YELLOW_U16, YELLOW, board);
    1f2c:	e3a03004 	mov	r3, #4
    1f30:	e58d3000 	str	r3, [sp]
    1f34:	e58d9004 	str	r9, [sp, #4]
    1f38:	e3a00003 	mov	r0, #3
    1f3c:	e1a01000 	mov	r1, r0
    1f40:	e3a02001 	mov	r2, #1
    1f44:	e3e0301f 	mvn	r3, #31
    1f48:	ebfffdb4 	bl	1620 <animate_line>
                keyYellow = false;
    1f4c:	e5c870af 	strb	r7, [r8, #175]	; 0xaf
    1f50:	ea00006f 	b	2114 <main+0x840>
            } else if (keyPressed == 'A') {
    1f54:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1f58:	e3530041 	cmp	r3, #65	; 0x41
    1f5c:	1a000009 	bne	1f88 <main+0x6b4>
                direction  = 2;
                animate_line(x, y, direction,  YELLOW_U16, YELLOW, board);
    1f60:	e3a03004 	mov	r3, #4
    1f64:	e58d3000 	str	r3, [sp]
    1f68:	e58d9004 	str	r9, [sp, #4]
    1f6c:	e3a00003 	mov	r0, #3
    1f70:	e1a01000 	mov	r1, r0
    1f74:	e3a02002 	mov	r2, #2
    1f78:	e3e0301f 	mvn	r3, #31
    1f7c:	ebfffda7 	bl	1620 <animate_line>
                keyYellow = false;
    1f80:	e5c870af 	strb	r7, [r8, #175]	; 0xaf
    1f84:	ea000062 	b	2114 <main+0x840>
            } else if (keyPressed == 'S') {
    1f88:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1f8c:	e3530053 	cmp	r3, #83	; 0x53
    1f90:	1a000009 	bne	1fbc <main+0x6e8>
                direction  = 3;
                animate_line(x, y, direction,  YELLOW_U16, YELLOW,board);
    1f94:	e3a03004 	mov	r3, #4
    1f98:	e58d3000 	str	r3, [sp]
    1f9c:	e58d9004 	str	r9, [sp, #4]
    1fa0:	e3a00003 	mov	r0, #3
    1fa4:	e1a01000 	mov	r1, r0
    1fa8:	e1a02000 	mov	r2, r0
    1fac:	e3e0301f 	mvn	r3, #31
    1fb0:	ebfffd9a 	bl	1620 <animate_line>
                keyYellow = false;
    1fb4:	e5c870af 	strb	r7, [r8, #175]	; 0xaf
    1fb8:	ea000055 	b	2114 <main+0x840>
            } else if (keyPressed == 'D') {
    1fbc:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1fc0:	e3530044 	cmp	r3, #68	; 0x44
    1fc4:	1a000052 	bne	2114 <main+0x840>
                direction  = 4;
                animate_line(x, y, direction,  YELLOW_U16,YELLOW, board);
    1fc8:	e3a02004 	mov	r2, #4
    1fcc:	e58d2000 	str	r2, [sp]
    1fd0:	e58d9004 	str	r9, [sp, #4]
    1fd4:	e3a00003 	mov	r0, #3
    1fd8:	e1a01000 	mov	r1, r0
    1fdc:	e3e0301f 	mvn	r3, #31
    1fe0:	ebfffd8e 	bl	1620 <animate_line>
                keyYellow = false;
    1fe4:	e5c870af 	strb	r7, [r8, #175]	; 0xaf
    1fe8:	ea000049 	b	2114 <main+0x840>
            }

        } else if (keyOrange && (keyPressed == 'W' || keyPressed == 'A' || keyPressed == 'S' || keyPressed == 'D')) {
    1fec:	e5d830b0 	ldrb	r3, [r8, #176]	; 0xb0
    1ff0:	e3530000 	cmp	r3, #0
    1ff4:	0a000046 	beq	2114 <main+0x840>
    1ff8:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    1ffc:	e3530057 	cmp	r3, #87	; 0x57
    2000:	0a000008 	beq	2028 <main+0x754>
    2004:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    2008:	e3530041 	cmp	r3, #65	; 0x41
    200c:	0a000005 	beq	2028 <main+0x754>
    2010:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    2014:	e3530053 	cmp	r3, #83	; 0x53
    2018:	0a000002 	beq	2028 <main+0x754>
    201c:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    2020:	e3530044 	cmp	r3, #68	; 0x44
    2024:	1a00003a 	bne	2114 <main+0x840>

            keyRed = false;
    2028:	e5c870ac 	strb	r7, [r8, #172]	; 0xac
            keyGreen = false;
    202c:	e5c870ad 	strb	r7, [r8, #173]	; 0xad
            keyBlue = false;
    2030:	e5c870ae 	strb	r7, [r8, #174]	; 0xae
            keyYellow = false;
    2034:	e5c870af 	strb	r7, [r8, #175]	; 0xaf

            x = 3;
            y = 4;

            currX = x;
    2038:	e3a03003 	mov	r3, #3
    203c:	e58830b4 	str	r3, [r8, #180]	; 0xb4
            currY = y;
    2040:	e3a03004 	mov	r3, #4
    2044:	e58830b8 	str	r3, [r8, #184]	; 0xb8

            // animate the line:
            if (keyPressed == 'W') {
    2048:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    204c:	e3530057 	cmp	r3, #87	; 0x57
    2050:	1a000009 	bne	207c <main+0x7a8>
                direction  = 1;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    2054:	e3a03005 	mov	r3, #5
    2058:	e58d3000 	str	r3, [sp]
    205c:	e58d9004 	str	r9, [sp, #4]
    2060:	e3a00003 	mov	r0, #3
    2064:	e3a01004 	mov	r1, #4
    2068:	e3a02001 	mov	r2, #1
    206c:	e59d3008 	ldr	r3, [sp, #8]
    2070:	ebfffd6a 	bl	1620 <animate_line>
                keyOrange = false;
    2074:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0
    2078:	ea000025 	b	2114 <main+0x840>
            } else if (keyPressed == 'A') {
    207c:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    2080:	e3530041 	cmp	r3, #65	; 0x41
    2084:	1a000009 	bne	20b0 <main+0x7dc>
                direction  = 2;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    2088:	e3a03005 	mov	r3, #5
    208c:	e58d3000 	str	r3, [sp]
    2090:	e58d9004 	str	r9, [sp, #4]
    2094:	e3a00003 	mov	r0, #3
    2098:	e3a01004 	mov	r1, #4
    209c:	e3a02002 	mov	r2, #2
    20a0:	e59d3008 	ldr	r3, [sp, #8]
    20a4:	ebfffd5d 	bl	1620 <animate_line>
                keyOrange = false;
    20a8:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0
    20ac:	ea000018 	b	2114 <main+0x840>
            } else if (keyPressed == 'S') {
    20b0:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    20b4:	e3530053 	cmp	r3, #83	; 0x53
    20b8:	1a000009 	bne	20e4 <main+0x810>
                direction  = 3;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    20bc:	e3a03005 	mov	r3, #5
    20c0:	e58d3000 	str	r3, [sp]
    20c4:	e58d9004 	str	r9, [sp, #4]
    20c8:	e3a00003 	mov	r0, #3
    20cc:	e3a01004 	mov	r1, #4
    20d0:	e1a02000 	mov	r2, r0
    20d4:	e59d3008 	ldr	r3, [sp, #8]
    20d8:	ebfffd50 	bl	1620 <animate_line>
                keyOrange = false;
    20dc:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0
    20e0:	ea00000b 	b	2114 <main+0x840>
            } else if (keyPressed == 'D') {
    20e4:	e5d83022 	ldrb	r3, [r8, #34]	; 0x22
    20e8:	e3530044 	cmp	r3, #68	; 0x44
    20ec:	1a000008 	bne	2114 <main+0x840>
                direction  = 4;
                animate_line(x, y, direction, ORANGE_U16, ORANGE, board);
    20f0:	e3a03005 	mov	r3, #5
    20f4:	e58d3000 	str	r3, [sp]
    20f8:	e58d9004 	str	r9, [sp, #4]
    20fc:	e3a00003 	mov	r0, #3
    2100:	e3a01004 	mov	r1, #4
    2104:	e1a02001 	mov	r2, r1
    2108:	e59d3008 	ldr	r3, [sp, #8]
    210c:	ebfffd43 	bl	1620 <animate_line>
                keyOrange = false;
    2110:	e5c870b0 	strb	r7, [r8, #176]	; 0xb0
            }

        }

       wait_for_vsync(); // swap front and back buffers on VGA vertical sync
    2114:	ebfff8dc 	bl	48c <wait_for_vsync>
       pixel_buffer_start = *(pixel_ctrl_ptr + 1); // new back buffer
    2118:	e59d200c 	ldr	r2, [sp, #12]
    211c:	e5123fdb 	ldr	r3, [r2, #-4059]	; 0xfffff025
    2120:	e588301c 	str	r3, [r8, #28]
    }
    2124:	eafffe14 	b	197c <main+0xa8>

00002128 <resetGame>:
		//game is over if all of these are true
		//gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
	//}
}

void resetGame(bool reset, int board[][COLS]) {
    2128:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, lr}
	if(reset) {
    212c:	e3500000 	cmp	r0, #0
    2130:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
    2134:	e1a03001 	mov	r3, r1
    2138:	e3a00005 	mov	r0, #5
		int i = 0;
		int j = 0;
		for (i = 0; i < ROWS; i++) {
			for (j = 0; j < COLS; j++) {
				board [i][j] = 0;
    213c:	e3a02000 	mov	r2, #0
    2140:	e5832000 	str	r2, [r3]
    2144:	e5832004 	str	r2, [r3, #4]
    2148:	e5832008 	str	r2, [r3, #8]
    214c:	e583200c 	str	r2, [r3, #12]
    2150:	e5832010 	str	r2, [r3, #16]
    2154:	e2833014 	add	r3, r3, #20

void resetGame(bool reset, int board[][COLS]) {
	if(reset) {
		int i = 0;
		int j = 0;
		for (i = 0; i < ROWS; i++) {
    2158:	e2500001 	subs	r0, r0, #1
    215c:	1afffff7 	bne	2140 <resetGame+0x18>
			}
		}

		// hardcoding the positions
		// RED
		board [0][0] = 1;
    2160:	e3a03001 	mov	r3, #1
    2164:	e5813000 	str	r3, [r1]
		board [1][4] = 1;
    2168:	e5813024 	str	r3, [r1, #36]	; 0x24
		// GREEN
		board [2][0] = 2;
    216c:	e3a03002 	mov	r3, #2
    2170:	e5813028 	str	r3, [r1, #40]	; 0x28
		board [1][3] = 2;
    2174:	e5813020 	str	r3, [r1, #32]
		// BLUE
		board [2][1] = 3;
    2178:	e3a03003 	mov	r3, #3
    217c:	e581302c 	str	r3, [r1, #44]	; 0x2c
		board [2][4] = 3;
    2180:	e5813038 	str	r3, [r1, #56]	; 0x38
		// YELLOW
		board [4][0] = 4;
    2184:	e3a03004 	mov	r3, #4
    2188:	e5813050 	str	r3, [r1, #80]	; 0x50
		board [3][3] = 4;
    218c:	e5813048 	str	r3, [r1, #72]	; 0x48
		// ORANGE
		board [4][1] = 5;
    2190:	e3a03005 	mov	r3, #5
    2194:	e5813054 	str	r3, [r1, #84]	; 0x54
		board [3][4] = 5;
    2198:	e581304c 	str	r3, [r1, #76]	; 0x4c
		//game is over if all of these are true
		//gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
	//}
}

void resetGame(bool reset, int board[][COLS]) {
    219c:	e2417004 	sub	r7, r1, #4
		board [4][1] = 5;
		board [3][4] = 5;
		
		int row, col;
		//draw original screen
		for (row = 0; row < ROWS; row++) {
    21a0:	e3a06000 	mov	r6, #0
		//gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
	//}
}

void resetGame(bool reset, int board[][COLS]) {
	if(reset) {
    21a4:	e1a08006 	mov	r8, r6
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, ORANGE_U16);
    21a8:	e30fbbe0 	movw	r11, #64480	; 0xfbe0
    21ac:	e34fbfff 	movt	r11, #65535	; 0xffff
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, GREEN_U16);
    21b0:	e3a09e7e 	mov	r9, #2016	; 0x7e0
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, RED_U16);
    21b4:	e3a0ab3e 	mov	r10, #63488	; 0xf800
    21b8:	e34fafff 	movt	r10, #65535	; 0xffff
    21bc:	ea000029 	b	2268 <resetGame+0x140>
		
		int row, col;
		//draw original screen
		for (row = 0; row < ROWS; row++) {
			for (col = 0; col < COLS; col++) {
				if (board[row][col] == RED) {
    21c0:	e5b53004 	ldr	r3, [r5, #4]!
    21c4:	e3530001 	cmp	r3, #1
    21c8:	1a000004 	bne	21e0 <resetGame+0xb8>
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, RED_U16);
    21cc:	e1a00006 	mov	r0, r6
    21d0:	e1a01004 	mov	r1, r4
    21d4:	e1a0200a 	mov	r2, r10
    21d8:	ebfff892 	bl	428 <fill_color>
    21dc:	ea00001a 	b	224c <resetGame+0x124>
				}

				else if (board[row][col] == GREEN) {
    21e0:	e3530002 	cmp	r3, #2
    21e4:	1a000004 	bne	21fc <resetGame+0xd4>
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, GREEN_U16);
    21e8:	e1a00006 	mov	r0, r6
    21ec:	e1a01004 	mov	r1, r4
    21f0:	e1a02009 	mov	r2, r9
    21f4:	ebfff88b 	bl	428 <fill_color>
    21f8:	ea000013 	b	224c <resetGame+0x124>
				}

				else if (board[row][col] == BLUE) {
    21fc:	e3530003 	cmp	r3, #3
    2200:	1a000004 	bne	2218 <resetGame+0xf0>
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, BLUE_U16);
    2204:	e1a00006 	mov	r0, r6
    2208:	e1a01004 	mov	r1, r4
    220c:	e3a0201f 	mov	r2, #31
    2210:	ebfff884 	bl	428 <fill_color>
    2214:	ea00000c 	b	224c <resetGame+0x124>
				}

				else if (board[row][col] == YELLOW) {
    2218:	e3530004 	cmp	r3, #4
    221c:	1a000004 	bne	2234 <resetGame+0x10c>
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, YELLOW_U16);
    2220:	e1a00006 	mov	r0, r6
    2224:	e1a01004 	mov	r1, r4
    2228:	e3e0201f 	mvn	r2, #31
    222c:	ebfff87d 	bl	428 <fill_color>
    2230:	ea000005 	b	224c <resetGame+0x124>
				}

				else if (board[row][col] == ORANGE) {
    2234:	e3530005 	cmp	r3, #5
    2238:	1a000003 	bne	224c <resetGame+0x124>
					// printf("%d", board[row][col]);
					// printf("\n");
					// printf("board position: \n");
					// printf("%d ", row);
					// printf("%d \n", col);
					fill_color(row, col, ORANGE_U16);
    223c:	e1a00006 	mov	r0, r6
    2240:	e1a01004 	mov	r1, r4
    2244:	e1a0200b 	mov	r2, r11
    2248:	ebfff876 	bl	428 <fill_color>
		board [3][4] = 5;
		
		int row, col;
		//draw original screen
		for (row = 0; row < ROWS; row++) {
			for (col = 0; col < COLS; col++) {
    224c:	e2844001 	add	r4, r4, #1
    2250:	e3540005 	cmp	r4, #5
    2254:	1affffd9 	bne	21c0 <resetGame+0x98>
		board [4][1] = 5;
		board [3][4] = 5;
		
		int row, col;
		//draw original screen
		for (row = 0; row < ROWS; row++) {
    2258:	e2866001 	add	r6, r6, #1
    225c:	e2877014 	add	r7, r7, #20
    2260:	e3560005 	cmp	r6, #5
    2264:	0a000002 	beq	2274 <resetGame+0x14c>
		//gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
	//}
}

void resetGame(bool reset, int board[][COLS]) {
	if(reset) {
    2268:	e1a05007 	mov	r5, r7
    226c:	e1a04008 	mov	r4, r8
    2270:	eaffffd2 	b	21c0 <resetGame+0x98>
			}
		}
		
		//reset all global variables
		//global variables for keeping track of game status
		gameOver = false;
    2274:	e3023e14 	movw	r3, #11796	; 0x2e14
    2278:	e3403000 	movt	r3, #0
    227c:	e3a01000 	mov	r1, #0
    2280:	e5c3103c 	strb	r1, [r3, #60]	; 0x3c
		redPathFound = false;
    2284:	e5c31030 	strb	r1, [r3, #48]	; 0x30
		greenPathFound = false;
    2288:	e5c31038 	strb	r1, [r3, #56]	; 0x38
		bluePathFound = false;
    228c:	e5c31039 	strb	r1, [r3, #57]	; 0x39
		yellowPathFound = false;
    2290:	e5c3103a 	strb	r1, [r3, #58]	; 0x3a
		orangePathFound = false;
    2294:	e5c3103b 	strb	r1, [r3, #59]	; 0x3b

		//global variables for keeping track of position - initialized to the starting positions
		redCurrentX = 0;
    2298:	e583102c 	str	r1, [r3, #44]	; 0x2c
		redCurrentY = 0;
    229c:	e5831028 	str	r1, [r3, #40]	; 0x28

		greenCurrentX = 2;
    22a0:	e30229a8 	movw	r2, #10664	; 0x29a8
    22a4:	e3402000 	movt	r2, #0
    22a8:	e3a00002 	mov	r0, #2
    22ac:	e5820000 	str	r0, [r2]
		greenCurrentY = 0;
    22b0:	e5831034 	str	r1, [r3, #52]	; 0x34

		blueCurrentX = 2;
    22b4:	e5820008 	str	r0, [r2, #8]
		blueCurrentY = 4;
    22b8:	e3a00004 	mov	r0, #4
    22bc:	e5820004 	str	r0, [r2, #4]

		yellowCurrentX = 4;
    22c0:	e582000c 	str	r0, [r2, #12]
		yellowCurrentY = 0;
    22c4:	e5831040 	str	r1, [r3, #64]	; 0x40

		orangeCurrentX = 3;
    22c8:	e3a03003 	mov	r3, #3
    22cc:	e5823014 	str	r3, [r2, #20]
		orangeCurrentY = 4;
    22d0:	e5820010 	str	r0, [r2, #16]
		//game is over if all of these are true
		//gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
	//}
}

void resetGame(bool reset, int board[][COLS]) {
    22d4:	e3027e14 	movw	r7, #11796	; 0x2e14
    22d8:	e3407000 	movt	r7, #0
    22dc:	e1a09001 	mov	r9, r1
				if(x == 0 && y == 0) { //red start
					gameBoard[x][y] = 'r';
				} else if(y == 1 && x == 4) { //red end
					gameBoard[x][y] = 'R';
				} else if(y == 2 && x == 0) { //green start
					gameBoard[x][y] = 'g';
    22e0:	e3a0b067 	mov	r11, #103	; 0x67
		for(x = 0; x < 5; x++) {
			for(y = 0; y < 5; y++) {
				if(x == 0 && y == 0) { //red start
					gameBoard[x][y] = 'r';
				} else if(y == 1 && x == 4) { //red end
					gameBoard[x][y] = 'R';
    22e4:	e3a08052 	mov	r8, #82	; 0x52
    22e8:	ea000042 	b	23f8 <resetGame+0x2d0>
		//reset gameBoard
		//initializing the gameBoard variable
		int x = 0, y = 0;
		for(x = 0; x < 5; x++) {
			for(y = 0; y < 5; y++) {
				if(x == 0 && y == 0) { //red start
    22ec:	e1930001 	orrs	r0, r3, r1
					gameBoard[x][y] = 'r';
    22f0:	05c24000 	strbeq	r4, [r2]
		//reset gameBoard
		//initializing the gameBoard variable
		int x = 0, y = 0;
		for(x = 0; x < 5; x++) {
			for(y = 0; y < 5; y++) {
				if(x == 0 && y == 0) { //red start
    22f4:	0a000038 	beq	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'r';
				} else if(y == 1 && x == 4) { //red end
    22f8:	e3530001 	cmp	r3, #1
    22fc:	13a00000 	movne	r0, #0
    2300:	03a00001 	moveq	r0, #1
    2304:	e3510004 	cmp	r1, #4
    2308:	13a0c000 	movne	r12, #0
    230c:	03a0c001 	moveq	r12, #1
    2310:	e110000c 	tst	r0, r12
					gameBoard[x][y] = 'R';
    2314:	15c28000 	strbne	r8, [r2]
		int x = 0, y = 0;
		for(x = 0; x < 5; x++) {
			for(y = 0; y < 5; y++) {
				if(x == 0 && y == 0) { //red start
					gameBoard[x][y] = 'r';
				} else if(y == 1 && x == 4) { //red end
    2318:	1a00002f 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'R';
				} else if(y == 2 && x == 0) { //green start
    231c:	e3530002 	cmp	r3, #2
    2320:	13a05000 	movne	r5, #0
    2324:	03a05001 	moveq	r5, #1
    2328:	e2716001 	rsbs	r6, r1, #1
    232c:	33a06000 	movcc	r6, #0
    2330:	e1150006 	tst	r5, r6
					gameBoard[x][y] = 'g';
    2334:	15c2b000 	strbne	r11, [r2]
			for(y = 0; y < 5; y++) {
				if(x == 0 && y == 0) { //red start
					gameBoard[x][y] = 'r';
				} else if(y == 1 && x == 4) { //red end
					gameBoard[x][y] = 'R';
				} else if(y == 2 && x == 0) { //green start
    2338:	1a000027 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'g';
				} else if(y == 1 && x == 3) { //green end
    233c:	e3510003 	cmp	r1, #3
    2340:	13a0a000 	movne	r10, #0
    2344:	03a0a001 	moveq	r10, #1
    2348:	e110000a 	tst	r0, r10
					gameBoard[x][y] = 'G';
    234c:	13a00047 	movne	r0, #71	; 0x47
    2350:	15c20000 	strbne	r0, [r2]
					gameBoard[x][y] = 'r';
				} else if(y == 1 && x == 4) { //red end
					gameBoard[x][y] = 'R';
				} else if(y == 2 && x == 0) { //green start
					gameBoard[x][y] = 'g';
				} else if(y == 1 && x == 3) { //green end
    2354:	1a000020 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'G';
				} else if(y == 2 && x == 4) { //blue start
    2358:	e115000c 	tst	r5, r12
					gameBoard[x][y] = 'b';
    235c:	13a00062 	movne	r0, #98	; 0x62
    2360:	15c20000 	strbne	r0, [r2]
					gameBoard[x][y] = 'R';
				} else if(y == 2 && x == 0) { //green start
					gameBoard[x][y] = 'g';
				} else if(y == 1 && x == 3) { //green end
					gameBoard[x][y] = 'G';
				} else if(y == 2 && x == 4) { //blue start
    2364:	1a00001c 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'b';
				} else if(y == 2 && x == 1) { //blue end
    2368:	e3510001 	cmp	r1, #1
    236c:	13a00000 	movne	r0, #0
    2370:	03a00001 	moveq	r0, #1
    2374:	e1150000 	tst	r5, r0
					gameBoard[x][y] = 'B';
    2378:	13a00042 	movne	r0, #66	; 0x42
    237c:	15c20000 	strbne	r0, [r2]
					gameBoard[x][y] = 'g';
				} else if(y == 1 && x == 3) { //green end
					gameBoard[x][y] = 'G';
				} else if(y == 2 && x == 4) { //blue start
					gameBoard[x][y] = 'b';
				} else if(y == 2 && x == 1) { //blue end
    2380:	1a000015 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'B';
				} else if(y == 4 && x == 0) { //yellow start
    2384:	e3530004 	cmp	r3, #4
    2388:	13a05000 	movne	r5, #0
    238c:	03a05001 	moveq	r5, #1
    2390:	e1150006 	tst	r5, r6
					gameBoard[x][y] = 'y';
    2394:	13a00079 	movne	r0, #121	; 0x79
    2398:	15c20000 	strbne	r0, [r2]
					gameBoard[x][y] = 'G';
				} else if(y == 2 && x == 4) { //blue start
					gameBoard[x][y] = 'b';
				} else if(y == 2 && x == 1) { //blue end
					gameBoard[x][y] = 'B';
				} else if(y == 4 && x == 0) { //yellow start
    239c:	1a00000e 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'y';
				} else if(y == 3 && x == 3) { //yellow end
    23a0:	e3530003 	cmp	r3, #3
    23a4:	13a06000 	movne	r6, #0
    23a8:	03a06001 	moveq	r6, #1
    23ac:	e116000a 	tst	r6, r10
					gameBoard[x][y] = 'Y';
    23b0:	13a00059 	movne	r0, #89	; 0x59
    23b4:	15c20000 	strbne	r0, [r2]
					gameBoard[x][y] = 'b';
				} else if(y == 2 && x == 1) { //blue end
					gameBoard[x][y] = 'B';
				} else if(y == 4 && x == 0) { //yellow start
					gameBoard[x][y] = 'y';
				} else if(y == 3 && x == 3) { //yellow end
    23b8:	1a000007 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'Y';
				} else if(y == 3 && x == 4) { //orange start
    23bc:	e116000c 	tst	r6, r12
					gameBoard[x][y] = 'o';
    23c0:	13a0006f 	movne	r0, #111	; 0x6f
    23c4:	15c20000 	strbne	r0, [r2]
					gameBoard[x][y] = 'B';
				} else if(y == 4 && x == 0) { //yellow start
					gameBoard[x][y] = 'y';
				} else if(y == 3 && x == 3) { //yellow end
					gameBoard[x][y] = 'Y';
				} else if(y == 3 && x == 4) { //orange start
    23c8:	1a000003 	bne	23dc <resetGame+0x2b4>
					gameBoard[x][y] = 'o';
				} else if(y == 4 && x == 1) { //orange end
    23cc:	e1150000 	tst	r5, r0
					gameBoard[x][y] = 'O';
    23d0:	13a0004f 	movne	r0, #79	; 0x4f
				} else { //all other non-occupied places
					gameBoard[x][y] = '0';
    23d4:	03a00030 	moveq	r0, #48	; 0x30
    23d8:	e5c20000 	strb	r0, [r2]
		
		//reset gameBoard
		//initializing the gameBoard variable
		int x = 0, y = 0;
		for(x = 0; x < 5; x++) {
			for(y = 0; y < 5; y++) {
    23dc:	e2833001 	add	r3, r3, #1
    23e0:	e2822001 	add	r2, r2, #1
    23e4:	e3530005 	cmp	r3, #5
    23e8:	1affffbf 	bne	22ec <resetGame+0x1c4>
		orangeCurrentY = 4;
		
		//reset gameBoard
		//initializing the gameBoard variable
		int x = 0, y = 0;
		for(x = 0; x < 5; x++) {
    23ec:	e2811001 	add	r1, r1, #1
    23f0:	e3510005 	cmp	r1, #5
    23f4:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, r10, r11, pc}
		//game is over if all of these are true
		//gameOver = redPathFound && greenPathFound && bluePathFound && yellowPathFound && orangePathFound;
	//}
}

void resetGame(bool reset, int board[][COLS]) {
    23f8:	e0812101 	add	r2, r1, r1, lsl #2
    23fc:	e0872002 	add	r2, r7, r2
    2400:	e1a03009 	mov	r3, r9
		//initializing the gameBoard variable
		int x = 0, y = 0;
		for(x = 0; x < 5; x++) {
			for(y = 0; y < 5; y++) {
				if(x == 0 && y == 0) { //red start
					gameBoard[x][y] = 'r';
    2404:	e3a04072 	mov	r4, #114	; 0x72
    2408:	eaffffb7 	b	22ec <resetGame+0x1c4>

0000240c <KEY_ISR>:
void config_KEYs() {
	volatile int * KEY_ptr = (int *) 0xFF200050; // KEY base address
	*(KEY_ptr + 2) = 0xF; // enable interrupts for all four KEYs
}

void KEY_ISR() {
    240c:	e92d4010 	push	{r4, lr}
	volatile int *KEY_ptr = (int *) 0xFF200050;
	/* HEX display base address */
	volatile int *HEX3_HEX0_ptr = (int *) 0xFF200020;
	volatile int* RLEDs = (int*) 0xFF200000;
	int press, HEX_bits, LEDs;
	press = *(KEY_ptr + 3); // read the pushbutton interrupt register
    2410:	e3a03000 	mov	r3, #0
    2414:	e34f3f20 	movt	r3, #65312	; 0xff20
    2418:	e593405c 	ldr	r4, [r3, #92]	; 0x5c

	if(press != 0) { //if KEY is pressed, reset the game
    241c:	e3540000 	cmp	r4, #0
    2420:	0a000029 	beq	24cc <KEY_ISR+0xc0>
		pressedAgain = !pressedAgain;
    2424:	e3023e14 	movw	r3, #11796	; 0x2e14
    2428:	e3403000 	movt	r3, #0
    242c:	e5d320bc 	ldrb	r2, [r3, #188]	; 0xbc
    2430:	e2222001 	eor	r2, r2, #1
    2434:	e5c320bc 	strb	r2, [r3, #188]	; 0xbc
		reset = pressedAgain;
    2438:	e5d320bc 	ldrb	r2, [r3, #188]	; 0xbc
    243c:	e5c320bd 	strb	r2, [r3, #189]	; 0xbd

		if(reset) {
    2440:	e5d330bd 	ldrb	r3, [r3, #189]	; 0xbd
    2444:	e3530000 	cmp	r3, #0
    2448:	0a000009 	beq	2474 <KEY_ISR+0x68>
			resetGame(reset, board);
    244c:	e3021e14 	movw	r1, #11796	; 0x2e14
    2450:	e3401000 	movt	r1, #0
    2454:	e5d100bd 	ldrb	r0, [r1, #189]	; 0xbd
    2458:	e2811048 	add	r1, r1, #72	; 0x48
    245c:	ebffff31 	bl	2128 <resetGame>
			LEDs = 0xFFFF;
			*RLEDs = LEDs;
    2460:	e3a03000 	mov	r3, #0
    2464:	e34f3f20 	movt	r3, #65312	; 0xff20
    2468:	e30f2fff 	movw	r2, #65535	; 0xffff
    246c:	e5832000 	str	r2, [r3]
    2470:	ea000003 	b	2484 <KEY_ISR+0x78>
		} else {
			LEDs = 0x0000;
			*RLEDs = LEDs;
    2474:	e3a03000 	mov	r3, #0
    2478:	e34f3f20 	movt	r3, #65312	; 0xff20
    247c:	e3a02000 	mov	r2, #0
    2480:	e5832000 	str	r2, [r3]
		}

	}

	*(KEY_ptr + 3) = press; // Clear the interrupt
    2484:	e3a03000 	mov	r3, #0
    2488:	e34f3f20 	movt	r3, #65312	; 0xff20
    248c:	e583405c 	str	r4, [r3, #92]	; 0x5c
	/* if(*(KEY_ptr + 3) == 0) {
		resetGame = false;

	} */

	if (press & 0x1) // KEY0
    2490:	e3140001 	tst	r4, #1
		HEX_bits = 0b00111111;
    2494:	13a0403f 	movne	r4, #63	; 0x3f
	/* if(*(KEY_ptr + 3) == 0) {
		resetGame = false;

	} */

	if (press & 0x1) // KEY0
    2498:	1a000007 	bne	24bc <KEY_ISR+0xb0>
		HEX_bits = 0b00111111;
	else if (press & 0x2) // KEY1
    249c:	e3140002 	tst	r4, #2
		HEX_bits = 0b00000110;
    24a0:	13a04006 	movne	r4, #6

	} */

	if (press & 0x1) // KEY0
		HEX_bits = 0b00111111;
	else if (press & 0x2) // KEY1
    24a4:	1a000004 	bne	24bc <KEY_ISR+0xb0>
		HEX_bits = 0b00000110;
	else if (press & 0x4) // KEY2
    24a8:	e2044004 	and	r4, r4, #4
		HEX_bits = 0b01011011;
    24ac:	e3540000 	cmp	r4, #0
    24b0:	03a0404f 	moveq	r4, #79	; 0x4f
    24b4:	13a0405b 	movne	r4, #91	; 0x5b
    24b8:	eaffffff 	b	24bc <KEY_ISR+0xb0>
	else // press & 0x8, which is KEY3
		HEX_bits = 0b01001111;

	*HEX3_HEX0_ptr = HEX_bits;
    24bc:	e3a03000 	mov	r3, #0
    24c0:	e34f3f20 	movt	r3, #65312	; 0xff20
    24c4:	e5834020 	str	r4, [r3, #32]
    24c8:	e8bd8010 	pop	{r4, pc}
			*RLEDs = LEDs;
		}

	}

	*(KEY_ptr + 3) = press; // Clear the interrupt
    24cc:	e3a03000 	mov	r3, #0
    24d0:	e34f3f20 	movt	r3, #65312	; 0xff20
    24d4:	e3a02000 	mov	r2, #0
    24d8:	e583205c 	str	r2, [r3, #92]	; 0x5c
    24dc:	eafffff1 	b	24a8 <KEY_ISR+0x9c>

000024e0 <__cs3_isr_irq>:
	//printf("%c\n", keyPressed);
	return;
}

// Define the IRQ exception handler
void __attribute__ ((interrupt)) __cs3_isr_irq () {
    24e0:	e24ee004 	sub	lr, lr, #4
    24e4:	e92d503f 	push	{r0, r1, r2, r3, r4, r5, r12, lr}
	int interrupt_ID = *((int *) 0xFFFEC10C); //Read the ICCIAR from the CPU Interface in the GIC
    24e8:	e3e03a13 	mvn	r3, #77824	; 0x13000
    24ec:	e5134ef3 	ldr	r4, [r3, #-3827]	; 0xfffff10d
	if (interrupt_ID == 79) { // check if interrupt is from the PS/2
    24f0:	e354004f 	cmp	r4, #79	; 0x4f
    24f4:	1a000001 	bne	2500 <__cs3_isr_irq+0x20>
		PS2_ISR();
    24f8:	ebfff875 	bl	6d4 <PS2_ISR>
    24fc:	ea000004 	b	2514 <__cs3_isr_irq+0x34>
	} else if(interrupt_ID == 73) {
    2500:	e3540049 	cmp	r4, #73	; 0x49
    2504:	1a000001 	bne	2510 <__cs3_isr_irq+0x30>
		KEY_ISR();
    2508:	ebffffbf 	bl	240c <KEY_ISR>
    250c:	ea000000 	b	2514 <__cs3_isr_irq+0x34>
    2510:	eafffffe 	b	2510 <__cs3_isr_irq+0x30>
	} else
		while (1); // if unexpected, then stay here

	// Write to the End of Interrupt Register (ICCEOIR)
	*((int *) 0xFFFEC110) = interrupt_ID;
    2514:	e3e03a13 	mvn	r3, #77824	; 0x13000
    2518:	e5034eef 	str	r4, [r3, #-3823]	; 0xfffff111
    251c:	e8fd903f 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r12, pc}^

00002520 <atexit>:
    2520:	e1a01000 	mov	r1, r0
    2524:	e3a00000 	mov	r0, #0
    2528:	e92d4008 	push	{r3, lr}
    252c:	e1a02000 	mov	r2, r0
    2530:	e1a03000 	mov	r3, r0
    2534:	eb00000e 	bl	2574 <__register_exitproc>
    2538:	e8bd4008 	pop	{r3, lr}
    253c:	e12fff1e 	bx	lr

00002540 <exit>:
    2540:	e92d4008 	push	{r3, lr}
    2544:	e3a01000 	mov	r1, #0
    2548:	e1a04000 	mov	r4, r0
    254c:	eb000045 	bl	2668 <__call_exitprocs>
    2550:	e59f3018 	ldr	r3, [pc, #24]	; 2570 <exit+0x30>
    2554:	e5930000 	ldr	r0, [r3]
    2558:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    255c:	e3530000 	cmp	r3, #0
    2560:	11a0e00f 	movne	lr, pc
    2564:	112fff13 	bxne	r3
    2568:	e1a00004 	mov	r0, r4
    256c:	eb0000c9 	bl	2898 <_exit>
    2570:	00002944 	.word	0x00002944

00002574 <__register_exitproc>:
    2574:	e59fc0e4 	ldr	r12, [pc, #228]	; 2660 <__register_exitproc+0xec>
    2578:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    257c:	e59c4000 	ldr	r4, [r12]
    2580:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    2584:	e35c0000 	cmp	r12, #0
    2588:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    258c:	e59c5004 	ldr	r5, [r12, #4]
    2590:	0584c148 	streq	r12, [r4, #328]	; 0x148
    2594:	e355001f 	cmp	r5, #31
    2598:	e24dd010 	sub	sp, sp, #16
    259c:	e1a06000 	mov	r6, r0
    25a0:	da000015 	ble	25fc <__register_exitproc+0x88>
    25a4:	e59f00b8 	ldr	r0, [pc, #184]	; 2664 <__register_exitproc+0xf0>
    25a8:	e3500000 	cmp	r0, #0
    25ac:	1a000001 	bne	25b8 <__register_exitproc+0x44>
    25b0:	e3e00000 	mvn	r0, #0
    25b4:	ea000018 	b	261c <__register_exitproc+0xa8>
    25b8:	e3a00e19 	mov	r0, #400	; 0x190
    25bc:	e58d100c 	str	r1, [sp, #12]
    25c0:	e58d2008 	str	r2, [sp, #8]
    25c4:	e58d3004 	str	r3, [sp, #4]
    25c8:	e320f000 	nop	{0}
    25cc:	e250c000 	subs	r12, r0, #0
    25d0:	e59d100c 	ldr	r1, [sp, #12]
    25d4:	e59d2008 	ldr	r2, [sp, #8]
    25d8:	e59d3004 	ldr	r3, [sp, #4]
    25dc:	0afffff3 	beq	25b0 <__register_exitproc+0x3c>
    25e0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    25e4:	e3a00000 	mov	r0, #0
    25e8:	e58c0004 	str	r0, [r12, #4]
    25ec:	e58c5000 	str	r5, [r12]
    25f0:	e584c148 	str	r12, [r4, #328]	; 0x148
    25f4:	e58c0188 	str	r0, [r12, #392]	; 0x188
    25f8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    25fc:	e3560000 	cmp	r6, #0
    2600:	e59c4004 	ldr	r4, [r12, #4]
    2604:	1a000007 	bne	2628 <__register_exitproc+0xb4>
    2608:	e2843002 	add	r3, r4, #2
    260c:	e2844001 	add	r4, r4, #1
    2610:	e78c1103 	str	r1, [r12, r3, lsl #2]
    2614:	e58c4004 	str	r4, [r12, #4]
    2618:	e3a00000 	mov	r0, #0
    261c:	e28dd010 	add	sp, sp, #16
    2620:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    2624:	e12fff1e 	bx	lr
    2628:	e3a00001 	mov	r0, #1
    262c:	e1a00410 	lsl	r0, r0, r4
    2630:	e08c8104 	add	r8, r12, r4, lsl #2
    2634:	e3560002 	cmp	r6, #2
    2638:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    263c:	e5883108 	str	r3, [r8, #264]	; 0x108
    2640:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    2644:	e1877000 	orr	r7, r7, r0
    2648:	01830000 	orreq	r0, r3, r0
    264c:	e1a05008 	mov	r5, r8
    2650:	e5882088 	str	r2, [r8, #136]	; 0x88
    2654:	e58c7188 	str	r7, [r12, #392]	; 0x188
    2658:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    265c:	eaffffe9 	b	2608 <__register_exitproc+0x94>
    2660:	00002944 	.word	0x00002944
    2664:	00000000 	.word	0x00000000

00002668 <__call_exitprocs>:
    2668:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    266c:	e59f3168 	ldr	r3, [pc, #360]	; 27dc <__call_exitprocs+0x174>
    2670:	e5933000 	ldr	r3, [r3]
    2674:	e24dd014 	sub	sp, sp, #20
    2678:	e58d3004 	str	r3, [sp, #4]
    267c:	e2833f52 	add	r3, r3, #328	; 0x148
    2680:	e58d0008 	str	r0, [sp, #8]
    2684:	e58d300c 	str	r3, [sp, #12]
    2688:	e1a07001 	mov	r7, r1
    268c:	e3a08001 	mov	r8, #1
    2690:	e59d3004 	ldr	r3, [sp, #4]
    2694:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    2698:	e3560000 	cmp	r6, #0
    269c:	e59db00c 	ldr	r11, [sp, #12]
    26a0:	0a000033 	beq	2774 <__call_exitprocs+0x10c>
    26a4:	e5965004 	ldr	r5, [r6, #4]
    26a8:	e2554001 	subs	r4, r5, #1
    26ac:	5286a088 	addpl	r10, r6, #136	; 0x88
    26b0:	5285501f 	addpl	r5, r5, #31
    26b4:	508a5105 	addpl	r5, r10, r5, lsl #2
    26b8:	5a000007 	bpl	26dc <__call_exitprocs+0x74>
    26bc:	ea000029 	b	2768 <__call_exitprocs+0x100>
    26c0:	e5953000 	ldr	r3, [r5]
    26c4:	e1530007 	cmp	r3, r7
    26c8:	0a000005 	beq	26e4 <__call_exitprocs+0x7c>
    26cc:	e2444001 	sub	r4, r4, #1
    26d0:	e3740001 	cmn	r4, #1
    26d4:	e2455004 	sub	r5, r5, #4
    26d8:	0a000022 	beq	2768 <__call_exitprocs+0x100>
    26dc:	e3570000 	cmp	r7, #0
    26e0:	1afffff6 	bne	26c0 <__call_exitprocs+0x58>
    26e4:	e5963004 	ldr	r3, [r6, #4]
    26e8:	e06a2005 	rsb	r2, r10, r5
    26ec:	e2433001 	sub	r3, r3, #1
    26f0:	e0862002 	add	r2, r6, r2
    26f4:	e1530004 	cmp	r3, r4
    26f8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    26fc:	13a01000 	movne	r1, #0
    2700:	05864004 	streq	r4, [r6, #4]
    2704:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    2708:	e3530000 	cmp	r3, #0
    270c:	0affffee 	beq	26cc <__call_exitprocs+0x64>
    2710:	e1a02418 	lsl	r2, r8, r4
    2714:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    2718:	e1120001 	tst	r2, r1
    271c:	e5969004 	ldr	r9, [r6, #4]
    2720:	0a000016 	beq	2780 <__call_exitprocs+0x118>
    2724:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    2728:	e1120001 	tst	r2, r1
    272c:	1a000016 	bne	278c <__call_exitprocs+0x124>
    2730:	e59d0008 	ldr	r0, [sp, #8]
    2734:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    2738:	e1a0e00f 	mov	lr, pc
    273c:	e12fff13 	bx	r3
    2740:	e5963004 	ldr	r3, [r6, #4]
    2744:	e1530009 	cmp	r3, r9
    2748:	1affffd0 	bne	2690 <__call_exitprocs+0x28>
    274c:	e59b3000 	ldr	r3, [r11]
    2750:	e1530006 	cmp	r3, r6
    2754:	1affffcd 	bne	2690 <__call_exitprocs+0x28>
    2758:	e2444001 	sub	r4, r4, #1
    275c:	e3740001 	cmn	r4, #1
    2760:	e2455004 	sub	r5, r5, #4
    2764:	1affffdc 	bne	26dc <__call_exitprocs+0x74>
    2768:	e59f1070 	ldr	r1, [pc, #112]	; 27e0 <__call_exitprocs+0x178>
    276c:	e3510000 	cmp	r1, #0
    2770:	1a000009 	bne	279c <__call_exitprocs+0x134>
    2774:	e28dd014 	add	sp, sp, #20
    2778:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    277c:	e12fff1e 	bx	lr
    2780:	e1a0e00f 	mov	lr, pc
    2784:	e12fff13 	bx	r3
    2788:	eaffffec 	b	2740 <__call_exitprocs+0xd8>
    278c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    2790:	e1a0e00f 	mov	lr, pc
    2794:	e12fff13 	bx	r3
    2798:	eaffffe8 	b	2740 <__call_exitprocs+0xd8>
    279c:	e5963004 	ldr	r3, [r6, #4]
    27a0:	e3530000 	cmp	r3, #0
    27a4:	e5963000 	ldr	r3, [r6]
    27a8:	1a000008 	bne	27d0 <__call_exitprocs+0x168>
    27ac:	e3530000 	cmp	r3, #0
    27b0:	0a000006 	beq	27d0 <__call_exitprocs+0x168>
    27b4:	e1a00006 	mov	r0, r6
    27b8:	e58b3000 	str	r3, [r11]
    27bc:	e320f000 	nop	{0}
    27c0:	e59b6000 	ldr	r6, [r11]
    27c4:	e3560000 	cmp	r6, #0
    27c8:	1affffb5 	bne	26a4 <__call_exitprocs+0x3c>
    27cc:	eaffffe8 	b	2774 <__call_exitprocs+0x10c>
    27d0:	e1a0b006 	mov	r11, r6
    27d4:	e1a06003 	mov	r6, r3
    27d8:	eafffff9 	b	27c4 <__call_exitprocs+0x15c>
    27dc:	00002944 	.word	0x00002944
    27e0:	00000000 	.word	0x00000000

000027e4 <register_fini>:
    27e4:	e92d4008 	push	{r3, lr}
    27e8:	e59f3010 	ldr	r3, [pc, #16]	; 2800 <register_fini+0x1c>
    27ec:	e3530000 	cmp	r3, #0
    27f0:	159f000c 	ldrne	r0, [pc, #12]	; 2804 <register_fini+0x20>
    27f4:	1bffff49 	blne	2520 <atexit>
    27f8:	e8bd4008 	pop	{r3, lr}
    27fc:	e12fff1e 	bx	lr
    2800:	0000296c 	.word	0x0000296c
    2804:	00002808 	.word	0x00002808

00002808 <__libc_fini_array>:
    2808:	e92d4038 	push	{r3, r4, r5, lr}
    280c:	e59f5030 	ldr	r5, [pc, #48]	; 2844 <__libc_fini_array+0x3c>
    2810:	e59f4030 	ldr	r4, [pc, #48]	; 2848 <__libc_fini_array+0x40>
    2814:	e0654004 	rsb	r4, r5, r4
    2818:	e1b04144 	asrs	r4, r4, #2
    281c:	10855104 	addne	r5, r5, r4, lsl #2
    2820:	0a000004 	beq	2838 <__libc_fini_array+0x30>
    2824:	e5353004 	ldr	r3, [r5, #-4]!
    2828:	e1a0e00f 	mov	lr, pc
    282c:	e12fff13 	bx	r3
    2830:	e2544001 	subs	r4, r4, #1
    2834:	1afffffa 	bne	2824 <__libc_fini_array+0x1c>
    2838:	eb00004b 	bl	296c <__libc_fini>
    283c:	e8bd4038 	pop	{r3, r4, r5, lr}
    2840:	e12fff1e 	bx	lr
    2844:	00002984 	.word	0x00002984
    2848:	00002988 	.word	0x00002988

0000284c <__cs3_premain>:
    284c:	e92d4008 	push	{r3, lr}
    2850:	eb000017 	bl	28b4 <__libc_init_array>
    2854:	e59f3030 	ldr	r3, [pc, #48]	; 288c <__cs3_premain+0x40>
    2858:	e3530000 	cmp	r3, #0
    285c:	15930000 	ldrne	r0, [r3]
    2860:	01a00003 	moveq	r0, r3
    2864:	e59f3024 	ldr	r3, [pc, #36]	; 2890 <__cs3_premain+0x44>
    2868:	e3530000 	cmp	r3, #0
    286c:	15931000 	ldrne	r1, [r3]
    2870:	01a01003 	moveq	r1, r3
    2874:	e3a02000 	mov	r2, #0
    2878:	ebfffc15 	bl	18d4 <main>
    287c:	e59f3010 	ldr	r3, [pc, #16]	; 2894 <__cs3_premain+0x48>
    2880:	e3530000 	cmp	r3, #0
    2884:	1bffff2d 	blne	2540 <exit>
    2888:	eafffffe 	b	2888 <__cs3_premain+0x3c>
	...
    2894:	00002540 	.word	0x00002540

00002898 <_exit>:
    2898:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    289c:	e3a00018 	mov	r0, #24
    28a0:	e59f1004 	ldr	r1, [pc, #4]	; 28ac <_exit+0x14>
    28a4:	ef123456 	svc	0x00123456
    28a8:	eafffffe 	b	28a8 <_exit+0x10>
    28ac:	00020026 	.word	0x00020026

000028b0 <__cs3_isr_interrupt>:
    28b0:	eafffffe 	b	28b0 <__cs3_isr_interrupt>

000028b4 <__libc_init_array>:
    28b4:	e92d4070 	push	{r4, r5, r6, lr}
    28b8:	e59f506c 	ldr	r5, [pc, #108]	; 292c <__libc_init_array+0x78>
    28bc:	e59f606c 	ldr	r6, [pc, #108]	; 2930 <__libc_init_array+0x7c>
    28c0:	e0656006 	rsb	r6, r5, r6
    28c4:	e1b06146 	asrs	r6, r6, #2
    28c8:	12455004 	subne	r5, r5, #4
    28cc:	13a04000 	movne	r4, #0
    28d0:	0a000005 	beq	28ec <__libc_init_array+0x38>
    28d4:	e5b53004 	ldr	r3, [r5, #4]!
    28d8:	e2844001 	add	r4, r4, #1
    28dc:	e1a0e00f 	mov	lr, pc
    28e0:	e12fff13 	bx	r3
    28e4:	e1560004 	cmp	r6, r4
    28e8:	1afffff9 	bne	28d4 <__libc_init_array+0x20>
    28ec:	e59f5040 	ldr	r5, [pc, #64]	; 2934 <__libc_init_array+0x80>
    28f0:	e59f6040 	ldr	r6, [pc, #64]	; 2938 <__libc_init_array+0x84>
    28f4:	e0656006 	rsb	r6, r5, r6
    28f8:	eb000013 	bl	294c <_init>
    28fc:	e1b06146 	asrs	r6, r6, #2
    2900:	12455004 	subne	r5, r5, #4
    2904:	13a04000 	movne	r4, #0
    2908:	0a000005 	beq	2924 <__libc_init_array+0x70>
    290c:	e5b53004 	ldr	r3, [r5, #4]!
    2910:	e2844001 	add	r4, r4, #1
    2914:	e1a0e00f 	mov	lr, pc
    2918:	e12fff13 	bx	r3
    291c:	e1560004 	cmp	r6, r4
    2920:	1afffff9 	bne	290c <__libc_init_array+0x58>
    2924:	e8bd4070 	pop	{r4, r5, r6, lr}
    2928:	e12fff1e 	bx	lr
    292c:	00002964 	.word	0x00002964
    2930:	00002964 	.word	0x00002964
    2934:	00002964 	.word	0x00002964
    2938:	0000296c 	.word	0x0000296c

Disassembly of section .rodata:

00002940 <_global_impure_ptr-0x4>:
    2940:	00000055 	.word	0x00000055

00002944 <_global_impure_ptr>:
    2944:	000029c8 00000043                       .)..C...

0000294c <_init>:
    294c:	e1a0c00d 	mov	r12, sp
    2950:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2954:	e24cb004 	sub	r11, r12, #4
    2958:	e24bd028 	sub	sp, r11, #40	; 0x28
    295c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2960:	e12fff1e 	bx	lr

00002964 <__init_array_start>:
    2964:	000027e4 	.word	0x000027e4

00002968 <__frame_dummy_init_array_entry>:
    2968:	00000208                                ....

0000296c <__libc_fini>:
    296c:	e1a0c00d 	mov	r12, sp
    2970:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    2974:	e24cb004 	sub	r11, r12, #4
    2978:	e24bd028 	sub	sp, r11, #40	; 0x28
    297c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    2980:	e12fff1e 	bx	lr

00002984 <__fini_array_start>:
    2984:	000001c4 	.word	0x000001c4

00002988 <__cs3_regions>:
    2988:	00000000 	.word	0x00000000
    298c:	00000040 	.word	0x00000040
    2990:	00000040 	.word	0x00000040
    2994:	00002db8 	.word	0x00002db8
    2998:	000000f8 	.word	0x000000f8

0000299c <__cs3_regions_end>:
    299c:	00000000 	.word	0x00000000
